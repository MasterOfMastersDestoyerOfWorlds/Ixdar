{0
[Segment[0 : 38], Segment[1 : 0], Segment[0 : 34], Segment[0 : 35], Segment[0 : 36], Segment[0 : 37], Segment[0 : 2], Segment[0 : 33], Segment[0 : 32], Segment[0 : 6], Segment[0 : 5], Segment[0 : 26], Segment[0 : 7], Segment[0 : 24], Segment[0 : 27], Segment[0 : 25], Segment[0 : 31], Segment[0 : 8], Segment[0 : 30], Segment[0 : 28], Segment[0 : 29], Segment[0 : 23], Segment[0 : 20], Segment[0 : 21], Segment[0 : 22], Segment[0 : 9], Segment[0 : 18], Segment[0 : 15], Segment[0 : 17], Segment[0 : 12], Segment[0 : 16], Segment[0 : 11], Segment[0 : 14], Segment[0 : 19], Segment[0 : 10], Segment[0 : 13]], 1
[Segment[1 : 38], Segment[1 : 0], Segment[1 : 34], Segment[1 : 35], Segment[1 : 36], Segment[1 : 37], Segment[1 : 2], Segment[1 : 33], Segment[1 : 32], Segment[1 : 5], Segment[1 : 6], Segment[1 : 26], Segment[1 : 27], Segment[1 : 7], Segment[1 : 24], Segment[1 : 25], Segment[1 : 31], Segment[1 : 8], Segment[1 : 30], Segment[1 : 28], Segment[1 : 29], Segment[1 : 23], Segment[1 : 20], Segment[1 : 21], Segment[1 : 9], Segment[1 : 22], Segment[1 : 15], Segment[1 : 18], Segment[1 : 17], Segment[1 : 12], Segment[1 : 16], Segment[1 : 11], Segment[1 : 14], Segment[1 : 19], Segment[1 : 10], Segment[1 : 13]], 2

e[ Segment[1 : 2], Segment[34 : 2], Segment[35 : 2], Segment[36 : 2], Segment[37 : 2], Segment[6 : 2], Segment[0 : 2], Segment[7 : 2], Segment[27 : 2], Segment[26 : 2], Segment[8 : 2], Segment[31 : 2], Segment[30 : 2], Segment[28 : 2], Segment[29 : 2], Segment[2 : 25], Segment[24 : 2], Segment[9 : 2], Segment[15 : 2], Segment[12 : 2], Segment[23 : 2], Segment[11 : 2], Segment[20 : 2], Segment[2 : 21], Segment[10 : 2], Segment[17 : 2], Segment[2 : 18], Segment[22 : 2], Segment[14 : 2], Segment[16 : 2], Segment[2 : 13], Segment[2 : 19], Segment[2 : 38]], 3
e Segment[18 : 19], Segment[20 : 18], Segment[18 : 21], Segment[22 : 18], Segment[18 : 25], Segment[16 : 18], Segment[23 : 18], Segment[15 : 18], Segment[24 : 18], Segment[29 : 18], Segment[26 : 18], Segment[28 : 18], Segment[27 : 18], Segment[30 : 18], Segment[31 : 18], Segment[14 : 18], Segment[37 : 18], Segment[36 : 18], Segment[35 : 18], Segment[34 : 18], Segment[32 : 18], Segment[33 : 18], Segment[1 : 18], Segment[2 : 18], Segment[3 : 18], Segment[0 : 18], Segment[4 : 18], Segment[5 : 18], Segment[12 : 18], Segment[6 : 18], Segment[13 : 18], Segment[8 : 18], Segment[7 : 18], Segment[11 : 18], Segment[9 : 18], Segment[10 : 18], Segment[18 : 38]], 19
[Segment[18 : 19], Segment[20 : 19], Segment[19 : 21], Segment[17 : 19], Segment[22 : 19], Segment[23 : 19], Segment[16 : 19], Segment[19 : 25], Segment[15 : 19], Segment[24 : 19], Segment[29 : 19], Segment[26 : 19], Segment[28 : 19], Segment[27 : 19], Segment[30 : 19], Segment[14 : 19], Segment[31 : 19], Segment[37 : 19], Segment[36 : 19], Segment[35 : 19], Segment[34 : 19], Segment[32 : 19], Segment[33 : 19], Segment[1 : 19], Segment[0 : 19], Segment[2 : 19], Segment[3 : 19], Segment[4 : 19], Segment[5 : 19], Segment[12 : 19], Segment[6 : 19], Segment[13 : 19], Segment[8 : 19], Segment[7 : 19], Segment[11 : 19], Segment[9 : 19], Segment[10 : 19], Segment[19 : 38]], 20
[Segment[20 : 21], Segment[23 : 20], Segment[20 : 18], Segment[20 : 19], Segment[20 : 25], Segment[20 : 24], Segment[17 : 20], Segment[20 : 26], Segment[27 : 20], Segment[20 : 15], Segment[29 : 20], Segment[28 : 20], Segment[20 : 16], Segment[37 : 20], Segment[36 : 20], Segment[35 : 20], Segment[30 : 20], Segment[34 : 20], Segment[31 : 20], Segment[1 : 20], Segment[32 : 20], Segment[0 : 20], Segment[33 : 20], Segment[20 : 2], Segment[3 : 20], Segment[20 : 14], Segment[4 : 20], Segment[5 : 20], Segment[6 : 20], Segment[7 : 20], Segment[8 : 20], Segment[20 : 12], Segment[11 : 20], Segment[20 : 13], Segment[20 : 9], Segment[20 : 10], Segment[20 : 38]], 21
e[Segment[20 : 21], Segment[23 : 21], Segment[18 : 21], Segment[19 : 21], Segment[24 : 21], Segment[25 : 21], Segment[17 : 21], Segment[26 : 21], Segment[27 : 21], Segment[29 : 21], Segment[15 : 21], Segment[28 : 21], Segment[16 : 21], Segment[37 : 21], Segment[36 : 21], Segment[35 : 21], Segment[34 : 21], Segment[30 : 21], Segment[31 : 21], Segment[1 : 21], Segment[0 : 21], Segment[32 : 21], Segment[33 : 21], Segment[2 : 21], Segment[3 : 21], Segment[14 : 21], Segment[4 : 21], Segment[5 : 21], Segment[6 : 21], Segment[7 : 21], Segment[8 : 21], Segment[12 : 21], Segment[11 : 21], Segment[9 : 21], Segment[13 : 21], Segment[10 : 21], Segment[21 : 38]], 22
e[  Segment[23 : 20], Segment[23 : 24], Segment[23 : 25], Segment[23 : 18], Segment[23 : 19], Segment[23 : 17], Segment[23 : 26], Segment[37 : 23], Segment[36 : 23], Segment[23 : 35], Segment[34 : 23], Segment[23 : 27], Segment[1 : 23], Segment[23 : 29], Segment[23 : 28], Segment[0 : 23], Segment[23 : 30], Segment[23 : 15], Segment[23 : 31], Segment[23 : 32], Segment[23 : 16], Segment[23 : 33], Segment[23 : 2], Segment[3 : 23], Segment[23 : 4], Segment[23 : 5], Segment[6 : 23], Segment[23 : 14], Segment[7 : 23], Segment[23 : 8], Segment[23 : 12], Segment[23 : 9], Segment[23 : 11], Segment[23 : 13], Segment[23 : 10], Segment[23 : 38]], 24
[Segment[24 : 25], Segment[23 : 24], Segment[37 : 24], Segment[36 : 24], Segment[35 : 24], Segment[24 : 21], Segment[20 : 24], Segment[34 : 24], Segment[22 : 24], Segment[26 : 24], Segment[1 : 24], Segment[0 : 24], Segment[27 : 24], Segment[24 : 18], Segment[24 : 2], Segment[3 : 24], Segment[32 : 24], Segment[28 : 24], Segment[33 : 24], Segment[29 : 24], Segment[31 : 24], Segment[30 : 24], Segment[17 : 24], Segment[4 : 24], Segment[24 : 19], Segment[5 : 24], Segment[15 : 24], Segment[6 : 24], Segment[24 : 16], Segment[7 : 24], Segment[8 : 24], Segment[24 : 14], Segment[24 : 9], Segment[24 : 12], Segment[11 : 24], Segment[24 : 13], Segment[10 : 24], Segment[24 : 38]], 25
e[Segment[24 : 25], Segment[27 : 25], Segment[28 : 25], Segment[29 : 25], Segment[37 : 25], Segment[36 : 25], Segment[20 : 25], Segment[35 : 25], Segment[34 : 25], Segment[25 : 21], Segment[30 : 25], Segment[31 : 25], Segment[23 : 25], Segment[18 : 25], Segment[32 : 25], Segment[33 : 25], Segment[17 : 25], Segment[1 : 25], Segment[22 : 25], Segment[2 : 25], Segment[3 : 25], Segment[0 : 25], Segment[15 : 25], Segment[4 : 25], Segment[19 : 25], Segment[16 : 25], Segment[5 : 25], Segment[6 : 25], Segment[14 : 25], Segment[7 : 25], Segment[8 : 25], Segment[12 : 25], Segment[9 : 25], Segment[11 : 25], Segment[13 : 25], Segment[10 : 25], Segment[25 : 38]], 26
e[Segment[33 : 32], Segment[4 : 32], Segment[27 : 32], Segment[32 : 26], Segment[34 : 32], Segment[30 : 32], Segment[35 : 32], Segment[36 : 32], Segment[37 : 32], Segment[28 : 32], Segment[1 : 32], Segment[6 : 32], Segment[32 : 29], Segment[32 : 8], Segment[7 : 32], Segment[0 : 32], Segment[32 : 25], Segment[32 : 9], Segment[32 : 24], Segment[32 : 15], Segment[32 : 12], Segment[11 : 32], Segment[32 : 14], Segment[17 : 32], Segment[32 : 16], Segment[32 : 20], Segment[32 : 18], Segment[32 : 10], Segment[32 : 21], Segment[23 : 32], Segment[32 : 22], Segment[32 : 13], Segment[32 : 19], Segment[32 : 38]], 33
[Segment[33 : 32],  Segment[34 : 33], Segment[35 : 33], Segment[36 : 33], Segment[37 : 33], Segment[6 : 33], Segment[1 : 33], Segment[30 : 33], Segment[28 : 33], Segment[7 : 33], Segment[33 : 8], Segment[33 : 29], Segment[0 : 33], Segment[33 : 25], Segment[33 : 9], Segment[33 : 24], Segment[33 : 15], Segment[33 : 12], Segment[11 : 33], Segment[33 : 14], Segment[17 : 33], Segment[33 : 16], Segment[33 : 10], Segment[33 : 20], Segment[33 : 18], Segment[33 : 21], Segment[23 : 33], Segment[33 : 22], Segment[33 : 13], Segment[33 : 19], Segment[33 : 38]], 34

[Segment[34 : 35], Segment[34 : 36], Segment[37 : 34], Segment[34 : 33], Segment[34 : 32], Segment[34 : 4], Segment[34 : 26], Segment[34 : 27], Segment[34 : 5], Segment[34 : 25], Segment[34 : 24], Segment[34 : 6], Segment[34 : 31], Segment[7 : 34], Segment[34 : 30], Segment[34 : 28], Segment[34 : 29], Segment[34 : 8], Segment[34 : 23], Segment[34 : 20], Segment[34 : 21], Segment[34 : 22], Segment[34 : 15], Segment[34 : 18], Segment[34 : 9], Segment[34 : 17], Segment[34 : 16], Segment[34 : 12], Segment[34 : 14], Segment[34 : 11], Segment[34 : 19], Segment[34 : 10], Segment[34 : 13], Segment[34 : 38]], 35

[Segment[36 : 35], Segment[37 : 35], Segment[34 : 35], Segment[1 : 35], Segment[0 : 35], Segment[35 : 2], Segment[3 : 35], Segment[35 : 33], Segment[35 : 32], Segment[35 : 26], Segment[4 : 35], Segment[27 : 35], Segment[35 : 24], Segment[35 : 25], Segment[35 : 5], Segment[6 : 35], Segment[35 : 31], Segment[7 : 35], Segment[30 : 35], Segment[28 : 35], Segment[35 : 29], Segment[35 : 8], Segment[23 : 35], Segment[35 : 20], Segment[35 : 21], Segment[35 : 22], Segment[35 : 18], Segment[35 : 15], Segment[17 : 35], Segment[35 : 9], Segment[35 : 16], Segment[35 : 12], Segment[35 : 14], Segment[35 : 19], Segment[11 : 35], Segment[35 : 10], Segment[35 : 13], Segment[35 : 38]], 36
[Segment[37 : 36], Segment[36 : 35], Segment[34 : 36], Segment[1 : 36], Segment[0 : 36], Segment[36 : 2], Segment[3 : 36], Segment[36 : 33], Segment[36 : 32], Segment[36 : 26], Segment[36 : 4], Segment[36 : 27], Segment[36 : 24], Segment[36 : 25], Segment[36 : 5], Segment[36 : 6], Segment[36 : 31], Segment[36 : 30], Segment[36 : 28], Segment[7 : 36], Segment[36 : 29], Segment[36 : 8], Segment[36 : 23], Segment[36 : 20], Segment[36 : 21], Segment[36 : 22], Segment[36 : 18], Segment[36 : 15], Segment[36 : 17], Segment[36 : 9], Segment[36 : 16], Segment[36 : 12], Segment[36 : 14], Segment[36 : 19], Segment[36 : 11], Segment[36 : 10], Segment[36 : 13], Segment[36 : 38]], 37
[Segment[37 : 36], Segment[37 : 35], Segment[37 : 34], Segment[1 : 37], Segment[0 : 37], Segment[37 : 2], Segment[3 : 37], Segment[37 : 33], Segment[37 : 32], Segment[37 : 26], Segment[37 : 4], Segment[37 : 27], Segment[37 : 24], Segment[37 : 25], Segment[37 : 5], Segment[37 : 6], Segment[37 : 31], Segment[37 : 28], Segment[37 : 30], Segment[37 : 7], Segment[37 : 29], Segment[37 : 8], Segment[37 : 23], Segment[37 : 20], Segment[37 : 21], Segment[37 : 22], Segment[37 : 18], Segment[37 : 15], Segment[37 : 17], Segment[37 : 9], Segment[37 : 16], Segment[37 : 12], Segment[37 : 14], Segment[37 : 19], Segment[37 : 11], Segment[37 : 10], Segment[37 : 13], Segment[37 : 38]], 38

[Segment[1 : 38], Segment[0 : 38], Segment[37 : 38],Segment[34 : 38], Segment[36 : 38], Segment[23 : 38], Segment[27 : 38], Segment[17 : 38], Segment[30 : 38], Segment[28 : 38], Segment[4 : 38], Segment[11 : 38], Segment[35 : 38], Segment[33 : 38], Segment[32 : 38], Segment[8 : 38], Segment[31 : 38], Segment[5 : 38], Segment[22 : 38], Segment[29 : 38], Segment[20 : 38], Segment[15 : 38], Segment[10 : 38], Segment[26 : 38], Segment[24 : 38], Segment[12 : 38], Segment[9 : 38], Segment[16 : 38], Segment[14 : 38], Segment[2 : 38], Segment[13 : 38], Segment[18 : 38], Segment[19 : 38], Segment[25 : 38], Segment[21 : 38]]}

2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 
25 26 27 28 29 30 31 32


 19 

 20



  21 22 23


[0 38 1] knot a


[28 29 30] knot b

[36 35 37] knot c
[33 32] 2 knot d

3 half-knot:


2 knot:

 a <-> b 

 a -> *g

 b -> *g

3-knot:

 a <-> b 

 b <-> c 

 a <-> b

4-knot:

  a <-> b

  b <-> c
  
  c <-> d
  
  d <-> a

  disovles to 3-knot

5-knot:

  a <-> b

  b <-> c
  
  c <-> d
  
  d <-> e

  e <-> a

  disovles to 4-knot
string:

  [..... a] <-> b

  b <-> c

  c <-> [d .......]

easiest to resolve simply disolve into a <-> bc <-> d (need to prove this) most likely by contradiction

lets say we had a loop size n  (a <-> b <-> c <->... <-> n <-> a) then we are done , gg everythings in the right order goodbye

lets say we now change the loop so that a wants b but not the other way around and a wants n but not the other way around
 ( a -> b, a -> n , n <-> b <->c <-> d <->...<-> n)

the question might be can we resolve  bc without ruining the answer, I'd argue yes since a had no chance with b or n, 
this only reveals the next prefrence of a
once we keep collapsing the loop down to a 3-knot, then we can actually look at the problem and some the n permutations involving A

hmmmmmmmmmmmmmmmmmmmmmmmm thats not very convicing and is more like restating the problem since how do we know that the three
we choose to show to a are the right ones



 for a 2 knot remove *g until  a and b no longer refer to the same connection ( or maybe the same knot clearing would work on this?)

most likely every problem can be decomposed into sections of 2-knots and 3-knots and strings.
as long as you don't combine a knot before solving it, then you will not need to go to solve the 4 knot.

(might be also that a 4knot can be decomposed into 2 2-knots, if we can decompose every k-knot into one 3-knot 
and k/2 2-knots then we cover all possibilities)

mabye a knot is self referential and then reffers to another g but all refer to the same group g

for a k-knot there are k^2 orderings to check and 2 outside connections
e.g.

where 1, 0 are grouped and 34 is single
but this must be because 1, 2 is shorter than 0, 2
[Segment[36 : 35], Segment[37 : 35], Segment[34 : 35], Segment[1 : 35], Segment[0 : 35], 
[Segment[37 : 36], Segment[36 : 35], Segment[34 : 36], Segment[1 : 36], Segment[0 : 36], 
[Segment[37 : 36], Segment[37 : 35], Segment[37 : 34], Segment[1 : 37], Segment[0 : 37],
results in [0 37 36 35 34 ]

so we know knota [1 38 0] connects to knotb [37 36 35] and we know [34] connects to knotb so we can ignore those values when solving for knota

2 prefers 1 over 0 so we can resolve knot a to [2 1 38 0]

how the fuck you code that i do not know.

now that knota is resolved and we know 1 or 0 connects to knotb from knotb's extended listthen we can resolve knotb by trying all configurations
of the thing
maybe best to keep a knot list so we know which fuzzy ends are accounted for
i belive since 1 and 0 are accounted for we can resolve 34,35

you should be able to resolve any 3 knot with 3 possibilities by going toeach possibility, excluding every segment
in the knot list and looking for matches, 
e.g.

Segment[0 : 38], Segment[1 : 0], Segment[0 : 34], Segment[0 : 35], Segment[0 : 36], Segment[0 : 37], Segment[0 : 2], ...
                                                                                                            ^
Segment[1 : 38], Segment[1 : 0], Segment[1 : 34], Segment[1 : 35], Segment[1 : 36], Segment[1 : 37], Segment[1 : 2], ...
                                                                                                            ^
Segment[34 : 35], Segment[34 : 36], Segment[37 : 34], Segment[34 : 33], ...
                                                                ^

most will not have matches but some will and will solve the knot in this case 34 and 1 both have matches that could be added to the match list

knot clearing:

for each point that is in a knot add it to the knot list, then iterate through each sub-bucket in the knot list, 
exclude all segments with points in the knot list (non-self exclusion) check for matches between the first non-knot segment and 
another points list.

i do not know what you would do if for example 1 and 0 both matched two different segments outside the knot list since one of them has
to the knot. maybe batch by groups and look for the lowest cost match that kinda sounds sucky.

all knots must be resolved from within for example,

[Segment[2 : 33], Segment[32 : 2], Segment[2 : 5], Segment[1 : 2],...

[Segment[32 : 33], Segment[32 : 2], Segment[32 : 5], Segment[32 : 31], ...
[Segment[32 : 33], Segment[2 : 33], Segment[5 : 33], Segment[33 : 27], ...

assume that 2 is in some shell such that its opposite end can match to another shell
then we have the situation where:

2 matches to 33 and 32 wants to match to 2 as well, but [33, 32] is in a 2 knot such that
 if everyone got what they wanted, then 2 would match to 32 and 33. more like a noose if you ask me

so what are we to do? I believe before each go around we should note all knots and add the condition 
that knots may not be resolved externally, this is the only way to ensure that we don't add unwanted connections before
determining if they are viable or not.

there are a lot more knots than I thought also it seems hard to distinguish between a 3knot and a 2knot since a 3knot contians  3 2knots
I think we need to solve all of the 2 knots before the 3 knots

the knots should not be looking at their common points to unravel, they need to look beyond their common points

for 3 knots lets have the criterion be 2 matches then we can finish
but for example we may have a situation like so:

26  s  [Segment[26 : 27], Segment[26 : 28], Segment[26 : 31], Segment[26 : 29], Segment[26 : 30], Segment[26 : 25],...]
27  s  [Segment[26 : 27], Segment[27 : 31] , Segment[27 : 28], Segment[27 : 30], Segment[27 : 29] , Segment[32 : 27], ...]

[ 3knot-a
28  s  [Segment[28 : 29], Segment[30 : 28], Segment[28 : 31], Segment[27 : 28], Segment[26 : 28], ...]
29  s  [Segment[28 : 29], Segment[30 : 29], Segment[31 : 29], Segment[27 : 29], Segment[26 : 29], ...]
30  s  [Segment[30 : 28], Segment[30 : 29], Segment[30 : 31], Segment[27 : 30], Segment[26 : 30], ...]
]

31  s  [Segment[30 : 31], Segment[28 : 31], Segment[27 : 31], Segment[31 : 29], Segment[26 : 31], Segment[32 : 31], ...]

[ 2knot-b
32  s  [Segment[32 : 33], Segment[32 : 2], Segment[32 : 31], Segment[32 : 27], ...]
33  s  [Segment[32 : 33], Segment[2 : 33], Segment[27 : 33], Segment[31 : 33], Segment[26 : 33], Segment[34 : 33], ...]
]

in this example segments:  Segment[28 : 31], Segment[30 : 31] could both be naively matches (along with [31 :29] non-naively) 
and segments [27 :28], [27 : 29], [27 : 30] coud also be matches and [26 : 28], [26 : 29] and [26 : 30] could also be matches!
What should we do? should we go through all 9 options and all of thier permutations? probably not if we want to scale this to
the 4-knot, then again this would be a constant time operation?

lets consider point 26, what is its segment list really saying?

26  s  [Segment[26 : 27], Segment[26 : 28], Segment[26 : 31], Segment[26 : 29], Segment[26 : 30], Segment[26 : 25],...]

well we know that 26 and 27 are a group and both of them want to connect to  3-knota and 31
(maybe in order to solve the knot we need to exclude 31  and 3-knota and look at the next match in the matchlist
if we did this we would get Segment[32 : 31], Segment[26 : 25], and Segment[32 : 27] as potentail matches)

if we look at 25:
25  s  [Segment[26 : 25], Segment[25 : 24], ...]

 Segment[32 : 31] would not match yet

25 would be a match, then you'd have 25 26 27 and 27 could match with 28 and 31 with 30 
which is 3 matches for a 3-knot

if we just naively took the best matches in each list we would get Segment[30 : 31] and Segment[27 : 28], 
which is correct but I'm not sure this would generalize

lets look at another example

34  s  [Segment[34 : 35], Segment[34 : 36], Segment[34 : 37], Segment[1 : 34], Segment[0 : 34], Segment[34 : 2], Segment[34 : 33], Segment[34 : 32], Segment[26 : 34], Segment[34 : 27], Segment[34 : 25], Segment[34 : 24], Segment[34 : 6], Segment[34 : 31], Segment[34 : 7], Segment[34 : 30], Segment[34 : 28], Segment[34 : 29], Segment[34 : 8], Segment[20 : 34], Segment[34 : 21], Segment[34 : 22], Segment[34 : 15], Segment[34 : 18], Segment[34 : 9], Segment[34 : 16], Segment[34 : 12], Segment[34 : 14], Segment[11 : 34], Segment[34 : 19], Segment[34 : 10], Segment[34 : 13], Segment[34 : 38]]

[ 3-knot c
a 35  s  [Segment[36 : 35], Segment[37 : 35], Segment[34 : 35], Segment[1 : 35], Segment[0 : 35], Segment[2 : 35], Segment[35 : 33], Segment[32 : 35], Segment[26 : 35], Segment[27 : 35], Segment[24 : 35], Segment[25 : 35], Segment[6 : 35], Segment[31 : 35], Segment[7 : 35], Segment[30 : 35], Segment[28 : 35], Segment[35 : 29], Segment[35 : 8], Segment[20 : 35], Segment[35 : 21], Segment[35 : 22], Segment[35 : 18], Segment[15 : 35], Segment[9 : 35], Segment[35 : 16], Segment[12 : 35], Segment[35 : 14], Segment[19 : 35], Segment[11 : 35], Segment[10 : 35], Segment[13 : 35], Segment[35 : 38]]
b 36  s  [Segment[36 : 37], Segment[36 : 35], Segment[34 : 36], Segment[1 : 36], Segment[0 : 36], Segment[36 : 2], Segment[36 : 33], Segment[32 : 36], Segment[26 : 36], Segment[27 : 36], Segment[36 : 24], Segment[36 : 25], Segment[36 : 6], Segment[36 : 31], Segment[36 : 30], Segment[36 : 28], Segment[7 : 36], Segment[36 : 29], Segment[36 : 8], Segment[20 : 36], Segment[36 : 21], Segment[36 : 22], Segment[36 : 18], Segment[36 : 15], Segment[36 : 9], Segment[36 : 16], Segment[12 : 36], Segment[36 : 14], Segment[36 : 19], Segment[11 : 36], Segment[10 : 36], Segment[36 : 13], Segment[36 : 38]]
c 37  s  [Segment[36 : 37], Segment[37 : 35], Segment[34 : 37], Segment[1 : 37], Segment[0 : 37], Segment[2 : 37], Segment[37 : 33], Segment[32 : 37], Segment[26 : 37], Segment[27 : 37], Segment[24 : 37], Segment[25 : 37], Segment[6 : 37], Segment[37 : 31], Segment[28 : 37], Segment[30 : 37], Segment[7 : 37], Segment[37 : 29], Segment[37 : 8], Segment[20 : 37], Segment[37 : 21], Segment[37 : 22], Segment[37 : 18], Segment[15 : 37], Segment[9 : 37], Segment[37 : 16], Segment[12 : 37], Segment[37 : 14], Segment[19 : 37], Segment[11 : 37], Segment[10 : 37], Segment[13 : 37], Segment[37 : 38]]
]

[ 3-knot d
38  s  [Segment[1 : 38], Segment[0 : 38], Segment[20 : 38], Segment[11 : 38], Segment[26 : 38], Segment[34 : 38],...]
0  s  [Segment[0 : 38], Segment[1 : 0], Segment[0 : 34], Segment[0 : 35], Segment[0 : 36], Segment[0 : 37], Segment[0 : 2],...]
1  s  [Segment[1 : 38], Segment[1 : 0], Segment[1 : 34], Segment[1 : 35], Segment[1 : 36], Segment[1 : 37], Segment[1 : 2],...] 
]

2 ep [Segment[2 : 33], Segment[32 : 2], Segment[1 : 2], Segment[0 : 2]]
(where 33 and 32 are in the knot list)

so to solve 3-knot-c our 3 common points are 34, 1, and 0 where 1 and 0 are grouped (by being in another knot).

if we look at the grouped points (1 and 0) in 3-knot-d we need to find a match in them to resolve this knot,

by excluding everything in the knot list and 34 by association to 3-knot-c we get [0 : 2] and [1 : 2] as potential matches

1 : 2 is a match and 2's compliment ( 6 )  has a match to 7
so we know that 3-knot b must want to connect to 3-knot-c and 2, match 1 : 2 resolves the 1 so 0 must connect to 3-knot-c

I think you'd still have to try all 6 permutations to get it right :S, hmm but maybe now 3-knot-d is resolved:

38 ep Segment[0 : 38], ...]
0  s  [Segment[0 : 38], Segment[0 : 34], Segment[0 : 35], Segment[0 : 36], Segment[0 : 37], Segment[0 : 2],...]
since 1 is now an end point we can resolve 1 : 38
                        3ka
[..., 2 , 1, 38] [0] [37 36 35] [34]

34  s  [Segment[34 : 35], Segment[34 : 36], Segment[34 : 37], Segment[0 : 34], Segment[34 : 33] ,...]
[ 3-knot-c
35  s  [Segment[36 : 35], Segment[37 : 35], Segment[34 : 35],  Segment[0 : 35], Segment[2 : 35], Segment[35 : 33], Segment[32 : 35], Segment[26 : 35], Segment[27 : 35], Segment[24 : 35], Segment[25 : 35], Segment[6 : 35], Segment[31 : 35], Segment[7 : 35], Segment[30 : 35], Segment[28 : 35], Segment[35 : 29], Segment[35 : 8], Segment[20 : 35], Segment[35 : 21], Segment[35 : 22], Segment[35 : 18], Segment[15 : 35], Segment[9 : 35], Segment[35 : 16], Segment[12 : 35], Segment[35 : 14], Segment[19 : 35], Segment[11 : 35], Segment[10 : 35], Segment[13 : 35], Segment[35 : 38]]
36  s  [Segment[36 : 37], Segment[36 : 35], Segment[34 : 36],  Segment[0 : 36], Segment[36 : 2], Segment[36 : 33], Segment[32 : 36], Segment[26 : 36], Segment[27 : 36], Segment[36 : 24], Segment[36 : 25], Segment[36 : 6], Segment[36 : 31], Segment[36 : 30], Segment[36 : 28], Segment[7 : 36], Segment[36 : 29], Segment[36 : 8], Segment[20 : 36], Segment[36 : 21], Segment[36 : 22], Segment[36 : 18], Segment[36 : 15], Segment[36 : 9], Segment[36 : 16], Segment[12 : 36], Segment[36 : 14], Segment[36 : 19], Segment[11 : 36], Segment[10 : 36], Segment[36 : 13], Segment[36 : 38]]
37  s  [Segment[36 : 37], Segment[37 : 35], Segment[34 : 37],  Segment[0 : 37], Segment[2 : 37], Segment[37 : 33], Segment[32 : 37], Segment[26 : 37], Segment[27 : 37], Segment[24 : 37], Segment[25 : 37], Segment[6 : 37], Segment[37 : 31], Segment[28 : 37], Segment[30 : 37], Segment[7 : 37], Segment[37 : 29], Segment[37 : 8], Segment[20 : 37], Segment[37 : 21], Segment[37 : 22], Segment[37 : 18], Segment[15 : 37], Segment[9 : 37], Segment[37 : 16], Segment[12 : 37], Segment[37 : 14], Segment[19 : 37], Segment[11 : 37], Segment[10 : 37], Segment[13 : 37], Segment[37 : 38]]
]
0  s  Segment[0 : 34], Segment[0 : 35], Segment[0 : 36], Segment[0 : 37] ,...]

this is actually known-endpoint-tsp now since we have resolved down to 34 and 0 with [35, 36, 37] known to be in the middle
(maybe need to recurse?)


I think that since 34 is not a group we probably could have resolved the knot the whole time on the 34 side (wrong)
[ 3-knot-c
[35 34]  ep  [Segment[36 : 35], Segment[37 : 35], Segment[0 : 35], Segment[2 : 35], Segment[35 : 33], Segment[32 : 35], Segment[26 : 35], Segment[27 : 35], Segment[24 : 35], Segment[25 : 35], Segment[6 : 35], Segment[31 : 35], Segment[7 : 35], Segment[30 : 35], Segment[28 : 35], Segment[35 : 29], Segment[35 : 8], Segment[20 : 35], Segment[35 : 21], Segment[35 : 22], Segment[35 : 18], Segment[15 : 35], Segment[9 : 35], Segment[35 : 16], Segment[12 : 35], Segment[35 : 14], Segment[19 : 35], Segment[11 : 35], Segment[10 : 35], Segment[13 : 35], Segment[35 : 38]]
36  s  [Segment[36 : 37], Segment[36 : 35], Segment[0 : 36], Segment[36 : 2], Segment[36 : 33], Segment[32 : 36], Segment[26 : 36], Segment[27 : 36], Segment[36 : 24], Segment[36 : 25], Segment[36 : 6], Segment[36 : 31], Segment[36 : 30], Segment[36 : 28], Segment[7 : 36], Segment[36 : 29], Segment[36 : 8], Segment[20 : 36], Segment[36 : 21], Segment[36 : 22], Segment[36 : 18], Segment[36 : 15], Segment[36 : 9], Segment[36 : 16], Segment[12 : 36], Segment[36 : 14], Segment[36 : 19], Segment[11 : 36], Segment[10 : 36], Segment[36 : 13], Segment[36 : 38]]
37  s  [Segment[36 : 37], Segment[37 : 35], Segment[0 : 37], Segment[2 : 37], Segment[37 : 33], Segment[32 : 37], Segment[26 : 37], Segment[27 : 37], Segment[24 : 37], Segment[25 : 37], Segment[6 : 37], Segment[37 : 31], Segment[28 : 37], Segment[30 : 37], Segment[7 : 37], Segment[37 : 29], Segment[37 : 8], Segment[20 : 37], Segment[37 : 21], Segment[37 : 22], Segment[37 : 18], Segment[15 : 37], Segment[9 : 37], Segment[37 : 16], Segment[12 : 37], Segment[37 : 14], Segment[19 : 37], Segment[11 : 37], Segment[10 : 37], Segment[13 : 37], Segment[37 : 38]]
]



if you look at the previous example (3knot-a) this also appears to hold true for 30 : 31 (coincidence and not true);

[ 3knot-a
28  s  [Segment[28 : 29], Segment[30 : 28],  Segment[27 : 28], Segment[26 : 28], ...]
29  s  [Segment[28 : 29], Segment[30 : 29],  Segment[27 : 29], Segment[26 : 29], ...]
[30 31]  ep  [Segment[30 : 28], Segment[30 : 29], Segment[27 : 30], Segment[26 : 30], ...]
]

so the algorithm could be find the odd man out (non-grouped) and look for a match then the rest will be resolved natrually
hmm actually I don't think that works e.g. now 30 would match with 28 instead of 29, so I think you need to plan your three matches in advance

once you want to solve a 3 knot you actually need to solve it. 
(cannot leave half-solved otherwise it degenerates into a 2knot and gives incorrect answers)


then you have a 3knot like this one:


[2knot-g
7  s  [Segment[7 : 6], Segment[7 : 8], Segment[7 : 2], Segment[7 : 33], Segment[32 : 7], Segment[1 : 7], Segment[0 : 7], Segment[34 : 7], Segment[7 : 9], Segment[7 : 35], Segment[7 : 36], Segment[7 : 37], Segment[7 : 31], Segment[27 : 7], Segment[26 : 7], Segment[7 : 30], Segment[7 : 28], Segment[7 : 29], Segment[7 : 10], Segment[7 : 25], Segment[7 : 12], Segment[11 : 7], Segment[7 : 24], Segment[7 : 15], Segment[7 : 14], Segment[7 : 13], Segment[7 : 16], Segment[20 : 7], Segment[7 : 21], Segment[7 : 18], Segment[7 : 22], Segment[7 : 19], Segment[7 : 38]]
8  s  [Segment[7 : 8], Segment[6 : 8], Segment[9 : 8], Segment[33 : 8], Segment[32 : 8], Segment[2 : 8], Segment[31 : 8], Segment[1 : 8], Segment[34 : 8], Segment[27 : 8], Segment[35 : 8], Segment[30 : 8], Segment[36 : 8], Segment[0 : 8], Segment[37 : 8], Segment[10 : 8], Segment[26 : 8], Segment[28 : 8], Segment[29 : 8], Segment[12 : 8], Segment[11 : 8], Segment[25 : 8], Segment[24 : 8], Segment[15 : 8], Segment[13 : 8], Segment[14 : 8], Segment[16 : 8], Segment[18 : 8], Segment[20 : 8], Segment[21 : 8], Segment[22 : 8], Segment[19 : 8], Segment[8 : 38]]
]

9  s  [Segment[10 : 9], Segment[9 : 8], Segment[11 : 9], Segment[12 : 9], Segment[7 : 9], Segment[9 : 6], Segment[9 : 33], Segment[32 : 9], Segment[9 : 31], Segment[2 : 9], Segment[30 : 9], Segment[28 : 9], Segment[27 : 9], Segment[9 : 29], Segment[9 : 13], Segment[26 : 9], Segment[34 : 9], Segment[1 : 9], Segment[9 : 35], Segment[36 : 9], Segment[9 : 37], Segment[0 : 9], Segment[9 : 14], Segment[15 : 9], Segment[25 : 9], Segment[9 : 16], Segment[24 : 9], Segment[9 : 18], Segment[20 : 9], Segment[9 : 21], Segment[9 : 22], Segment[9 : 19], Segment[9 : 38]]
10  s  [Segment[10 : 9], Segment[11 : 10], Segment[12 : 10], Segment[10 : 8], Segment[10 : 13], Segment[7 : 10], Segment[10 : 6], Segment[10 : 31], Segment[32 : 10], Segment[10 : 33], Segment[10 : 30], Segment[10 : 2], Segment[10 : 28], Segment[10 : 29], Segment[27 : 10], Segment[10 : 14], Segment[26 : 10], Segment[34 : 10], Segment[1 : 10], Segment[10 : 35], Segment[10 : 36], Segment[10 : 37], Segment[10 : 15], Segment[0 : 10], Segment[10 : 16], Segment[10 : 25], Segment[10 : 24], Segment[10 : 18], Segment[20 : 10], Segment[10 : 21], Segment[10 : 22], Segment[10 : 19], Segment[10 : 38]]

[ 3knot-e
11  s  [Segment[11 : 12], Segment[11 : 13], Segment[11 : 10], Segment[11 : 9], Segment[11 : 14], Segment[11 : 31], Segment[11 : 30], Segment[11 : 8], Segment[11 : 28], Segment[11 : 29], Segment[11 : 32], Segment[11 : 33], Segment[11 : 27], Segment[11 : 15], Segment[11 : 7], Segment[11 : 26], Segment[11 : 6], Segment[11 : 16], Segment[11 : 2], Segment[11 : 34], Segment[11 : 36], Segment[11 : 35], Segment[11 : 37], Segment[11 : 25], Segment[1 : 11], Segment[0 : 11], Segment[11 : 18], Segment[11 : 24], Segment[20 : 11], Segment[11 : 21], Segment[11 : 19], Segment[11 : 22], Segment[11 : 38]]
12  s  [Segment[11 : 12], Segment[12 : 13], Segment[12 : 9], Segment[12 : 10], Segment[12 : 14], Segment[12 : 30], Segment[12 : 31], Segment[12 : 28], Segment[12 : 29], Segment[12 : 8], Segment[32 : 12], Segment[12 : 15], Segment[27 : 12], Segment[12 : 33], Segment[26 : 12], Segment[12 : 16], Segment[7 : 12], Segment[12 : 6], Segment[12 : 2], Segment[12 : 25], Segment[34 : 12], Segment[12 : 36], Segment[12 : 35], Segment[12 : 37], Segment[1 : 12], Segment[0 : 12], Segment[12 : 18], Segment[12 : 24], Segment[20 : 12], Segment[12 : 21], Segment[12 : 19], Segment[12 : 22], Segment[12 : 38]]
13  s  [Segment[12 : 13], Segment[11 : 13], Segment[13 : 14], Segment[10 : 13], Segment[15 : 13], Segment[9 : 13], Segment[30 : 13], Segment[13 : 29], Segment[13 : 16], Segment[28 : 13], Segment[13 : 31], Segment[27 : 13], Segment[32 : 13], Segment[13 : 8], Segment[13 : 33], Segment[26 : 13], Segment[2 : 13], Segment[7 : 13], Segment[25 : 13], Segment[6 : 13], Segment[13 : 18], Segment[34 : 13], Segment[36 : 13], Segment[13 : 37], Segment[13 : 35], Segment[1 : 13], Segment[0 : 13], Segment[20 : 13], Segment[19 : 13], Segment[24 : 13], Segment[13 : 21], Segment[13 : 22], Segment[13 : 38]]
]

[2-knot-f
14  s  [Segment[15 : 14], Segment[16 : 14], Segment[13 : 14], Segment[29 : 14], Segment[28 : 14], Segment[30 : 14], Segment[12 : 14], Segment[31 : 14], Segment[11 : 14], Segment[27 : 14], Segment[26 : 14], Segment[14 : 18], Segment[25 : 14], Segment[32 : 14], Segment[33 : 14], Segment[9 : 14], Segment[19 : 14], Segment[20 : 14], Segment[2 : 14], Segment[14 : 21], Segment[14 : 8], Segment[37 : 14], Segment[10 : 14], Segment[36 : 14], Segment[34 : 14], Segment[35 : 14], Segment[24 : 14], Segment[6 : 14], Segment[1 : 14], Segment[7 : 14], Segment[22 : 14], Segment[0 : 14], Segment[14 : 38]]
15  s  [Segment[15 : 16], Segment[15 : 14], Segment[15 : 29], Segment[15 : 28], Segment[15 : 30], Segment[15 : 18], Segment[15 : 31], Segment[27 : 15], Segment[26 : 15], Segment[15 : 25], Segment[15 : 19], Segment[20 : 15], Segment[32 : 15], Segment[12 : 15], Segment[15 : 21], Segment[15 : 33], Segment[15 : 13], Segment[11 : 15], Segment[15 : 24], Segment[15 : 37], Segment[36 : 15], Segment[34 : 15], Segment[15 : 35], Segment[15 : 22], Segment[15 : 2], Segment[1 : 15], Segment[15 : 8], Segment[0 : 15], Segment[15 : 9], Segment[15 : 6], Segment[7 : 15], Segment[10 : 15], Segment[15 : 38]]
]


10 11 12 13 14
10 12 11 13 14
10 13 12 11 14
there are actually only 3 permuations the rest are mirrors of each other

so once we find the odd man out, we can assume that the two are endpoints and check the length of all permutations

this one seems simple cause in the firsst non-knot colum in 3knot-e we have Segment[11 : 10] and Segment[13 : 14] 
which should be matches, but how do we know thats a good idea?

we sort of know that group [9 10] wants to connect to [11 12 13] and [14] wants to as well, would these be our three? 
its def not as strong of a connection as in the other cases
so in this example the relevant question should be, who is going to connect to 8,... 9 or 10?
and then how do we figure that out
or do we need to wait for something else to happen on the sides like 2knot-f being resolved? or 9 being connected to 8 in 2knot-g?

steps to resolve a three knot:
  1. figure out what your three points are outside the knot hereafter refered to a, b and c
      (Note: the knot would not exist if there were not 3 points at least vying for attention)
      (Note: if you had only one point interested that is a 2knot and two points is a string, 4 points and you messed up somewhere before or can disolve into to 2knots?)
  2. find the two grouped points wolg [a b] should want to match together but can't
  3. find the connection in their group  that matches somewhere else (exclude all points in 3knot and in group)
      (you also may need to exclude the "point in common" g* if the match leads to a 2 knot)
      check that its match has a match otherwise quit for now
  4. lets say b had the outside connection, and is matching store its match points a and c are now the endpoints of the 3knot
  5. check all permutations with a and c as endpoints (3 possibilities)
  [a 1 2 3 c]
  [a 2 1 3 c]
  [a 3 2 1 c]
  
  I might be over complicating this, since we know we can wittle down to 6 permutations it should be constant time as long as we can always get there

  I believe this is the same problem we have when we get down to 3 shells total since there are 6 permutations and one way to find out unless they align in a string

maybe if we assume that the front match is correct that will help?

In order to be able to solve a k - knot, you can look at a maximum of k-1 groups

example 1:

3knot-g [ 1 2 3] has possible connections to 4 5 and 6
if 4 and 5 or 5 and 6 are grouped ( want to match or are in a knot together) then we can include 6 in the search
if its just 5 (or 4) is not grouped to either then only include 4 and 5

example 2:

3knot-h [ 1 2 3] has possible connections to 4 5 6 and 7 
we can only look at 7 if 2 groups exist

example 3:

2knot-j [ 1 2 ] has possible connections to 3 and 4
if 3 and 4 are grouped we can look at both of them otherwise look at 3.

I think that this is actually wrong and it is always two groups to resolve any k-knot

"its like i'm seeing the matrix for the first time"



The question might be asked why 2knots and 3knots? aren't there bigger knots than that? 
Well let's reexamine the goal of all of this. We want to form a n-knot where n is the size of the graph
and to do we want to resolve any knots that exist in the underlying n-knot
if we think of the bucket as a series of k-knots where k<n and non-specific k, then the 2-knots and 3-knots 
might be the boundaries between those k-knots (where the knots touch and should intersect)
so resolving a 2-knot or 3-knot results in a (k + j)-knot where k and j are the size of the two touching knots
if we repeat this pattern for all knots in the system, then we can slowly add them together till we get our n-knot


TODO we need to also make sure that the prospects would like to connect to the knot e.g.

16  ep  [Segment[16 : 15],  Segment[16 : 14], Segment[16 : 18], Segment[16 : 29], Segment[16 : 28], Segment[16 : 30], Segment[16 : 19], Segment[16 : 31], Segment[16 : 27], Segment[16 : 25], Segment[16 : 26], Segment[16 : 20], Segment[16 : 21], Segment[16 : 13], Segment[16 : 12], Segment[16 : 32], Segment[16 : 33], Segment[16 : 22], Segment[16 : 24], Segment[16 : 23], Segment[16 : 11], Segment[37 : 16], Segment[36 : 16], Segment[16 : 35], Segment[16 : 34], Segment[16 : 3], Segment[16 : 2], Segment[16 : 5], Segment[16 : 4], Segment[16 : 1], Segment[16 : 0], Segment[8 : 16], Segment[16 : 9], Segment[16 : 6], Segment[16 : 7], Segment[16 : 10], Segment[16 : 38]]
17  ep  [Segment[17 : 18],  Segment[15 : 17], Segment[17 : 19], Segment[20 : 17], Segment[21 : 17], Segment[25 : 17], Segment[17 : 29], Segment[28 : 17], Segment[17 : 14], Segment[30 : 17], Segment[26 : 17], Segment[22 : 17], Segment[27 : 17], Segment[23 : 17], Segment[17 : 31], Segment[24 : 17], Segment[32 : 17], Segment[33 : 17], Segment[37 : 17], Segment[36 : 17], Segment[35 : 17], Segment[34 : 17], Segment[17 : 2], Segment[3 : 17], Segment[17 : 1], Segment[12 : 17], Segment[0 : 17], Segment[17 : 5], Segment[17 : 4], Segment[13 : 17], Segment[17 : 11], Segment[6 : 17], Segment[8 : 17], Segment[17 : 7], Segment[9 : 17], Segment[10 : 17], Segment[17 : 38]]
18  s  [Segment[17 : 18], Segment[18 : 19], Segment[20 : 18], Segment[21 : 18], Segment[22 : 18], Segment[25 : 18], Segment[16 : 18], Segment[23 : 18], Segment[15 : 18], Segment[24 : 18], Segment[29 : 18], Segment[26 : 18], Segment[28 : 18], Segment[27 : 18], Segment[30 : 18], Segment[31 : 18], Segment[18 : 14], Segment[37 : 18], Segment[36 : 18], Segment[35 : 18], Segment[34 : 18], Segment[32 : 18], Segment[33 : 18], Segment[18 : 1], Segment[2 : 18], Segment[3 : 18], Segment[0 : 18], Segment[4 : 18], Segment[5 : 18], Segment[12 : 18], Segment[6 : 18], Segment[13 : 18], Segment[8 : 18], Segment[7 : 18], Segment[18 : 11], Segment[9 : 18], Segment[10 : 18], Segment[18 : 38]]
19  s  [Segment[18 : 19], Segment[20 : 19], Segment[21 : 19], Segment[17 : 19], Segment[22 : 19], Segment[23 : 19], Segment[16 : 19], Segment[25 : 19], Segment[15 : 19], Segment[24 : 19], Segment[29 : 19], Segment[26 : 19], Segment[28 : 19], Segment[27 : 19], Segment[30 : 19], Segment[19 : 14], Segment[31 : 19], Segment[37 : 19], Segment[36 : 19], Segment[35 : 19], Segment[34 : 19], Segment[32 : 19], Segment[33 : 19], Segment[19 : 1], Segment[0 : 19], Segment[2 : 19], Segment[3 : 19], Segment[4 : 19], Segment[5 : 19], Segment[12 : 19], Segment[6 : 19], Segment[13 : 19], Segment[8 : 19], Segment[7 : 19], Segment[19 : 11], Segment[9 : 19], Segment[10 : 19], Segment[19 : 38]]
[
20  s  [Segment[20 : 21], Segment[20 : 22], Segment[20 : 23], Segment[20 : 18], Segment[20 : 19], Segment[20 : 25], Segment[20 : 24], Segment[20 : 17], Segment[26 : 20], Segment[20 : 27], Segment[20 : 15], Segment[20 : 29], Segment[20 : 28], Segment[16 : 20], Segment[37 : 20], Segment[36 : 20], Segment[20 : 35], Segment[20 : 30], Segment[20 : 34], Segment[20 : 31], Segment[20 : 1], Segment[20 : 32], Segment[20 : 0], Segment[20 : 33], Segment[20 : 2], Segment[20 : 3], Segment[20 : 14], Segment[20 : 4], Segment[20 : 5], Segment[20 : 6], Segment[20 : 7], Segment[8 : 20], Segment[20 : 12], Segment[20 : 11], Segment[13 : 20], Segment[20 : 9], Segment[20 : 10], Segment[20 : 38]]
21  s  [Segment[20 : 21], Segment[22 : 21], Segment[23 : 21], Segment[21 : 18], Segment[21 : 19], Segment[24 : 21], Segment[25 : 21], Segment[21 : 17], Segment[26 : 21], Segment[21 : 27], Segment[21 : 29], Segment[21 : 15], Segment[21 : 28], Segment[16 : 21], Segment[37 : 21], Segment[36 : 21], Segment[35 : 21], Segment[21 : 34], Segment[21 : 30], Segment[21 : 31], Segment[21 : 1], Segment[0 : 21], Segment[32 : 21], Segment[33 : 21], Segment[21 : 2], Segment[3 : 21], Segment[21 : 14], Segment[21 : 4], Segment[21 : 5], Segment[21 : 6], Segment[21 : 7], Segment[8 : 21], Segment[21 : 12], Segment[21 : 11], Segment[9 : 21], Segment[13 : 21], Segment[21 : 10], Segment[21 : 38]]
]
22  s  [Segment[22 : 23], Segment[22 : 21], Segment[20 : 22], Segment[24 : 22], Segment[22 : 18], Segment[22 : 19], Segment[22 : 25], Segment[22 : 17], Segment[26 : 22], Segment[37 : 22], Segment[36 : 22], Segment[22 : 27], Segment[22 : 35], Segment[22 : 34], Segment[22 : 29], Segment[22 : 28], Segment[22 : 15], Segment[16 : 22], Segment[22 : 1], Segment[22 : 30], Segment[0 : 22], Segment[22 : 31], Segment[32 : 22], Segment[22 : 33], Segment[22 : 2], Segment[22 : 3], Segment[22 : 4], Segment[22 : 14], Segment[22 : 5], Segment[22 : 6], Segment[22 : 7], Segment[8 : 22], Segment[22 : 12], Segment[22 : 11], Segment[9 : 22], Segment[13 : 22], Segment[22 : 10], Segment[22 : 38]]
23  s  [Segment[22 : 23], Segment[23 : 21], Segment[20 : 23], Segment[24 : 23], Segment[25 : 23], Segment[23 : 18], Segment[23 : 19], Segment[23 : 17], Segment[26 : 23], Segment[37 : 23], Segment[36 : 23], Segment[35 : 23], Segment[23 : 34], Segment[23 : 27], Segment[23 : 1], Segment[23 : 29], Segment[23 : 28], Segment[0 : 23], Segment[23 : 30], Segment[23 : 15], Segment[23 : 31], Segment[32 : 23], Segment[16 : 23], Segment[33 : 23], Segment[23 : 2], Segment[23 : 3], Segment[23 : 4], Segment[23 : 5], Segment[23 : 6], Segment[23 : 14], Segment[23 : 7], Segment[8 : 23], Segment[23 : 12], Segment[9 : 23], Segment[23 : 11], Segment[13 : 23], Segment[23 : 10], Segment[23 : 38]]

calculated prospects: [22, 23, 16, 17, 18]

actual prospects that want to connect: [22, 23, 19]


I am stuck because :

4 ep [Segment[4 : 3], Segment[4 : 6], Segment[4 : 2], Segment[4 : 7], Segment[4 : 33], Segment[4 : 32], Segment[4 : 8], Segment[4 : 1], Segment[4 : 34], Segment[4 : 35], Segment[4 : 0], Segment[36 : 4], Segment[37 : 4], Segment[4 : 31], Segment[4 : 27], Segment[4 : 26], Segment[4 : 9], Segment[4 : 12], Segment[4 : 11], Segment[4 : 10], Segment[4 : 15], Segment[4 : 14], Segment[4 : 16], Segment[4 : 13], Segment[4 : 38]]
5 ep [Segment[5 : 6], Segment[7 : 5], Segment[3 : 5], Segment[2 : 5], Segment[8 : 5], Segment[33 : 5], Segment[32 : 5], Segment[5 : 1], Segment[34 : 5], Segment[5 : 35], Segment[36 : 5], Segment[37 : 5], Segment[31 : 5], Segment[5 : 0], Segment[27 : 5], Segment[5 : 26], Segment[9 : 5], Segment[12 : 5], Segment[10 : 5], Segment[11 : 5], Segment[15 : 5], Segment[14 : 5], Segment[16 : 5], Segment[13 : 5], Segment[5 : 38]]
6  s  [Segment[7 : 6], Segment[4 : 6], Segment[5 : 6], Segment[8 : 6], Segment[3 : 6], Segment[2 : 6], Segment[33 : 6], Segment[32 : 6], Segment[1 : 6], Segment[0 : 6], Segment[34 : 6], Segment[35 : 6], Segment[36 : 6], Segment[37 : 6], Segment[31 : 6], Segment[9 : 6], Segment[27 : 6], Segment[6 : 26], Segment[10 : 6], Segment[12 : 6], Segment[11 : 6], Segment[15 : 6], Segment[14 : 6], Segment[13 : 6], Segment[16 : 6], Segment[6 : 38]]
7  s  [Segment[7 : 6], Segment[7 : 5], Segment[7 : 8], Segment[4 : 7], Segment[7 : 3], Segment[7 : 2], Segment[7 : 33], Segment[7 : 32], Segment[7 : 1], Segment[7 : 0], Segment[7 : 34], Segment[7 : 9], Segment[7 : 35], Segment[36 : 7], Segment[37 : 7], Segment[7 : 31], Segment[7 : 27], Segment[7 : 26], Segment[7 : 10], Segment[7 : 12], Segment[11 : 7], Segment[7 : 15], Segment[7 : 14], Segment[7 : 13], Segment[7 : 16], Segment[7 : 38]]
8  s  [Segment[7 : 8], Segment[8 : 5], Segment[8 : 6], Segment[4 : 8], Segment[8 : 9], Segment[33 : 8], Segment[3 : 8], Segment[8 : 32], Segment[2 : 8], Segment[8 : 31], Segment[8 : 1], Segment[8 : 34], Segment[8 : 27], Segment[8 : 35], Segment[36 : 8], Segment[8 : 0], Segment[37 : 8], Segment[10 : 8], Segment[8 : 26], Segment[8 : 12], Segment[11 : 8], Segment[8 : 15], Segment[13 : 8], Segment[8 : 14], Segment[8 : 16], Segment[8 : 38]]


in this example 6 and 7 should be a knot since they both point to the same object (shell 4-5)

if you look at the match list 8 is noot on there so we need o check all potential matches not just actual current matches

matchList: [Segment[0 : 1], Segment[2 : 3], Segment[3 : 4], Segment[6 : 7], Segment[9 : 10], Segment[11 : 12], Segment[11 : 13], Segment[13 : 12], Segment[15 : 14], Segment[15 : 16], Segment[27 : 26], Segment[33 : 32], Segment[36 : 38], Segment[37 : 36], Segment[37 : 38]] exclude list: [33, 32]




knotPoint1: 8 external1: 3
knotPoint2: 5 external2: 10
cutPointA: 4 cutPointB: 6
smallestCommonKnotId: 53
smallestKnotIdA: 39
smallestKnotIdB: 53
flatKnots: {50=Knot[25 23 24 26 ], 51=Knot[1 0 26 25 24 23 ], 36=Knot[23 24 25 ], 52=Knot[10 2 3 9 ], 37=Knot[9 2 3 ], 53=Knot[8 4 5 6 7 ], 39=Knot[4 8 5 ]}
smallestCommonKnot: Knot[8 4 5 6 7 ]
smallestKnotA: Knot[4 8 5 ] match1: 6 match1endpoint: 6 basepoint1: 5 match2: 7 match2endpoint: 7 basepoint2: 8
smallestKnotB: Knot[8 4 5 6 7 ] match1: 3 match1endpoint: 3 basepoint1: 4 match2: 10 match2endpoint: 10 basepoint2: 8