Objects:

abstract class VirtualPoint{
    int numMatches;
    Segment match1;
    Segment match2;
    int id;
    boolean isKnot;
    Knot group;
    VirtualPoint getPointer(int idx);
}

class Segment{
    VirtualPoint p1;
    VirtualPoint p2;
    double distance;
    VirtualPoint getOther(VirtualPoint p){
        if(p.equals(p1)){
            return p2;
        }
        if(p.equals(p2)){
            return p1;
        }
        return null;
    }
    VirtualPoint getKnotPoint(ArrayList<VirtualPoint> knotPointsFlattened){
        if(knotPointsFlattened.contains(p1)){
            return p1;
        }
        if(knotPointsFlattened.contains(p2)){
            return p2;
        }
        return null;
    }
}

class Point implements VirtualPoint {
    List sortedSegments = ArrayList<Segment>[s1, s2, s3, ... , sn-1]; // sorted
    isKnot = false;
    public Point(){
        int numPoints = pointMap.size();
        this.id = numPoints;
        pointMap.add(id, this);
        unvisited.add(this);
    }
    VirtualPoint getPointer(int idx){
        ArrayList<VirtualPoint> seenGroups = new ArrayList<VirtualPoint>();
        for(int i = 0; i < sortedSegments.size(); i++){
            Segment s = sortedSegments.get(i);
            VirtualPoint basePoint = s.getOther(this);
            VirtualPoint vp = basePoint;
            if(vp.group != null){
                vp = vp.group;
            }
            if(vp.numMatches != 2 && !seenGroups.contains(vp)){
                idx--;
                if(idx == 0){
                    return vp;
                }
                seenGroups.add(vp);
            }
        }
    }
}

class Knot implements VirtualPoint = struct{
    int size;
    isKnot = true;
    VirtualPoint match1endpoint;
    VirtualPoint match2endpoint;
    ArrayList<VirtualPoint> knotPoints; //[ vp1, vp2, ... vpm];
    ArrayList<VirtualPoint> knotPointsFlattened;
    Set<Segment> internalKnotSegments; //[s1,s2,...,sm]
    ArrayList<Segment> externalKnotSegments; //[[s1, ..., sn-1], [s1, ..., sn-1], ... m]; sorted and remove vp1, vp2, ... vpm
    public Knot(ArrayList<VirtualPoint> knotPoints){
        this.knotPoints = knotPoints;
        size = knotPoints.size();
        knotPointsFlattened = new ArrayList<VirtualPoint>();
        for(VirtualPoint vp: knotPoints){
            if(vp.isKnot){
                knotPointsFlattened.addAll(((Knot)vp).knotPointsFlattened);
            }else{
                knotPointsFlattened.add(vp);
            }
        }
        int numPoints = pointMap.size();

        //get the segments that form the knot
        boolean odd = true;
        internalKnotSegments = new Set<Segment>();
        for(VirtualPoint vp : knotPoints){
            if(odd){
                internalKnotSegments.add(new Segment(vp, vp.match1));
            }else{
                internalKnotSegments.add(new Segment(vp, vp.match2));
            }
            odd = !odd;
        }

        //store the segment lists of each point contained in the knot, recursive
        externalKnotSegments = new ArrayList<Segment>();
        for(VirtualPoint vp : knotPoints){
            if(vp.isKnot){
                ArrayList<Segment> segments = new ArrayList<Segment>()
                ArrayList<Segment> vpExternal = ((Knot)vp).externalKnotSegments;
                for(Segment s : vpExternal){
                    if(!(knotPointsFlattened.contains(s.first) && knotPointsFlattened.contains(last))){
                        externalKnotSegments.add(s);
                    }
                }
            }else{
                if(!(knotPointsFlattened.contains(s.first) && knotPointsFlattened.contains(last))){
                    externalKnotSegments.add(s);
                }
            }
            vp.group = this;
        }
        externalKnotSegments.qsort();

        this.id = numPoints;
        pointMap.add(id, this);
        unvisited.add(this);
    }
    VirtualPoint getPointer(int idx){
        ArrayList<VirtualPoint> seenGroups = new ArrayList<VirtualPoint>();
        for(int i = 0; i < externalKnotSegments.size(); i++){
            Segment s = externalKnotSegments.get(i);
            VirtualPoint knotPoint = s.getKnotPoint(knotPointsFlattened);
            VirtualPoint basePoint = s.getOther(knotPoint);
            VirtualPoint vp = basePoint;
            if(vp.group != null){
                vp = vp.group;
            }
            if(vp.numMatches != 2 && !seenGroups.contains(vp)){
                idx--;
                if(idx == 0){
                    return vp;
                }
                seenGroups.add(vp);
                seenGroups.add(knotPoint);
            }
        }
    }

}


global Map pointMap = HashMap[int ,//id 
VirtualPoint];//point

global List<VirtualPoint> visited;
global List<VirtualPoint> unvisited;

TSPSolve(Double[][] distanceMatrix){
    int numPoints = distanceMatrix.size();
    //create all of the points
    for(int i = 0; i < numPoints; i++){
        Point p = new Point();
    }
    //create and sort the segment lists
    for(int i = 0; i < numPoints; i++){
        Point p1 = pointMap.get(i);
        for(int j = 0; j < numPoints; j++){
            if(i!=j){
                Point p2 = pointMap.get(j);
                Segment s = new Segment(pointMap.get(i), pointMap.get(j), distanceMatrix[i][j]);
                p1.sortedSegments.add(s);
                p2.sortedSegments.add(s);
            }
        }
        p1.sortedSegments.qsort();
    }
    Knot k;
    while(unvisited.size() > 1){
        VirtualPoint p = unvisited.get(0);
        Pair<Knot, List<VirtualPoint>> pair = createKnots(p, p, p);
        k = pair.first;
    }
    //move on to the cutting phase
    for(VirtualPoint vp : k.internalKnotSegments){
        if(vp.isKnot){
            ((Knot)vp).cut();
        }
    }

}

Pair<Knot, List<VirtualPoint>> createKnots(VirtualPoint startPoint, VirtualPoint loopPoint, VirtualPoint checkPoint){
    ArrayList<VirtualPoint> runList = new ArrayList();
    runList.add(startPoint);
    System.out.println("startPoint: " + startPoint.id);
    System.out.println("runList: " + runList);
    VirtualPoint mainPoint = startPoint;
    while(loopPoint.numMatches < 2){
        VirtualPoint pointer1 = mainPoint.getPointer(1);
        VirtualPoint pointer11 = pointer1.getPointer(1);
        VirtualPoint pointer12 = pointer1.getPointer(2); 
        VirtualPoint pointer2 = mainPoint.getPointer(2);
        VirtualPoint pointer21 = pointer2.getPointer(1);
        VirtualPoint pointer22 = pointer2.getPointer(2);  
        VirtualPoint matchPoint;
        if((mainPoint.equals(pointer11) || mainPoint.equals(pointer12)) && (mainPoint.numMatches == 0 || !mainPoint.match1.equals(pointer1))){
            matchPoint = pointer1;
        }
        else if((mainPoint.equals(pointer21) || mainPoint.equals(pointer22)) && (mainPoint.numMatches == 0 || !mainPoint.match1.equals(pointer2))){
            matchPoint = pointer2;
        }
        if(matchPoint !=null){
            if(mainPoint.numMatches == 0){
                mainPoint.match1 = matchPoint;
            }else{
                mainPoint.match2 = matchPoint;
            }
            if(matchPoint.numMatches == 0){
                matchPoint.match1 = mainPoint;
            }else{
                matchPoint.match2 = mainPoint;
            }
            mainPoint.numMatches++;
            matchPoint.numMatches++;
            runList.add(matchPoint);
            boolean mainIsFull= false;
            boolean matchIsFull= false;
            if(mainPoint.numMatches == 2){
                unvisited.remove(mainPoint);
                visited.add(mainPoint);
                mainIsFull = true;
            }
            if(matchPoint.numMatches == 2){
                unvisited.remove(mainPoint);
                visited.add(mainPoint);
                matchIsFull = true;
                if(matchPoint.equals(loopPoint) && mainIsFull){
                    //Knot Found
                    Knot k = new Knot(runList);
                    unvisited.add(k);
                    return new Pair<Knot, List<VirtualPoint>>(k, null);
                }
            }
            if(loopPoint.numMatches == 2){
                VirtualPoint checkPointer = startPoint.getPointer(2);
                if(checkPoint.equals(checkPointer)){
                    return new Pair<Knot, List<VirtualPoint>>(null, runList);
                }
                loopPoint = checkPointer;
                //We need to append the runlist or continue with a new loopPoint
            }
            mainPoint = matchPoint;
        } else{
            //possible dead end, recurse
            Pair<Knot, List<VirtualPoint>> pair;
            if(mainPoint.numMatches == 1){
                if(!mainPoint.match1.equals(pointer1)){
                    if(pointer1.numMatches == 1){
                        if(!pointer1.match1.equals(pointer11)){
                            createKnots(pointer1, pointer11, mainPoint);
                        }
                        else{
                            createKnots(pointer1, pointer12, mainPoint);
                        }
                    }else{
                        createKnots(pointer1, pointer12, mainPoint);
                    }
                }
                else if(!mainPoint.match1.equals(pointer2)){
                    if(pointer2.numMatches == 1){
                        if(!pointer2.match1.equals(pointer21)){
                            createKnots(pointer2, pointer21, mainPoint);
                        }
                        else{
                            createKnots(pointer2, pointer22, mainPoint);
                        }
                    }else{
                        createKnots(pointer2, pointer22, mainPoint);
                    }
                }
            }
            else{
                if(pointer1.numMatches == 1){
                    if(!pointer1.match1.equals(pointer11)){
                        createKnots(pointer1, pointer11, mainPoint);
                    }
                    else{
                        createKnots(pointer1, pointer12, mainPoint);
                    }
                }else{
                    createKnots(pointer1, pointer12, mainPoint);
                }
            }


            if(pair.second != null){
                runList.append(pair.second);
                mainPoint = runList.get(runList.size()-1);
            }
        }
    }
    return new Pair<Knot, List<VirtualPoint>>(null, runList);
}


/*
we know we have a knot when we loop back to the beginning or any subset (whole set excluded) has an even number of matches

so we start with the first point in the list and follow its matches till we dead end or loop back.

we need to keep track of all of the points we visited in total so we don't miss any as well as the points in the current run/knot.

to get match1:
    1. get the first segment from our list of segments [s1]
    2. get the other point it points to [other] 
    3. get the first two segments in other's list that don't already have two matches
    4. if one of them points back to us set match1 and set numMatches to 1;
    5. if not check what the other's segments matches are recursively and see if its a dead end

    example:

    we start with point 0
    runList = [0]
    visited = []
    first segment points to 1;
    check 1's first 2 segments Segment[1 : 0], Segment[34 : 1]
    1 points back so we set  Point 0: match1 = Point 1 numMatches = 1 and visa versa;

    next we move to point 1  
        runList = [0,1]
    visited = []
    point 1 next points to 34

    34 doesn't point back 
    dead end? not so fast

    34 points to 35 and 36 niether of which point back

    dead end? not so fast

    35 points to 36 which points back so set Point 35 match 1 to Point 36 (and visa versa) and numMatches to 1 for both;
    runList = [35]
    visited = []
    move to point 36;
    36 points to 37 which points back so set Point 36 match 2 to Point 37 and num matches to 2 for Point 36 put  Point 36 in the visited list
                                         set Point 37 match 1 to Point 36 and num matches to 1 for Point 37
    move to point 37;
    runList = [35, 36]
    visited = [36]
    37 points to 35 which points back to set Point 35 match 2 to Point 37 and num matches to 2 for both (KNOT FOUND!) put Point 35 and Point 37 in the visited list
    
    runList = [35, 36, 37]
    visited = [36, 35, 37]
    Make a knot consisting of 35, 36 and 37 (using the run list)
    back up one layer to 34
    replace all segments with 35, 36 and 37 with the new knot 

    34's segments should look like this now [Segment[34:Knot[35,36,37]], Segment[34:1], Segment[34:0]]
    ok so now 34 points back to 1
    so set Point 34 match1 to Point 1 and numMatches to 1 and set Point 1 match2 to Point 34 and set numMatches to 2, add point 1 to visited
    
    now 34 is our main point
    runList = [0, 1,]
    visited = [36, 35, 37, 1]
    34 points to Knot[35,36,37] at 35 and the knot points back (not sure how to figure this out, but it should exclude any of the point in the knot and then each point exposes its best point that only has one match)
    so set Point 34 match2 to Knot[35,36,37] and numMatches to 2 add Point 34 to visited
    set Knot[35,36,37] match1 to Point 34 and numMatches to 1
    runList = [0, 1, 34]
    visited = [36, 35, 37, 1, 34]

    our main point is now Knot[35,36,37]
    its pointing to Point 0 and Point 0 points back  at 35 ( still not sure exactly how this should be determined)
    set Knot[35,36,37] match 2 to Point 0 and visa versa increase num matches for both to 2 and add both to visited(KNOT FOUND!)
    runList = [0, 1, 34, Knot[35, 36, 37]]
    visited = [36, 35, 37, 1, 34, 0, Knot[35,36,37]]
    constuct knot from run List and replace segments with new knot
    Knot[0, 1, 34, Knot[35,36,37]]
    ok now we are at the base layer so find the next segment not in visited (2)

    2 points to 3 and it points back so set both match 1's to each other and set num matches to 1
    run list = [2, 3]
    visited = [36, 35, 37, 1, 34]
    3 is now our main point 

    3 points to 4 and it points back so set 3 match 1 to 4 and num matches to 2 (add to visited) and set 4 match 1 to 3 and num matches to 1
    run list = [2, 3, 4]
    visited = [36, 35, 37, 1, 34, 3]
    4 is now our main point;

    4 points to 5 and 5 points back  so add Point 4 match 2 = Point 5 and numMatches = 2 Point 5 match 1 = Point 4 and numMatches = 1 add Point 4 to visited
    run list = [2, 3, 4, 5]
    visited = [36, 35, 37, 1, 34, 3, 4]
    5 is now our main point;

    5 points to 6 and 6 points back (since 4 has 2 matches/ is in visited) so
    add Point 5 match 2 = Point 6 and numMatches = 2  and Point 6 match 1 = Point 5 and numMatches = 1 add Point 5 to visited
    run list = [2, 3, 4, 5, 6]
    visited = [36, 35, 37, 1, 34, 3, 4, 5]
    6 is now our main point;

    6 points to 7 and 7 points back 
    add Point 6 match 2 = Point 7 and numMatches = 2  and Point 7 match 1 = Point 6 and numMatches = 1 add Point 6 to visited
    run list = [2, 3, 4, 5, 6, 7]
    visited = [36, 35, 37, 1, 34, 3, 4, 5, 6]
    7 is now our main point;

    7 points to 8 and 8 points back (since 5 is in visited)
    add Point 7 match 2 = Point 8 and numMatches = 2  and Point 8 match 1 = Point 7 and numMatches = 1 add Point 7 to visited
    run list = [2, 3, 4, 5, 6, 7, 8]
    visited = [36, 35, 37, 1, 34, 3, 4, 5, 6, 7]
    8 is now our main point;

    8 points to 9 and 9 points back (since 5, 6, and 4 are all in visited)
    add Point 8 match 2 = Point 9 and numMatches = 2  and Point 9 match 1 = Point 8 and numMatches = 1 add Point 8 to visited
    run list = [2, 3, 4, 5, 6, 7, 8, 9]
    visited = [36, 35, 37, 1, 34, 3, 4, 5, 6, 7, 8]
    9 is now our main point;

    9 points to 10 and 10 points back 
    add Point 9 match 2 = Point 10 and numMatches = 2  and Point 10 match 1 = Point 9 and numMatches = 1 add Point 9 to visited
    run list = [2, 3, 4, 5, 6, 7, 8, 9, 10]
    visited = [36, 35, 37, 1, 34, 3, 4, 5, 6, 7, 8, 9]
    10 is now our main point;

    10 points to 11 and 11 doesn't point back
    dead end? not so fast.
    go down a layer:
        11 points to 12 and 12 points back add each other as match one and set numMatches to 1
        run list = [11, 12]
        visited = [36, 35, 37, 1, 34, 3, 4, 5, 6, 7, 8, 9]
        12 is now our main point

        12 points to 13 and 13 points back 
        add Point 12 match 2 = Point 13 and numMatches = 2  and Point 13 match 1 = Point 12 and numMatches = 1 add Point 12 to visited
        run list = [11, 12, 13]
        visited = [36, 35, 37, 1, 34, 3, 4, 5, 6, 7, 8, 9, 12]
        13 is now our main point;

        13 points to 11 and 11 points back 
        add Point 13 match 2 = Point 11 and numMatches = 2  for both (Knot Found!) and add both to visited
        construct Knot [11,12,13] from runlist and replace segments and remove dupes in other lists
        visited = [36, 35, 37, 1, 34, 3, 4, 5, 6, 7, 8, 9, 12, 11 ,13]
    go back up to 10
    10 points to Knot[11, 12, 13] and the knot points back
    add Point 10 match 2 = Knot[11,12,13] and numMatches = 2 Knot[11,12,13] match 1 = Point 10, and numMatches =1
    add 10 to the visited list
    run list = [2, 3, 4, 5, 6, 7, 8, 9, 10]
    visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10]
    Knot[11,12,13,] is the main point
    Knot[11,12,13] points to 14 and 14 doesnt point back
    dead end? not so fast ( i think we can go back and re-evaluate  if either a knot is found, or 14's second segment changes to the caller)
        14 points to 15 and 14 points back 
        14 matches 15 set both to each others match 1 and set num matches to 1
        runList=[14,15]
        visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10]
        main point is 15
        
        15 points to 16 and 16 points back 
        add Point 15 match 2 = Point 16 and numMatches = 2  and Point 16 match 1 = Point 15 and numMatches = 1 add Point 15 to visited\
        runList=[14,15,16]
        visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15]
        main point is 16
               
        16 points to 17 and 17 points back 
        add Point 16 match 2 = Point 17 and numMatches = 2  and Point 17 match 1 = Point 16 and numMatches = 1 add Point 16 to visited\
        runList=[14,15,16,17]
        visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16]
        main point is 16

        14 now has a new match 2 check if it now points to the caller, otherwise continue
    it does, so set 14 match 2 to Knot[11,12,13] and visa versa, set both numMatches to 2 and append the runlist, add both to visited
    
    runList=[2, 3, 4, 5, 6, 7, 8, 9, 10, Knot[11,12,13], 14,15,16,17]
    visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14]
    go to end of runlist and continue
    main point is 17 

    17 points to 18 and 18 points back 
    add Point 17 match 2 = Point 18 and numMatches = 2  and Point 18 match 1 = Point 17 and numMatches = 1 add Point 17 to visited
    runList=[2, 3, 4, 5, 6, 7, 8, 9, 10, Knot[11,12,13], 14,15,16,17, 18]
    visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17]
    18 is now our main point;

    18 points to 19 and 19 points back 
    add Point 18 match 2 = Point 19 and numMatches = 2  and Point 19 match 1 = Point 18 and numMatches = 1 add Point 18 to visited
    runList=[2, 3, 4, 5, 6, 7, 8, 9, 10, Knot[11,12,13], 14,15,16,17, 18, 19]
    visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18]
    19 is now our main point;

    19 points to 20 and 20 doesnt point back
    dead end? not so fast (caller is 19, second segment is 22
        20 points to 21 and 21 points back 
        20 matches 21 set both to each others match 1 and set num matches to 1
        runList=[20,21]
        visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18]
        main point is 21

        21 points to 22 and 22 points back 
        add Point 21 match 2 = Point 22 and numMatches = 2  and Point 22 match 1 = Point 21 and numMatches = 1 add Point 21 to visited\
        runList=[20,21, 22]
        visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18, 21]
        main point is 22

        22 points to 23 and 23 points back 
        add Point 22 match 2 = Point 23 and numMatches = 2  and Point 23 match 1 = Point 22 and numMatches = 1 add Point 22 to visited\
        runList=[20,21, 22, 23]
        visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18, 21, 22]
        ok our second segment has been invalidated so chekc if it points back to the caller, otherwise continue and update the second segment
        it does not, so our new second segment is 23
        continue
        main point is 23

        23 points to 20 and 20 points back 
        add Point 20 match 2 = Point 23 and numMatches = 2  for both add both to visited and construct knot(KNOT FOUND!)
        runList=[20,21, 22,23]
        visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18, 21, 22, 20, 23]
        construct Knot [20,21,22,23] from runlist and replace segments and remove dupes in other lists
        go back up a level

    19 points to Knot[20,21,22,23] and Knot[20,21,22,23] points back 
    add Point 19 match 2 = Point Knot[20,21,22,23] and numMatches = 2  and Point Knot[20,21,22,23] match 1 = Point 19 and numMatches = 1 add Point 19 to visited
    runList=[2, 3, 4, 5, 6, 7, 8, 9, 10, Knot[11,12,13], 14,15,16,17, 18, 19, Knot[20,21,22,23]]
    visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18, 21, 22, 20, 23, 19]
    Knot[20,21,22,23] is now our main point;

    Knot[20,21,22,23] points to 24 and 24 points back 
    add Point Knot[20,21,22,23] match 2 = Point 24 and numMatches = 2  and Point 24 match 1 = Knot[20,21,22,23] and numMatches = 1 add Point Knot[20,21,22,23] to visited
    runList=[2, 3, 4, 5, 6, 7, 8, 9, 10, Knot[11,12,13], 14, 15, 16, 17, 18, 19, Knot[20,21,22,23], 24]
    visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18, 21, 22, 20, 23, 19, Knot[20,21,22,23]]
    Point 24 is now the main point

    24 points to 25 and 25 points back 
    add Point 24 match 2 = Point 25 and numMatches = 2  and Point 25 match 1 = Point 24 and numMatches = 1 add 24 to visited
    runList=[2, 3, 4, 5, 6, 7, 8, 9, 10, Knot[11,12,13], 14, 15, 16, 17, 18, 19, Knot[20,21,22,23], 24,25]
    visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18, 21, 22, 20, 23, 19, Knot[20,21,22,23], 24]
    Point 25 is now the main point

    25 points to 26 and 26 doesnt point back
    dead end? not so fast (caller is 25, second segment is 28)

        26 points to 27 and 27 points back 
        26 matches 27 set both to each others match 1 and set num matches to 1
        runList=[26,27]
        visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18, 21, 22, 20, 23, 19, Knot[20,21,22,23], 24]
        main point is 27
        
        27 points to 31 doesnt point back    
        dead end? not so fast (caller is 31, second segment is 28)
            31 points to 30 and 30 doesnt point back
            dead end? not so fast (caller is 31, second segment is 30)

                28 points to 29 and 29 points back 
                28 matches 29 set both to each others match 1 and set num matches to 1
                runList=[28,29]
                visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18, 21, 22, 20, 23, 19, Knot[20,21,22,23], 24, 27]
                main point is 29

                29 points to 38 and 38 points back 
                add Point 29 match 2 = Point 38 and numMatches = 2  and Point 38 match 1 = Point 29 and numMatches = 1 add Point 29 to visited\
                runList=[28,29,38]
                visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18, 21, 22, 20, 23, 19, Knot[20,21,22,23], 24, 27,29]
                main point is 38

                38 points to 30 and 30 points back 
                add Point 38 match 2 = Point 30 and numMatches = 2  and Point 30 match 1 = Point 38 and numMatches = 1 add Point 38 to visited\
                runList=[28,29,38,30]
                visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18, 21, 22, 20, 23, 19, Knot[20,21,22,23], 24, 27,29, 38]
                main point is 30

                
                30 points to 28 and 28 points back 
                add Point 38 match 2 = Point 28 and numMatches = 2  for both (Knot Found!) and add both to visited
                runList=[28,29,38,30]
                visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18, 21, 22, 20, 23, 19, Knot[20,21,22,23], 24, 27, 29, 38,, 28, 30]
                construct knot[28,29,38,30] from runlist
                go back up one
            
            second segment(28) has 2 matches, check if 31 now connects to 27, otherwise continue, it doesn't so continue new second segment is Knot[28,29,38,30][28]
            ^^ this is wrong! but im tired and dont want to rewrite it  just know that the real knot is [27,26, knot [28,29,38,30],31]

            31 points to Knot[28,29,38,30] and Knot[28,29,38,30] points back 
            add Point 31 match 2 = Point Knot[28,29,38,30] and numMatches = 2  and Point 31 match 1 = Point Knot[28,29,38,30] and numMatches = 1 add Point 31 to visited\
            runList=[31, Knot[28,29,38,30]]
            visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18, 21, 22, 20, 23, 19, Knot[20,21,22,23], 24, 29, 38,, 28, 30,31]
            main point is Knot[28,29,38,30]

            Knot[28,29,38,30] points to 27 at 28 and 27 points back (because 31 sis in the runlist so is excluded) (should exclude the whole runlist except the point you are looking at)
            add Point Knot[28,29,38,30] match 2 = Point 27 and numMatches = 2  for both and add Point Knot[28,29,38,30] and 27 to visited
            runList=[31, Knot[28,29,38,30], 27]
            visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18, 21, 22, 20, 23, 19, Knot[20,21,22,23], 24,  29, 38, 28, 30, 31, Knot[28,29,38,30], 27]
            we can go back up a layer and add the run list to the previous one

        26 points to 31 and 26 points back at 31
        add Point 26 match 2 = Point 31 and numMatches = 2  for both and add both to visited (KNOT FOUND!)
        runList=[26, 27,Knot[28,29,38,30], 31]
        visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18, 21, 22, 20, 23, 19, Knot[20,21,22,23], 24, 29, 38, 28, 30, 31, Knot[28,29,38,30], 26, 27]
        construct knot from runlist and go up a level
        

    25 points to Knot[27,26,31, Knot[28,29,38,30]] and Knot[27,26,31, Knot[28,29,38,30]] points back at 26
    add Point 25 match 2 = Knot[26,27,31, Knot[28,29,38,30]] and numMatches = 2  and Knot[26,27,31, Knot[28,29,38,30]] match 1 = Point 25 and numMatches = 1 add Point 25 to visited
    runList=[2, 3, 4, 5, 6, 7, 8, 9, 10, Knot[11,12,13], 14, 15, 16, 17, 18, 19, Knot[20,21,22,23], 24,25, Knot[26,27,31, Knot[28,29,38,30]]]
    visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18, 21, 22, 20, 23, 19, Knot[20,21,22,23], 24, , 29, 38, 28, 30, 31, 25]
    main point is Knot[26,27,31, Knot[28,29,38,30]]

    Knot[26,27,31, Knot[28,29,38,30]] points to 32 and it does not point back   
    dead end? not so fast (caller is Knot[26,27,31, Knot[28,29,38,30]], second segment is 2)
        32 points to 33 and 33 points back 
        33 matches 32 set both to each others match 1 and set num matches to 1
        runList=[32,33]
        visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18, 21, 22, 20, 23, 19, Knot[20,21,22,23], 24]
        main point is 33

        33 points to 2 and 2 points back  (knot found?)
        add Point 33 match 2 = Point 2 and numMatches = 2  and Point 2 match 2 = Point 33 and numMatches = 2 add Point 33 and 2 to visited\
        runList=[32, 33, 2]
        visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18, 21, 22, 20, 23, 19, Knot[20,21,22,23], 24, 27, 29, 38,, 28, 30, 33, 2]
        2 has 2 segments now, check if 32 matches(otherwise dead end?), it does so append the run list to the upper level and make a knot

    Knot[26,27,31, Knot[28,29,38,30]] points to 32 and it points back 
    add Point Knot[26,27,31, Knot[28,29,38,30]] match 2 = Point 32 and numMatches = 2  for both and continue from end of runlist, end has 2 matches, so construct a knot from the runlist (add both to visited)
    visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18, 21, 22, 20, 23, 19, Knot[20,21,22,23], 24, 27, 29, 38,, 28, 30, 33, 2, Knot[26,27,31, Knot[28,29,38,30]], 32]
    bigKnot = Knot[2, 3, 4, 5, 6, 7, 8, 9, 10, Knot[11,12,13], 14, 15, 16, 17, 18, 19, Knot[20,21,22,23], 24,25, Knot[26,27,31, Knot[28,29,38,30]], 32, 33]

    ok now we are at the base layer so find the next segment not in visited (Knot[0, 1, 34, Knot[35,36,37]])
    Knot[0, 1, 34, Knot[35,36,37]] points to bigKnot at 2 and it does point back at 1
    Knot[0, 1, 34, Knot[35,36,37]] matches bigKnot set both to each others match 1 and set num matches to 1
    runList=[Knot[0, 1, 34, Knot[35,36,37]], bigKnot]
    visited = [36, 35, 37, 1, 34, Knot[35,36,37], 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 15, 16, Knot[11,12,13], 14, 17, 18, 21, 22, 20, 23, 19, Knot[20,21,22,23], 24, 27, 29, 38,, 28, 30, 33, 2, Knot[26,27,31, Knot[28,29,38,30]], 32]
    bigKnot is now the main point

    bigKnot points to Knot[0, 1, 34, Knot[35,36,37]] at 34 from 33 or 3?
    and it points back
    now what do i do lol
    now its time ot unravel

    combining two knots is different than when we have two matches already

    when unravelling do first match to first match on the knots and then cut the interior second match
    Knot[Knot[34, Knot[35,36,37], 0 , 1]  [2, 3, 4, 5, 6, 7, 8, 9, 10, Knot[11,12,13], 14, 15, 16, 17, 18, 19, Knot[20,21,22,23], 24,25, Knot[27,26, Knot[28,29,38,30],31], 32, 33]
    final knots matches are first: 2<->1
    and 34 <-> 3
    so we match 2<->1 and cut 2<->33
    actually just check all of the segments to cut and compare their length changed 
    (i.e. if we are inserting at 34 thru 1 find the segment which has the shortest distance from its endpoints to 1 and 34 minus the length of the cut segment)

    34, Knot[35,36,37], 0 , 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, Knot[11,12,13], 14, 15, 16, 17, 18, 19, Knot[20,21,22,23], 24,25, Knot[27,26, Knot[28,29,38,30],31], 32, 33]
    now for Knot[35,36,37]
    matches 34 and 0
    34 35 is the first match cut 35<->37
    0, 36 is the second match cut 36->37
    hmmm what to do?
    I believe we need to check all cuts and choose the smallest 
    for knot size > 3 we can have up to two cuts 
    so we'd need to check all of the single segment cuts and all of the double segment cuts
    O( n + n^2 where n is the size of the knot)

    34, 35, 36, 37, 0 , 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, Knot[11,12,13], 14, 15, 16, 17, 18, 19, Knot[20,21,22,23], 24,25, Knot[27,26, Knot[28,29,38,30],31], 32, 33]
    matches 10 and 14
    11 10 is the first match cut 11<->13
    13 14 matches and wants to cut 11<->13
    34, 35, 36, 37, 0 , 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,13, 14, 15, 16, 17, 18, 19, Knot[20,21,22,23], 24,25, Knot[27,26, Knot[28,29,38,30],31], 32, 33]
    matches 19 and 24
    19 to 20 matches and wants to cut 20<->23 
    23 24 matches and wants to cut 20 <->23 both agree
    34, 35, 36, 37, 0 , 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,21,22,23, 24,25, Knot[26,27,Knot[28,29,38,30],31], 32, 33]

    25 26 matches and wants to cut 26<->28 check for the worse of the matches
    31 32 matches and wants to cut 31<->27 check for the worse of the matches
    since they are different match 27  and 28 ( i.e. replace 26 in the knots match2  and 31 in 27's match2)

    34, 35, 36, 37, 0 , 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 ,27 ,Knot[28,29,38,30],31, 32, 33]
    27 28 matches and wants to cut 28<->30 check for the worse of the matches
    30 31 matches and wants to cut 28<->30 check for the worse of the matches
    both agree, proceed

    34, 35, 36, 37, 0 , 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 ,27 , 28, 29, 38, 30,31, 32, 33]




            


*/

0  s  [Segment[1 : 0], Segment[34 : 0], Segment[35 : 0], Segment[36 : 0], Segment[37 : 0], Segment[2 : 0], Segment[3 : 0], Segment[4 : 0], Segment[33 : 0], Segment[32 : 0], Segment[6 : 0], Segment[5 : 0], Segment[26 : 0], Segment[7 : 0], Segment[24 : 0], Segment[27 : 0], Segment[25 : 0], Segment[31 : 0], Segment[8 : 0], Segment[30 : 0], Segment[28 : 0], Segment[29 : 0], Segment[23 : 0], Segment[20 : 0], Segment[21 : 0], Segment[22 : 0], Segment[9 : 0], Segment[18 : 0], Segment[15 : 0], Segment[0 : 17], Segment[12 : 0], Segment[16 : 0], Segment[11 : 0], Segment[14 : 0], Segment[19 : 0], Segment[10 : 0], Segment[13 : 0], Segment[0 : 38]]

1  s  [Segment[1 : 0], Segment[34 : 1], Segment[35 : 1], Segment[36 : 1], Segment[37 : 1], Segment[2 : 1], Segment[3 : 1], Segment[4 : 1], Segment[33 : 1], Segment[32 : 1], Segment[5 : 1], Segment[6 : 1], Segment[26 : 1], Segment[27 : 1], Segment[7 : 1], Segment[24 : 1], Segment[25 : 1], Segment[31 : 1], Segment[8 : 1], Segment[30 : 1], Segment[28 : 1], Segment[29 : 1], Segment[23 : 1], Segment[20 : 1], Segment[21 : 1], Segment[9 : 1], Segment[22 : 1], Segment[15 : 1], Segment[18 : 1], Segment[1 : 17], Segment[12 : 1], Segment[16 : 1], Segment[11 : 1], Segment[14 : 1], Segment[19 : 1], Segment[10 : 1], Segment[13 : 1], Segment[1 : 38]]

2  s  [Segment[2 : 3], Segment[4 : 2], Segment[2 : 33], Segment[2 : 32], Segment[2 : 5], Segment[2 : 1], Segment[2 : 34], Segment[2 : 35], Segment[36 : 2], Segment[2 : 37], Segment[6 : 2], Segment[2 : 0], Segment[2 : 7], Segment[2 : 27], Segment[26 : 2], Segment[8 : 2], Segment[2 : 31], Segment[30 : 2], Segment[2 : 28], Segment[29 : 2], Segment[2 : 25], Segment[2 : 24], Segment[9 : 2], Segment[2 : 15], Segment[2 : 12], Segment[23 : 2], Segment[11 : 2], Segment[20 : 2], Segment[21 : 2], Segment[10 : 2], Segment[2 : 17], Segment[2 : 18], Segment[22 : 2], Segment[14 : 2], Segment[16 : 2], Segment[2 : 13], Segment[2 : 19], Segment[2 : 38]]

3  s  [Segment[2 : 3], Segment[4 : 3], Segment[33 : 3], Segment[5 : 3], Segment[32 : 3], Segment[3 : 1], Segment[34 : 3], Segment[35 : 3], Segment[6 : 3], Segment[36 : 3], Segment[37 : 3], Segment[3 : 0], Segment[7 : 3], Segment[27 : 3], Segment[8 : 3], Segment[26 : 3], Segment[31 : 3], Segment[30 : 3], Segment[28 : 3], Segment[29 : 3], Segment[25 : 3], Segment[24 : 3], Segment[9 : 3], Segment[12 : 3], Segment[15 : 3], Segment[11 : 3], Segment[23 : 3], Segment[20 : 3], Segment[21 : 3], Segment[10 : 3], Segment[3 : 17], Segment[18 : 3], Segment[14 : 3], Segment[22 : 3], Segment[16 : 3], Segment[13 : 3], Segment[19 : 3], Segment[3 : 38]]

4  s  [Segment[4 : 5], Segment[4 : 3], Segment[4 : 6], Segment[4 : 2], Segment[4 : 7], Segment[4 : 33], Segment[4 : 32], Segment[4 : 8], Segment[4 : 1], Segment[4 : 34], Segment[4 : 35], Segment[4 : 0], Segment[4 : 36], Segment[4 : 37], Segment[4 : 31], Segment[4 : 27], Segment[26 : 4], Segment[30 : 4], Segment[4 : 28], Segment[4 : 9], Segment[29 : 4], Segment[4 : 25], Segment[4 : 24], Segment[4 : 12], Segment[4 : 11], Segment[4 : 10], Segment[4 : 15], Segment[4 : 14], Segment[4 : 23], Segment[4 : 20], Segment[4 : 21], Segment[4 : 17], Segment[16 : 4], Segment[4 : 18], Segment[4 : 22], Segment[4 : 13], Segment[4 : 19], Segment[4 : 38]]

5  s  [Segment[4 : 5], Segment[6 : 5], Segment[5 : 7], Segment[5 : 3], Segment[2 : 5], Segment[8 : 5], Segment[5 : 33], Segment[5 : 32], Segment[5 : 1], Segment[5 : 34], Segment[35 : 5], Segment[36 : 5], Segment[5 : 37], Segment[31 : 5], Segment[5 : 0], Segment[5 : 27], Segment[26 : 5], Segment[30 : 5], Segment[9 : 5], Segment[5 : 28], Segment[29 : 5], Segment[5 : 25], Segment[5 : 12], Segment[24 : 5], Segment[10 : 5], Segment[11 : 5], Segment[5 : 15], Segment[14 : 5], Segment[5 : 17], Segment[16 : 5], Segment[13 : 5], Segment[20 : 5], Segment[23 : 5], Segment[21 : 5], Segment[5 : 18], Segment[22 : 5], Segment[5 : 19], Segment[5 : 38]]

6  s  [Segment[6 : 7], Segment[4 : 6], Segment[6 : 5], Segment[8 : 6], Segment[6 : 3], Segment[6 : 2], Segment[6 : 33], Segment[6 : 32], Segment[6 : 1], Segment[6 : 0], Segment[6 : 34], Segment[6 : 35], Segment[6 : 36], Segment[6 : 37], Segment[6 : 31], Segment[6 : 9], Segment[6 : 27], Segment[26 : 6], Segment[30 : 6], Segment[6 : 28], Segment[29 : 6], Segment[6 : 25], Segment[6 : 10], Segment[6 : 24], Segment[6 : 12], Segment[6 : 11], Segment[6 : 15], Segment[6 : 14], Segment[23 : 6], Segment[20 : 6], Segment[6 : 21], Segment[6 : 17], Segment[6 : 13], Segment[16 : 6], Segment[6 : 18], Segment[6 : 22], Segment[6 : 19], Segment[6 : 38]]

7  s  [Segment[6 : 7], Segment[5 : 7], Segment[8 : 7], Segment[4 : 7], Segment[7 : 3], Segment[2 : 7], Segment[7 : 33], Segment[7 : 32], Segment[7 : 1], Segment[7 : 0], Segment[7 : 34], Segment[9 : 7], Segment[35 : 7], Segment[36 : 7], Segment[7 : 37], Segment[31 : 7], Segment[7 : 27], Segment[26 : 7], Segment[30 : 7], Segment[7 : 28], Segment[29 : 7], Segment[10 : 7], Segment[7 : 25], Segment[7 : 12], Segment[11 : 7], Segment[24 : 7], Segment[7 : 15], Segment[14 : 7], Segment[13 : 7], Segment[23 : 7], Segment[16 : 7], Segment[7 : 17], Segment[20 : 7], Segment[21 : 7], Segment[7 : 18], Segment[22 : 7], Segment[7 : 19], Segment[7 : 38]]

8  s  [Segment[8 : 7], Segment[8 : 5], Segment[8 : 6], Segment[4 : 8], Segment[8 : 9], Segment[8 : 33], Segment[8 : 3], Segment[8 : 32], Segment[8 : 2], Segment[8 : 31], Segment[8 : 1], Segment[8 : 34], Segment[8 : 27], Segment[8 : 35], Segment[30 : 8], Segment[8 : 36], Segment[8 : 0], Segment[8 : 37], Segment[8 : 10], Segment[26 : 8], Segment[8 : 28], Segment[29 : 8], Segment[8 : 12], Segment[8 : 11], Segment[8 : 25], Segment[8 : 24], Segment[8 : 15], Segment[8 : 13], Segment[8 : 14], Segment[16 : 8], Segment[8 : 17], Segment[8 : 18], Segment[20 : 8], Segment[8 : 21], Segment[23 : 8], Segment[8 : 22], Segment[8 : 19], Segment[8 : 38]]

9  s  [Segment[9 : 10], Segment[8 : 9], Segment[9 : 11], Segment[9 : 12], Segment[9 : 7], Segment[9 : 5], Segment[6 : 9], Segment[4 : 9], Segment[9 : 33], Segment[9 : 32], Segment[9 : 31], Segment[9 : 3], Segment[9 : 2], Segment[30 : 9], Segment[9 : 28], Segment[9 : 27], Segment[29 : 9], Segment[9 : 13], Segment[26 : 9], Segment[9 : 34], Segment[9 : 1], Segment[9 : 35], Segment[9 : 36], Segment[9 : 37], Segment[9 : 0], Segment[9 : 14], Segment[9 : 15], Segment[9 : 25], Segment[16 : 9], Segment[9 : 24], Segment[9 : 17], Segment[9 : 18], Segment[20 : 9], Segment[9 : 21], Segment[23 : 9], Segment[22 : 9], Segment[9 : 19], Segment[9 : 38]]

10  s  [Segment[9 : 10], Segment[11 : 10], Segment[10 : 12], Segment[8 : 10], Segment[10 : 13], Segment[10 : 7], Segment[10 : 5], Segment[6 : 10], Segment[4 : 10], Segment[10 : 31], Segment[10 : 32], Segment[10 : 33], Segment[30 : 10], Segment[10 : 3], Segment[10 : 2], Segment[10 : 28], Segment[29 : 10], Segment[10 : 27], Segment[14 : 10], Segment[26 : 10], Segment[10 : 34], Segment[10 : 1], Segment[10 : 35], Segment[10 : 36], Segment[10 : 37], Segment[10 : 15], Segment[10 : 0], Segment[16 : 10], Segment[10 : 25], Segment[10 : 17], Segment[10 : 24], Segment[10 : 18], Segment[20 : 10], Segment[10 : 21], Segment[23 : 10], Segment[22 : 10], Segment[10 : 19], Segment[10 : 38]]

{
    11  s  [Segment[11 : 12], Segment[11 : 13], Segment[11 : 10], Segment[9 : 11], Segment[11 : 14], Segment[11 : 31], Segment[30 : 11], Segment[8 : 11], Segment[11 : 28], Segment[29 : 11], Segment[11 : 32], Segment[11 : 33], Segment[11 : 5], Segment[11 : 27], Segment[11 : 15], Segment[4 : 11], Segment[11 : 7], Segment[26 : 11], Segment[6 : 11], Segment[11 : 3], Segment[16 : 11], Segment[11 : 2], Segment[11 : 34], Segment[11 : 36], Segment[11 : 35], Segment[11 : 37], Segment[11 : 25], Segment[11 : 1], Segment[11 : 17], Segment[11 : 0], Segment[11 : 18], Segment[11 : 24], Segment[20 : 11], Segment[11 : 21], Segment[11 : 19], Segment[23 : 11], Segment[22 : 11], Segment[11 : 38]]

    12  s  [Segment[11 : 12], Segment[13 : 12], Segment[9 : 12], Segment[10 : 12], Segment[14 : 12], Segment[30 : 12], Segment[31 : 12], Segment[12 : 28], Segment[29 : 12], Segment[8 : 12], Segment[12 : 32], Segment[12 : 15], Segment[12 : 27], Segment[12 : 33], Segment[5 : 12], Segment[26 : 12], Segment[4 : 12], Segment[16 : 12], Segment[7 : 12], Segment[12 : 3], Segment[6 : 12], Segment[2 : 12], Segment[12 : 25], Segment[34 : 12], Segment[36 : 12], Segment[35 : 12], Segment[12 : 37], Segment[12 : 17], Segment[12 : 1], Segment[12 : 0], Segment[12 : 18], Segment[24 : 12], Segment[20 : 12], Segment[21 : 12], Segment[19 : 12], Segment[23 : 12], Segment[22 : 12], Segment[12 : 38]]

    13  s  [Segment[13 : 12], Segment[11 : 13], Segment[14 : 13], Segment[10 : 13], Segment[13 : 15], Segment[9 : 13], Segment[30 : 13], Segment[29 : 13], Segment[16 : 13], Segment[13 : 28], Segment[13 : 31], Segment[13 : 27], Segment[13 : 32], Segment[8 : 13], Segment[13 : 33], Segment[26 : 13], Segment[13 : 17], Segment[13 : 5], Segment[4 : 13], Segment[13 : 3], Segment[2 : 13], Segment[13 : 7], Segment[13 : 25], Segment[6 : 13], Segment[13 : 18], Segment[13 : 34], Segment[36 : 13], Segment[13 : 37], Segment[13 : 35], Segment[13 : 1], Segment[13 : 0], Segment[20 : 13], Segment[13 : 19], Segment[13 : 24], Segment[21 : 13], Segment[23 : 13], Segment[22 : 13], Segment[13 : 38]]
}
14  s  [Segment[14 : 15], Segment[16 : 14], Segment[14 : 13], Segment[29 : 14], Segment[14 : 28], Segment[30 : 14], Segment[14 : 12], Segment[14 : 17], Segment[14 : 31], Segment[11 : 14], Segment[14 : 27], Segment[26 : 14], Segment[14 : 18], Segment[14 : 25], Segment[14 : 32], Segment[14 : 33], Segment[9 : 14], Segment[14 : 19], Segment[14 : 5], Segment[20 : 14], Segment[14 : 3], Segment[14 : 2], Segment[14 : 21], Segment[8 : 14], Segment[4 : 14], Segment[14 : 37], Segment[14 : 10], Segment[14 : 36], Segment[14 : 34], Segment[14 : 35], Segment[14 : 24], Segment[6 : 14], Segment[14 : 1], Segment[14 : 7], Segment[23 : 14], Segment[22 : 14], Segment[14 : 0], Segment[14 : 38]]

15  s  [Segment[16 : 15], Segment[14 : 15], Segment[15 : 17], Segment[29 : 15], Segment[28 : 15], Segment[30 : 15], Segment[18 : 15], Segment[31 : 15], Segment[27 : 15], Segment[26 : 15], Segment[25 : 15], Segment[19 : 15], Segment[20 : 15], Segment[32 : 15], Segment[12 : 15], Segment[21 : 15], Segment[33 : 15], Segment[13 : 15], Segment[11 : 15], Segment[24 : 15], Segment[37 : 15], Segment[36 : 15], Segment[34 : 15], Segment[35 : 15], Segment[23 : 15], Segment[22 : 15], Segment[15 : 3], Segment[2 : 15], Segment[5 : 15], Segment[4 : 15], Segment[15 : 1], Segment[8 : 15], Segment[15 : 0], Segment[9 : 15], Segment[6 : 15], Segment[7 : 15], Segment[10 : 15], Segment[15 : 38]]

16  s  [Segment[16 : 15], Segment[16 : 17], Segment[16 : 14], Segment[16 : 18], Segment[29 : 16], Segment[16 : 28], Segment[30 : 16], Segment[16 : 19], Segment[16 : 31], Segment[16 : 27], Segment[16 : 25], Segment[16 : 26], Segment[16 : 20], Segment[16 : 21], Segment[16 : 13], Segment[16 : 12], Segment[16 : 32], Segment[16 : 33], Segment[16 : 22], Segment[16 : 24], Segment[16 : 23], Segment[16 : 11], Segment[16 : 37], Segment[16 : 36], Segment[16 : 35], Segment[16 : 34], Segment[16 : 3], Segment[16 : 2], Segment[16 : 5], Segment[16 : 4], Segment[16 : 1], Segment[16 : 0], Segment[16 : 8], Segment[16 : 9], Segment[16 : 6], Segment[16 : 7], Segment[16 : 10], Segment[16 : 38]]

17  s  [Segment[18 : 17], Segment[16 : 17], Segment[15 : 17], Segment[19 : 17], Segment[20 : 17], Segment[21 : 17], Segment[25 : 17], Segment[29 : 17], Segment[28 : 17], Segment[14 : 17], Segment[30 : 17], Segment[26 : 17], Segment[22 : 17], Segment[27 : 17], Segment[23 : 17], Segment[31 : 17], Segment[24 : 17], Segment[32 : 17], Segment[33 : 17], Segment[37 : 17], Segment[36 : 17], Segment[35 : 17], Segment[34 : 17], Segment[2 : 17], Segment[3 : 17], Segment[1 : 17], Segment[12 : 17], Segment[0 : 17], Segment[5 : 17], Segment[4 : 17], Segment[13 : 17], Segment[11 : 17], Segment[6 : 17], Segment[8 : 17], Segment[7 : 17], Segment[9 : 17], Segment[10 : 17], Segment[17 : 38]]

18  s  [Segment[18 : 17], Segment[19 : 18], Segment[20 : 18], Segment[21 : 18], Segment[22 : 18], Segment[25 : 18], Segment[16 : 18], Segment[23 : 18], Segment[18 : 15], Segment[24 : 18], Segment[29 : 18], Segment[26 : 18], Segment[18 : 28], Segment[27 : 18], Segment[30 : 18], Segment[31 : 18], Segment[14 : 18], Segment[37 : 18], Segment[36 : 18], Segment[35 : 18], Segment[34 : 18], Segment[32 : 18], Segment[18 : 33], Segment[18 : 1], Segment[2 : 18], Segment[18 : 3], Segment[18 : 0], Segment[4 : 18], Segment[5 : 18], Segment[12 : 18], Segment[6 : 18], Segment[13 : 18], Segment[8 : 18], Segment[7 : 18], Segment[11 : 18], Segment[9 : 18], Segment[10 : 18], Segment[18 : 38]]

19  s  [Segment[19 : 18], Segment[20 : 19], Segment[21 : 19], Segment[19 : 17], Segment[22 : 19], Segment[23 : 19], Segment[16 : 19], Segment[19 : 25], Segment[19 : 15], Segment[24 : 19], Segment[29 : 19], Segment[26 : 19], Segment[19 : 28], Segment[19 : 27], Segment[30 : 19], Segment[14 : 19], Segment[31 : 19], Segment[19 : 37], Segment[36 : 19], Segment[35 : 19], Segment[19 : 34], Segment[19 : 32], Segment[19 : 33], Segment[19 : 1], Segment[19 : 0], Segment[2 : 19], Segment[19 : 3], Segment[4 : 19], Segment[5 : 19], Segment[19 : 12], Segment[6 : 19], Segment[13 : 19], Segment[8 : 19], Segment[7 : 19], Segment[11 : 19], Segment[9 : 19], Segment[10 : 19], Segment[19 : 38]]

{
    20  s  [Segment[20 : 21], Segment[20 : 22], Segment[20 : 23], Segment[20 : 18], Segment[20 : 19], Segment[20 : 25], Segment[20 : 24], Segment[20 : 17], Segment[26 : 20], Segment[20 : 27], Segment[20 : 15], Segment[29 : 20], Segment[20 : 28], Segment[16 : 20], Segment[20 : 37], Segment[20 : 36], Segment[20 : 35], Segment[30 : 20], Segment[20 : 34], Segment[20 : 31], Segment[20 : 1], Segment[20 : 32], Segment[20 : 0], Segment[20 : 33], Segment[20 : 2], Segment[20 : 3], Segment[20 : 14], Segment[4 : 20], Segment[20 : 5], Segment[20 : 6], Segment[20 : 7], Segment[20 : 8], Segment[20 : 12], Segment[20 : 11], Segment[20 : 13], Segment[20 : 9], Segment[20 : 10], Segment[20 : 38]]

    21  s  [Segment[20 : 21], Segment[22 : 21], Segment[23 : 21], Segment[21 : 18], Segment[21 : 19], Segment[21 : 24], Segment[21 : 25], Segment[21 : 17], Segment[26 : 21], Segment[21 : 27], Segment[29 : 21], Segment[21 : 15], Segment[21 : 28], Segment[16 : 21], Segment[21 : 37], Segment[36 : 21], Segment[21 : 35], Segment[21 : 34], Segment[30 : 21], Segment[21 : 31], Segment[21 : 1], Segment[21 : 0], Segment[21 : 32], Segment[21 : 33], Segment[21 : 2], Segment[21 : 3], Segment[14 : 21], Segment[4 : 21], Segment[21 : 5], Segment[6 : 21], Segment[21 : 7], Segment[8 : 21], Segment[21 : 12], Segment[11 : 21], Segment[9 : 21], Segment[21 : 13], Segment[10 : 21], Segment[21 : 38]]

    22  s  [Segment[23 : 22], Segment[22 : 21], Segment[20 : 22], Segment[22 : 24], Segment[22 : 18], Segment[22 : 19], Segment[22 : 25], Segment[22 : 17], Segment[26 : 22], Segment[22 : 37], Segment[22 : 36], Segment[22 : 27], Segment[22 : 35], Segment[22 : 34], Segment[29 : 22], Segment[22 : 28], Segment[22 : 15], Segment[16 : 22], Segment[22 : 1], Segment[30 : 22], Segment[22 : 0], Segment[22 : 31], Segment[22 : 32], Segment[22 : 33], Segment[22 : 2], Segment[22 : 3], Segment[4 : 22], Segment[22 : 14], Segment[22 : 5], Segment[6 : 22], Segment[22 : 7], Segment[8 : 22], Segment[22 : 12], Segment[22 : 11], Segment[22 : 9], Segment[22 : 13], Segment[22 : 10], Segment[22 : 38]]

    23  s  [Segment[23 : 22], Segment[23 : 21], Segment[20 : 23], Segment[23 : 24], Segment[23 : 25], Segment[23 : 18], Segment[23 : 19], Segment[23 : 17], Segment[26 : 23], Segment[23 : 37], Segment[23 : 36], Segment[23 : 35], Segment[23 : 34], Segment[23 : 27], Segment[23 : 1], Segment[29 : 23], Segment[23 : 28], Segment[23 : 0], Segment[30 : 23], Segment[23 : 15], Segment[23 : 31], Segment[23 : 32], Segment[16 : 23], Segment[23 : 33], Segment[23 : 2], Segment[23 : 3], Segment[4 : 23], Segment[23 : 5], Segment[23 : 6], Segment[23 : 14], Segment[23 : 7], Segment[23 : 8], Segment[23 : 12], Segment[23 : 9], Segment[23 : 11], Segment[23 : 13], Segment[23 : 10], Segment[23 : 38]]
}

24  s  [Segment[24 : 25], Segment[23 : 24], Segment[24 : 37], Segment[36 : 24], Segment[35 : 24], Segment[21 : 24], Segment[20 : 24], Segment[24 : 34], Segment[22 : 24], Segment[26 : 24], Segment[24 : 1], Segment[24 : 0], Segment[24 : 27], Segment[24 : 18], Segment[2 : 24], Segment[24 : 3], Segment[24 : 32], Segment[24 : 28], Segment[24 : 33], Segment[29 : 24], Segment[31 : 24], Segment[30 : 24], Segment[24 : 17], Segment[4 : 24], Segment[24 : 19], Segment[24 : 5], Segment[24 : 15], Segment[6 : 24], Segment[16 : 24], Segment[24 : 7], Segment[8 : 24], Segment[14 : 24], Segment[9 : 24], Segment[24 : 12], Segment[11 : 24], Segment[13 : 24], Segment[10 : 24], Segment[24 : 38]]

25  s  [Segment[26 : 25], Segment[24 : 25], Segment[27 : 25], Segment[25 : 28], Segment[29 : 25], Segment[37 : 25], Segment[36 : 25], Segment[20 : 25], Segment[35 : 25], Segment[34 : 25], Segment[21 : 25], Segment[30 : 25], Segment[31 : 25], Segment[23 : 25], Segment[25 : 18], Segment[32 : 25], Segment[25 : 33], Segment[25 : 17], Segment[25 : 1], Segment[22 : 25], Segment[2 : 25], Segment[25 : 3], Segment[25 : 0], Segment[25 : 15], Segment[4 : 25], Segment[19 : 25], Segment[16 : 25], Segment[5 : 25], Segment[6 : 25], Segment[14 : 25], Segment[7 : 25], Segment[8 : 25], Segment[12 : 25], Segment[9 : 25], Segment[11 : 25], Segment[13 : 25], Segment[10 : 25], Segment[25 : 38]]
 25 tries 26 and fails 
{

    26 goes to 27 27 tires 31 and fails 31 goes to 30 and fails, 30 makes the knot, 31 connects to knot(30), knot(28) wants 27
    runList = [31, Knot[28,29,38,30]]
    /*
    should we exclude things in the run list from other than when it would make a loop? e.g. exclude 27:31 since it is blocking and wouldnt make a knot
    no we should exclude things that are matched to the current point since 31 matches the knot we can exclude it.

    but if we start at 27,  we get 27  > 26 26 fails 28,  make the knot, then it fails again, so we go down a layer,
        the knot matches to 31 from 30:31 then 31 tires to match the knot again so go to the other end
        the knot matches to 27 and excludes 31 since it is in the runlist

    i am unsure but i think someone cant get what they want, might be in an "incorrect situation" until outside stimulus comes in to resolve it
    */
    27  s  [Segment[26 : 27], Segment[31 : 27], Segment[27 : 28], Segment[30 : 27], Segment[29 : 27], Segment[27 : 32], Segment[27 : 33], Segment[27 : 25], Segment[27 : 37], Segment[36 : 27], Segment[34 : 27], Segment[27 : 3], Segment[35 : 27], Segment[2 : 27], Segment[5 : 27], Segment[4 : 27], Segment[27 : 1], Segment[24 : 27], Segment[27 : 15], Segment[27 : 0], Segment[6 : 27], Segment[8 : 27], Segment[7 : 27], Segment[27 : 17], Segment[16 : 27], Segment[27 : 18], Segment[14 : 27], Segment[20 : 27], Segment[21 : 27], Segment[12 : 27], Segment[23 : 27], Segment[9 : 27], Segment[11 : 27], Segment[22 : 27], Segment[19 : 27], Segment[13 : 27], Segment[10 : 27], Segment[27 : 38]]

    26  s  [Segment[26 : 27], Segment[26 : Knot[28]], Segment[26 : 31], Segment[Knot[29] : 26], Segment[Knot[30] : 26], Segment[26 : 25], Segment[26 : 32], Segment[26 : 33], Segment[26 : 37], Segment[26 : 36], Segment[26 : 34], Segment[26 : 35], Segment[26 : 2], Segment[26 : 3], Segment[26 : 1], Segment[26 : 24], Segment[26 : 4], Segment[26 : 5], Segment[26 : 0], Segment[26 : 15], Segment[26 : 6], Segment[26 : 17], Segment[26 : 20], Segment[26 : 18], Segment[26 : 7], Segment[26 : 8], Segment[26 : 21], Segment[16 : 26], Segment[26 : 23], Segment[26 : 14], Segment[26 : 22], Segment[26 : 12], Segment[26 : 9], Segment[26 : 19], Segment[26 : 11], Segment[26 : 13], Segment[26 : 10], Segment[26 : 38]]

    {
        28  s  [Segment[29 : 28], Segment[30 : 28], Segment[31 : 28], Segment[27 : 28], Segment[26 : 28], Segment[32 : 28], Segment[33 : 28], Segment[28 : 15], Segment[25 : 28], Segment[28 : 3], Segment[2 : 28], Segment[37 : 28], Segment[36 : 28], Segment[34 : 28], Segment[14 : 28], Segment[35 : 28], Segment[16 : 28], Segment[28 : 17], Segment[5 : 28], Segment[4 : 28], Segment[28 : 1], Segment[24 : 28], Segment[18 : 28], Segment[12 : 28], Segment[8 : 28], Segment[28 : 0], Segment[6 : 28], Segment[20 : 28], Segment[7 : 28], Segment[11 : 28], Segment[21 : 28], Segment[9 : 28], Segment[23 : 28], Segment[13 : 28], Segment[22 : 28], Segment[19 : 28], Segment[10 : 28], Segment[28 : 38]]

        29  s  [Segment[29 : 38], Segment[29 : 28], Segment[30 : 29], Segment[29 : 31], Segment[29 : 27], Segment[29 : 26], Segment[29 : 15], Segment[29 : 32], Segment[29 : 25], Segment[29 : 33], Segment[29 : 16], Segment[29 : 14], Segment[29 : 17], Segment[29 : 3], Segment[29 : 2], Segment[29 : 37], Segment[29 : 36], Segment[29 : 34], Segment[29 : 35], Segment[29 : 5], Segment[29 : 4], Segment[29 : 18], Segment[29 : 1], Segment[29 : 24], Segment[29 : 12], Segment[29 : 8], Segment[29 : 0], Segment[29 : 20], Segment[29 : 6], Segment[29 : 11], Segment[29 : 21], Segment[29 : 7], Segment[29 : 9], Segment[29 : 23], Segment[29 : 13], Segment[29 : 19], Segment[29 : 22], Segment[29 : 10]]

        38  s  [Segment[30 : 38], Segment[29 : 38], Segment[16 : 38], Segment[26 : 38], Segment[4 : 38], Segment[20 : 38], Segment[23 : 38], Segment[8 : 38], Segment[6 : 38], Segment[22 : 38], Segment[9 : 38], Segment[11 : 38], Segment[14 : 38], Segment[10 : 38], Segment[36 : 38], Segment[21 : 38], Segment[2 : 38], Segment[13 : 38], Segment[35 : 38], Segment[31 : 38], Segment[24 : 38], Segment[5 : 38], Segment[7 : 38], Segment[19 : 38], Segment[34 : 38], Segment[12 : 38], Segment[27 : 38], Segment[32 : 38], Segment[37 : 38], Segment[25 : 38], Segment[18 : 38], Segment[33 : 38], Segment[28 : 38], Segment[15 : 38], Segment[3 : 38], Segment[1 : 38], Segment[0 : 38], Segment[17 : 38]]

        30  s  [Segment[30 : 38], Segment[30 : 28], Segment[30 : 29], Segment[30 : 31], Segment[30 : 27], Segment[30 : 26], Segment[30 : 32], Segment[30 : 33], Segment[30 : 15], Segment[30 : 25], Segment[30 : 3], Segment[30 : 2], Segment[30 : 5], Segment[30 : 34], Segment[30 : 36], Segment[30 : 37], Segment[30 : 35], Segment[30 : 4], Segment[30 : 14], Segment[30 : 16], Segment[30 : 12], Segment[30 : 17], Segment[30 : 1], Segment[30 : 8], Segment[30 : 6], Segment[30 : 24], Segment[30 : 0], Segment[30 : 7], Segment[30 : 11], Segment[30 : 18], Segment[30 : 9], Segment[30 : 20], Segment[30 : 21], Segment[30 : 13], Segment[30 : 23], Segment[30 : 22], Segment[30 : 19], Segment[30 : 10]]
    }

    31  s  [Segment[30 : 31], Segment[31 : 28], Segment[31 : 27], Segment[29 : 31], Segment[26 : 31], Segment[31 : 32], Segment[31 : 33], Segment[31 : 3], Segment[2 : 31], Segment[31 : 5], Segment[31 : 25], Segment[4 : 31], Segment[31 : 34], Segment[36 : 31], Segment[31 : 37], Segment[35 : 31], Segment[31 : 15], Segment[8 : 31], Segment[31 : 1], Segment[6 : 31], Segment[31 : 7], Segment[31 : 12], Segment[31 : 0], Segment[14 : 31], Segment[16 : 31], Segment[9 : 31], Segment[31 : 24], Segment[11 : 31], Segment[31 : 17], Segment[31 : 18], Segment[20 : 31], Segment[21 : 31], Segment[13 : 31], Segment[23 : 31], Segment[10 : 31], Segment[22 : 31], Segment[31 : 19], Segment[31 : 38]]
}

32  s  [Segment[32 : 33], Segment[32 : 3], Segment[2 : 32], Segment[5 : 32], Segment[31 : 32], Segment[4 : 32], Segment[27 : 32], Segment[26 : 32], Segment[34 : 32], Segment[30 : 32], Segment[35 : 32], Segment[36 : 32], Segment[32 : 37], Segment[32 : 28], Segment[32 : 1], Segment[6 : 32], Segment[29 : 32], Segment[8 : 32], Segment[7 : 32], Segment[32 : 0], Segment[32 : 25], Segment[9 : 32], Segment[24 : 32], Segment[32 : 15], Segment[12 : 32], Segment[11 : 32], Segment[14 : 32], Segment[32 : 17], Segment[16 : 32], Segment[20 : 32], Segment[32 : 18], Segment[10 : 32], Segment[21 : 32], Segment[23 : 32], Segment[22 : 32], Segment[13 : 32], Segment[19 : 32], Segment[32 : 38]]

33  s  [Segment[32 : 33], Segment[33 : 3], Segment[2 : 33], Segment[5 : 33], Segment[4 : 33], Segment[27 : 33], Segment[31 : 33], Segment[26 : 33], Segment[34 : 33], Segment[35 : 33], Segment[36 : 33], Segment[37 : 33], Segment[6 : 33], Segment[33 : 1], Segment[30 : 33], Segment[33 : 28], Segment[7 : 33], Segment[8 : 33], Segment[29 : 33], Segment[33 : 0], Segment[25 : 33], Segment[9 : 33], Segment[24 : 33], Segment[33 : 15], Segment[12 : 33], Segment[11 : 33], Segment[14 : 33], Segment[33 : 17], Segment[16 : 33], Segment[10 : 33], Segment[20 : 33], Segment[18 : 33], Segment[21 : 33], Segment[23 : 33], Segment[22 : 33], Segment[13 : 33], Segment[19 : 33], Segment[33 : 38]]


0  s  [Segment[1 : 0], Segment[34 : 0], Segment[35 : 0], Segment[36 : 0], Segment[37 : 0], Segment[2 : 0], Segment[3 : 0], Segment[4 : 0], Segment[33 : 0], Segment[32 : 0], Segment[6 : 0], Segment[5 : 0], Segment[26 : 0], Segment[7 : 0], Segment[24 : 0], Segment[27 : 0], Segment[25 : 0], Segment[31 : 0], Segment[8 : 0], Segment[30 : 0], Segment[28 : 0], Segment[29 : 0], Segment[23 : 0], Segment[20 : 0], Segment[21 : 0], Segment[22 : 0], Segment[9 : 0], Segment[18 : 0], Segment[15 : 0], Segment[0 : 17], Segment[12 : 0], Segment[16 : 0], Segment[11 : 0], Segment[14 : 0], Segment[19 : 0], Segment[10 : 0], Segment[13 : 0], Segment[0 : 38]]

1  s  [Segment[1 : 0], Segment[34 : 1], Segment[35 : 1], Segment[36 : 1], Segment[37 : 1], Segment[2 : 1], Segment[3 : 1], Segment[4 : 1], Segment[33 : 1], Segment[32 : 1], Segment[5 : 1], Segment[6 : 1], Segment[26 : 1], Segment[27 : 1], Segment[7 : 1], Segment[24 : 1], Segment[25 : 1], Segment[31 : 1], Segment[8 : 1], Segment[30 : 1], Segment[28 : 1], Segment[29 : 1], Segment[23 : 1], Segment[20 : 1], Segment[21 : 1], Segment[9 : 1], Segment[22 : 1], Segment[15 : 1], Segment[18 : 1], Segment[1 : 17], Segment[12 : 1], Segment[16 : 1], Segment[11 : 1], Segment[14 : 1], Segment[19 : 1], Segment[10 : 1], Segment[13 : 1], Segment[1 : 38]]

34  s  [Segment[35 : 34], Segment[36 : 34], Segment[34 : 37], Segment[34 : 1], Segment[34 : 0], Segment[2 : 34], Segment[34 : 3], Segment[34 : 33], Segment[34 : 32], Segment[4 : 34], Segment[26 : 34], Segment[34 : 27], Segment[5 : 34], Segment[34 : 25], Segment[24 : 34], Segment[6 : 34], Segment[31 : 34], Segment[7 : 34], Segment[30 : 34], Segment[34 : 28], Segment[29 : 34], Segment[8 : 34], Segment[23 : 34], Segment[20 : 34], Segment[21 : 34], Segment[22 : 34], Segment[34 : 15], Segment[34 : 18], Segment[9 : 34], Segment[34 : 17], Segment[16 : 34], Segment[34 : 12], Segment[14 : 34], Segment[11 : 34], Segment[19 : 34], Segment[10 : 34], Segment[13 : 34], Segment[34 : 38]]

{
    35  s  [Segment[36 : 35], Segment[35 : 37], Segment[35 : 34], Segment[35 : 1], Segment[35 : 0], Segment[2 : 35], Segment[35 : 3], Segment[35 : 33], Segment[35 : 32], Segment[26 : 35], Segment[4 : 35], Segment[35 : 27], Segment[35 : 24], Segment[35 : 25], Segment[35 : 5], Segment[6 : 35], Segment[35 : 31], Segment[35 : 7], Segment[30 : 35], Segment[35 : 28], Segment[29 : 35], Segment[8 : 35], Segment[23 : 35], Segment[20 : 35], Segment[21 : 35], Segment[22 : 35], Segment[35 : 18], Segment[35 : 15], Segment[35 : 17], Segment[9 : 35], Segment[16 : 35], Segment[35 : 12], Segment[14 : 35], Segment[35 : 19], Segment[11 : 35], Segment[10 : 35], Segment[13 : 35], Segment[35 : 38]]

    36  s  [Segment[36 : 37], Segment[36 : 35], Segment[36 : 34], Segment[36 : 1], Segment[36 : 0], Segment[36 : 2], Segment[36 : 3], Segment[36 : 33], Segment[36 : 32], Segment[26 : 36], Segment[4 : 36], Segment[36 : 27], Segment[36 : 24], Segment[36 : 25], Segment[36 : 5], Segment[6 : 36], Segment[36 : 31], Segment[30 : 36], Segment[36 : 28], Segment[36 : 7], Segment[29 : 36], Segment[8 : 36], Segment[23 : 36], Segment[20 : 36], Segment[36 : 21], Segment[22 : 36], Segment[36 : 18], Segment[36 : 15], Segment[36 : 17], Segment[9 : 36], Segment[16 : 36], Segment[36 : 12], Segment[14 : 36], Segment[36 : 19], Segment[11 : 36], Segment[10 : 36], Segment[36 : 13], Segment[36 : 38]]

    37  s  [Segment[36 : 37], Segment[35 : 37], Segment[34 : 37], Segment[37 : 1], Segment[37 : 0], Segment[2 : 37], Segment[37 : 3], Segment[37 : 33], Segment[32 : 37], Segment[26 : 37], Segment[4 : 37], Segment[27 : 37], Segment[24 : 37], Segment[37 : 25], Segment[5 : 37], Segment[6 : 37], Segment[31 : 37], Segment[37 : 28], Segment[30 : 37], Segment[7 : 37], Segment[29 : 37], Segment[8 : 37], Segment[23 : 37], Segment[20 : 37], Segment[21 : 37], Segment[22 : 37], Segment[37 : 18], Segment[37 : 15], Segment[37 : 17], Segment[9 : 37], Segment[16 : 37], Segment[12 : 37], Segment[14 : 37], Segment[19 : 37], Segment[11 : 37], Segment[10 : 37], Segment[13 : 37], Segment[37 : 38]]
}


