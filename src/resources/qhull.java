/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package resources;

public class qhull implements qhullConstants {
  public static SWIGTYPE_p_int new_intp() {
    long cPtr = qhullJNI.new_intp();
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static SWIGTYPE_p_int copy_intp(int value) {
    long cPtr = qhullJNI.copy_intp(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static void delete_intp(SWIGTYPE_p_int obj) {
    qhullJNI.delete_intp(SWIGTYPE_p_int.getCPtr(obj));
  }

  public static void intp_assign(SWIGTYPE_p_int obj, int value) {
    qhullJNI.intp_assign(SWIGTYPE_p_int.getCPtr(obj), value);
  }

  public static int intp_value(SWIGTYPE_p_int obj) {
    return qhullJNI.intp_value(SWIGTYPE_p_int.getCPtr(obj));
  }

  public static void qh_qhull() {
    qhullJNI.qh_qhull();
  }

  public static SWIGTYPE_p_boolT qh_addpoint(SWIGTYPE_p_pointT furthest, SWIGTYPE_p_facetT facet, SWIGTYPE_p_boolT checkdist) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_addpoint(SWIGTYPE_p_pointT.getCPtr(furthest), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_boolT.getCPtr(checkdist)), true);
  }

  public static void qh_build_withrestart() {
    qhullJNI.qh_build_withrestart();
  }

  public static SWIGTYPE_p_vertexT qh_buildcone(SWIGTYPE_p_pointT furthest, SWIGTYPE_p_facetT facet, int goodhorizon, SWIGTYPE_p_p_facetT retryfacet) {
    long cPtr = qhullJNI.qh_buildcone(SWIGTYPE_p_pointT.getCPtr(furthest), SWIGTYPE_p_facetT.getCPtr(facet), goodhorizon, SWIGTYPE_p_p_facetT.getCPtr(retryfacet));
    return (cPtr == 0) ? null : new SWIGTYPE_p_vertexT(cPtr, false);
  }

  public static SWIGTYPE_p_boolT qh_buildcone_mergepinched(SWIGTYPE_p_vertexT apex, SWIGTYPE_p_facetT facet, SWIGTYPE_p_p_facetT retryfacet) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_buildcone_mergepinched(SWIGTYPE_p_vertexT.getCPtr(apex), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_p_facetT.getCPtr(retryfacet)), true);
  }

  public static SWIGTYPE_p_boolT qh_buildcone_onlygood(SWIGTYPE_p_vertexT apex, int goodhorizon) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_buildcone_onlygood(SWIGTYPE_p_vertexT.getCPtr(apex), goodhorizon), true);
  }

  public static void qh_buildhull() {
    qhullJNI.qh_buildhull();
  }

  public static void qh_buildtracing(SWIGTYPE_p_pointT furthest, SWIGTYPE_p_facetT facet) {
    qhullJNI.qh_buildtracing(SWIGTYPE_p_pointT.getCPtr(furthest), SWIGTYPE_p_facetT.getCPtr(facet));
  }

  public static void qh_errexit2(int exitcode, SWIGTYPE_p_facetT facet, SWIGTYPE_p_facetT otherfacet) {
    qhullJNI.qh_errexit2(exitcode, SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_facetT.getCPtr(otherfacet));
  }

  public static void qh_findhorizon(SWIGTYPE_p_pointT point, SWIGTYPE_p_facetT facet, SWIGTYPE_p_int goodvisible, SWIGTYPE_p_int goodhorizon) {
    qhullJNI.qh_findhorizon(SWIGTYPE_p_pointT.getCPtr(point), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_int.getCPtr(goodvisible), SWIGTYPE_p_int.getCPtr(goodhorizon));
  }

  public static SWIGTYPE_p_pointT qh_nextfurthest(SWIGTYPE_p_p_facetT visible) {
    long cPtr = qhullJNI.qh_nextfurthest(SWIGTYPE_p_p_facetT.getCPtr(visible));
    return (cPtr == 0) ? null : new SWIGTYPE_p_pointT(cPtr, false);
  }

  public static void qh_partitionall(setT vertices, SWIGTYPE_p_pointT points, int npoints) {
    qhullJNI.qh_partitionall(setT.getCPtr(vertices), vertices, SWIGTYPE_p_pointT.getCPtr(points), npoints);
  }

  public static void qh_partitioncoplanar(SWIGTYPE_p_pointT point, SWIGTYPE_p_facetT facet, SWIGTYPE_p_double dist, SWIGTYPE_p_boolT allnew) {
    qhullJNI.qh_partitioncoplanar(SWIGTYPE_p_pointT.getCPtr(point), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_double.getCPtr(dist), SWIGTYPE_p_boolT.getCPtr(allnew));
  }

  public static void qh_partitionpoint(SWIGTYPE_p_pointT point, SWIGTYPE_p_facetT facet) {
    qhullJNI.qh_partitionpoint(SWIGTYPE_p_pointT.getCPtr(point), SWIGTYPE_p_facetT.getCPtr(facet));
  }

  public static void qh_partitionvisible(SWIGTYPE_p_boolT allpoints, SWIGTYPE_p_int numpoints) {
    qhullJNI.qh_partitionvisible(SWIGTYPE_p_boolT.getCPtr(allpoints), SWIGTYPE_p_int.getCPtr(numpoints));
  }

  public static void qh_joggle_restart(String reason) {
    qhullJNI.qh_joggle_restart(reason);
  }

  public static void qh_printsummary(SWIGTYPE_p_FILE fp) {
    qhullJNI.qh_printsummary(SWIGTYPE_p_FILE.getCPtr(fp));
  }

  public static void qh_appendprint(SWIGTYPE_p_qh_PRINT format) {
    qhullJNI.qh_appendprint(SWIGTYPE_p_qh_PRINT.getCPtr(format));
  }

  public static void qh_freebuild(SWIGTYPE_p_boolT allmem) {
    qhullJNI.qh_freebuild(SWIGTYPE_p_boolT.getCPtr(allmem));
  }

  public static void qh_freebuffers() {
    qhullJNI.qh_freebuffers();
  }

  public static void qh_init_A(SWIGTYPE_p_FILE infile, SWIGTYPE_p_FILE outfile, SWIGTYPE_p_FILE errfile, int argc, SWIGTYPE_p_p_char argv) {
    qhullJNI.qh_init_A(SWIGTYPE_p_FILE.getCPtr(infile), SWIGTYPE_p_FILE.getCPtr(outfile), SWIGTYPE_p_FILE.getCPtr(errfile), argc, SWIGTYPE_p_p_char.getCPtr(argv));
  }

  public static void qh_init_B(SWIGTYPE_p_coordT points, int numpoints, int dim, SWIGTYPE_p_boolT ismalloc) {
    qhullJNI.qh_init_B(SWIGTYPE_p_coordT.getCPtr(points), numpoints, dim, SWIGTYPE_p_boolT.getCPtr(ismalloc));
  }

  public static void qh_allstatA() {
    qhullJNI.qh_allstatA();
  }

  public static void qh_allstatB() {
    qhullJNI.qh_allstatB();
  }

  public static void qh_allstatC() {
    qhullJNI.qh_allstatC();
  }

  public static void qh_allstatD() {
    qhullJNI.qh_allstatD();
  }

  public static void qh_allstatE() {
    qhullJNI.qh_allstatE();
  }

  public static void qh_allstatE2() {
    qhullJNI.qh_allstatE2();
  }

  public static void qh_allstatF() {
    qhullJNI.qh_allstatF();
  }

  public static void qh_allstatG() {
    qhullJNI.qh_allstatG();
  }

  public static void qh_allstatH() {
    qhullJNI.qh_allstatH();
  }

  public static void qh_backnormal(SWIGTYPE_p_p_double rows, int numrow, int numcol, SWIGTYPE_p_boolT sign, SWIGTYPE_p_coordT normal, SWIGTYPE_p_boolT nearzero) {
    qhullJNI.qh_backnormal(SWIGTYPE_p_p_double.getCPtr(rows), numrow, numcol, SWIGTYPE_p_boolT.getCPtr(sign), SWIGTYPE_p_coordT.getCPtr(normal), SWIGTYPE_p_boolT.getCPtr(nearzero));
  }

  public static void qh_distplane(SWIGTYPE_p_pointT point, SWIGTYPE_p_facetT facet, SWIGTYPE_p_double dist) {
    qhullJNI.qh_distplane(SWIGTYPE_p_pointT.getCPtr(point), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_double.getCPtr(dist));
  }

  public static SWIGTYPE_p_facetT qh_findbest(SWIGTYPE_p_pointT point, SWIGTYPE_p_facetT startfacet, SWIGTYPE_p_boolT bestoutside, SWIGTYPE_p_boolT isnewfacets, SWIGTYPE_p_boolT noupper, SWIGTYPE_p_double dist, SWIGTYPE_p_boolT isoutside, SWIGTYPE_p_int numpart) {
    long cPtr = qhullJNI.qh_findbest(SWIGTYPE_p_pointT.getCPtr(point), SWIGTYPE_p_facetT.getCPtr(startfacet), SWIGTYPE_p_boolT.getCPtr(bestoutside), SWIGTYPE_p_boolT.getCPtr(isnewfacets), SWIGTYPE_p_boolT.getCPtr(noupper), SWIGTYPE_p_double.getCPtr(dist), SWIGTYPE_p_boolT.getCPtr(isoutside), SWIGTYPE_p_int.getCPtr(numpart));
    return (cPtr == 0) ? null : new SWIGTYPE_p_facetT(cPtr, false);
  }

  public static SWIGTYPE_p_facetT qh_findbesthorizon(SWIGTYPE_p_boolT ischeckmax, SWIGTYPE_p_pointT point, SWIGTYPE_p_facetT startfacet, SWIGTYPE_p_boolT noupper, SWIGTYPE_p_double bestdist, SWIGTYPE_p_int numpart) {
    long cPtr = qhullJNI.qh_findbesthorizon(SWIGTYPE_p_boolT.getCPtr(ischeckmax), SWIGTYPE_p_pointT.getCPtr(point), SWIGTYPE_p_facetT.getCPtr(startfacet), SWIGTYPE_p_boolT.getCPtr(noupper), SWIGTYPE_p_double.getCPtr(bestdist), SWIGTYPE_p_int.getCPtr(numpart));
    return (cPtr == 0) ? null : new SWIGTYPE_p_facetT(cPtr, false);
  }

  public static SWIGTYPE_p_facetT qh_findbestnew(SWIGTYPE_p_pointT point, SWIGTYPE_p_facetT startfacet, SWIGTYPE_p_double dist, SWIGTYPE_p_boolT bestoutside, SWIGTYPE_p_boolT isoutside, SWIGTYPE_p_int numpart) {
    long cPtr = qhullJNI.qh_findbestnew(SWIGTYPE_p_pointT.getCPtr(point), SWIGTYPE_p_facetT.getCPtr(startfacet), SWIGTYPE_p_double.getCPtr(dist), SWIGTYPE_p_boolT.getCPtr(bestoutside), SWIGTYPE_p_boolT.getCPtr(isoutside), SWIGTYPE_p_int.getCPtr(numpart));
    return (cPtr == 0) ? null : new SWIGTYPE_p_facetT(cPtr, false);
  }

  public static void qh_gausselim(SWIGTYPE_p_p_double rows, int numrow, int numcol, SWIGTYPE_p_boolT sign, SWIGTYPE_p_boolT nearzero) {
    qhullJNI.qh_gausselim(SWIGTYPE_p_p_double.getCPtr(rows), numrow, numcol, SWIGTYPE_p_boolT.getCPtr(sign), SWIGTYPE_p_boolT.getCPtr(nearzero));
  }

  public static double qh_getangle(SWIGTYPE_p_pointT vect1, SWIGTYPE_p_pointT vect2) {
    return qhullJNI.qh_getangle(SWIGTYPE_p_pointT.getCPtr(vect1), SWIGTYPE_p_pointT.getCPtr(vect2));
  }

  public static SWIGTYPE_p_pointT qh_getcenter(setT vertices) {
    long cPtr = qhullJNI.qh_getcenter(setT.getCPtr(vertices), vertices);
    return (cPtr == 0) ? null : new SWIGTYPE_p_pointT(cPtr, false);
  }

  public static SWIGTYPE_p_pointT qh_getcentrum(SWIGTYPE_p_facetT facet) {
    long cPtr = qhullJNI.qh_getcentrum(SWIGTYPE_p_facetT.getCPtr(facet));
    return (cPtr == 0) ? null : new SWIGTYPE_p_pointT(cPtr, false);
  }

  public static SWIGTYPE_p_coordT qh_getdistance(SWIGTYPE_p_facetT facet, SWIGTYPE_p_facetT neighbor, SWIGTYPE_p_coordT mindist, SWIGTYPE_p_coordT maxdist) {
    return new SWIGTYPE_p_coordT(qhullJNI.qh_getdistance(SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_facetT.getCPtr(neighbor), SWIGTYPE_p_coordT.getCPtr(mindist), SWIGTYPE_p_coordT.getCPtr(maxdist)), true);
  }

  public static void qh_normalize(SWIGTYPE_p_coordT normal, int dim, SWIGTYPE_p_boolT toporient) {
    qhullJNI.qh_normalize(SWIGTYPE_p_coordT.getCPtr(normal), dim, SWIGTYPE_p_boolT.getCPtr(toporient));
  }

  public static void qh_normalize2(SWIGTYPE_p_coordT normal, int dim, SWIGTYPE_p_boolT toporient, SWIGTYPE_p_double minnorm, SWIGTYPE_p_boolT ismin) {
    qhullJNI.qh_normalize2(SWIGTYPE_p_coordT.getCPtr(normal), dim, SWIGTYPE_p_boolT.getCPtr(toporient), SWIGTYPE_p_double.getCPtr(minnorm), SWIGTYPE_p_boolT.getCPtr(ismin));
  }

  public static SWIGTYPE_p_pointT qh_projectpoint(SWIGTYPE_p_pointT point, SWIGTYPE_p_facetT facet, double dist) {
    long cPtr = qhullJNI.qh_projectpoint(SWIGTYPE_p_pointT.getCPtr(point), SWIGTYPE_p_facetT.getCPtr(facet), dist);
    return (cPtr == 0) ? null : new SWIGTYPE_p_pointT(cPtr, false);
  }

  public static void qh_setfacetplane(SWIGTYPE_p_facetT newfacets) {
    qhullJNI.qh_setfacetplane(SWIGTYPE_p_facetT.getCPtr(newfacets));
  }

  public static void qh_sethyperplane_det(int dim, SWIGTYPE_p_p_coordT rows, SWIGTYPE_p_coordT point0, SWIGTYPE_p_boolT toporient, SWIGTYPE_p_coordT normal, SWIGTYPE_p_double offset, SWIGTYPE_p_boolT nearzero) {
    qhullJNI.qh_sethyperplane_det(dim, SWIGTYPE_p_p_coordT.getCPtr(rows), SWIGTYPE_p_coordT.getCPtr(point0), SWIGTYPE_p_boolT.getCPtr(toporient), SWIGTYPE_p_coordT.getCPtr(normal), SWIGTYPE_p_double.getCPtr(offset), SWIGTYPE_p_boolT.getCPtr(nearzero));
  }

  public static void qh_sethyperplane_gauss(int dim, SWIGTYPE_p_p_coordT rows, SWIGTYPE_p_pointT point0, SWIGTYPE_p_boolT toporient, SWIGTYPE_p_coordT normal, SWIGTYPE_p_coordT offset, SWIGTYPE_p_boolT nearzero) {
    qhullJNI.qh_sethyperplane_gauss(dim, SWIGTYPE_p_p_coordT.getCPtr(rows), SWIGTYPE_p_pointT.getCPtr(point0), SWIGTYPE_p_boolT.getCPtr(toporient), SWIGTYPE_p_coordT.getCPtr(normal), SWIGTYPE_p_coordT.getCPtr(offset), SWIGTYPE_p_boolT.getCPtr(nearzero));
  }

  public static SWIGTYPE_p_boolT qh_sharpnewfacets() {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_sharpnewfacets(), true);
  }

  public static SWIGTYPE_p_coordT qh_copypoints(SWIGTYPE_p_coordT points, int numpoints, int dimension) {
    long cPtr = qhullJNI.qh_copypoints(SWIGTYPE_p_coordT.getCPtr(points), numpoints, dimension);
    return (cPtr == 0) ? null : new SWIGTYPE_p_coordT(cPtr, false);
  }

  public static void qh_crossproduct(int dim, SWIGTYPE_p_double vecA, SWIGTYPE_p_double vecB, SWIGTYPE_p_double vecC) {
    qhullJNI.qh_crossproduct(dim, SWIGTYPE_p_double.getCPtr(vecA), SWIGTYPE_p_double.getCPtr(vecB), SWIGTYPE_p_double.getCPtr(vecC));
  }

  public static double qh_determinant(SWIGTYPE_p_p_double rows, int dim, SWIGTYPE_p_boolT nearzero) {
    return qhullJNI.qh_determinant(SWIGTYPE_p_p_double.getCPtr(rows), dim, SWIGTYPE_p_boolT.getCPtr(nearzero));
  }

  public static double qh_detjoggle(SWIGTYPE_p_pointT points, int numpoints, int dimension) {
    return qhullJNI.qh_detjoggle(SWIGTYPE_p_pointT.getCPtr(points), numpoints, dimension);
  }

  public static void qh_detmaxoutside() {
    qhullJNI.qh_detmaxoutside();
  }

  public static void qh_detroundoff() {
    qhullJNI.qh_detroundoff();
  }

  public static double qh_detsimplex(SWIGTYPE_p_pointT apex, setT points, int dim, SWIGTYPE_p_boolT nearzero) {
    return qhullJNI.qh_detsimplex(SWIGTYPE_p_pointT.getCPtr(apex), setT.getCPtr(points), points, dim, SWIGTYPE_p_boolT.getCPtr(nearzero));
  }

  public static double qh_distnorm(int dim, SWIGTYPE_p_pointT point, SWIGTYPE_p_pointT normal, SWIGTYPE_p_double offsetp) {
    return qhullJNI.qh_distnorm(dim, SWIGTYPE_p_pointT.getCPtr(point), SWIGTYPE_p_pointT.getCPtr(normal), SWIGTYPE_p_double.getCPtr(offsetp));
  }

  public static double qh_distround(int dimension, double maxabs, double maxsumabs) {
    return qhullJNI.qh_distround(dimension, maxabs, maxsumabs);
  }

  public static double qh_divzero(double numer, double denom, double mindenom1, SWIGTYPE_p_boolT zerodiv) {
    return qhullJNI.qh_divzero(numer, denom, mindenom1, SWIGTYPE_p_boolT.getCPtr(zerodiv));
  }

  public static double qh_facetarea(SWIGTYPE_p_facetT facet) {
    return qhullJNI.qh_facetarea(SWIGTYPE_p_facetT.getCPtr(facet));
  }

  public static double qh_facetarea_simplex(int dim, SWIGTYPE_p_coordT apex, setT vertices, SWIGTYPE_p_vertexT notvertex, SWIGTYPE_p_boolT toporient, SWIGTYPE_p_coordT normal, SWIGTYPE_p_double offset) {
    return qhullJNI.qh_facetarea_simplex(dim, SWIGTYPE_p_coordT.getCPtr(apex), setT.getCPtr(vertices), vertices, SWIGTYPE_p_vertexT.getCPtr(notvertex), SWIGTYPE_p_boolT.getCPtr(toporient), SWIGTYPE_p_coordT.getCPtr(normal), SWIGTYPE_p_double.getCPtr(offset));
  }

  public static SWIGTYPE_p_pointT qh_facetcenter(setT vertices) {
    long cPtr = qhullJNI.qh_facetcenter(setT.getCPtr(vertices), vertices);
    return (cPtr == 0) ? null : new SWIGTYPE_p_pointT(cPtr, false);
  }

  public static SWIGTYPE_p_facetT qh_findgooddist(SWIGTYPE_p_pointT point, SWIGTYPE_p_facetT facetA, SWIGTYPE_p_double distp, SWIGTYPE_p_p_facetT facetlist) {
    long cPtr = qhullJNI.qh_findgooddist(SWIGTYPE_p_pointT.getCPtr(point), SWIGTYPE_p_facetT.getCPtr(facetA), SWIGTYPE_p_double.getCPtr(distp), SWIGTYPE_p_p_facetT.getCPtr(facetlist));
    return (cPtr == 0) ? null : new SWIGTYPE_p_facetT(cPtr, false);
  }

  public static SWIGTYPE_p_vertexT qh_furthestnewvertex(long unvisited, SWIGTYPE_p_facetT facet, SWIGTYPE_p_double maxdistp) {
    long cPtr = qhullJNI.qh_furthestnewvertex(unvisited, SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_double.getCPtr(maxdistp));
    return (cPtr == 0) ? null : new SWIGTYPE_p_vertexT(cPtr, false);
  }

  public static SWIGTYPE_p_vertexT qh_furthestvertex(SWIGTYPE_p_facetT facetA, SWIGTYPE_p_facetT facetB, SWIGTYPE_p_double maxdistp, SWIGTYPE_p_double mindistp) {
    long cPtr = qhullJNI.qh_furthestvertex(SWIGTYPE_p_facetT.getCPtr(facetA), SWIGTYPE_p_facetT.getCPtr(facetB), SWIGTYPE_p_double.getCPtr(maxdistp), SWIGTYPE_p_double.getCPtr(mindistp));
    return (cPtr == 0) ? null : new SWIGTYPE_p_vertexT(cPtr, false);
  }

  public static void qh_getarea(SWIGTYPE_p_facetT facetlist) {
    qhullJNI.qh_getarea(SWIGTYPE_p_facetT.getCPtr(facetlist));
  }

  public static SWIGTYPE_p_boolT qh_gram_schmidt(int dim, SWIGTYPE_p_p_double rows) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_gram_schmidt(dim, SWIGTYPE_p_p_double.getCPtr(rows)), true);
  }

  public static SWIGTYPE_p_boolT qh_inthresholds(SWIGTYPE_p_coordT normal, SWIGTYPE_p_double angle) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_inthresholds(SWIGTYPE_p_coordT.getCPtr(normal), SWIGTYPE_p_double.getCPtr(angle)), true);
  }

  public static void qh_joggleinput() {
    qhullJNI.qh_joggleinput();
  }

  public static SWIGTYPE_p_double qh_maxabsval(SWIGTYPE_p_double normal, int dim) {
    long cPtr = qhullJNI.qh_maxabsval(SWIGTYPE_p_double.getCPtr(normal), dim);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public static setT qh_maxmin(SWIGTYPE_p_pointT points, int numpoints, int dimension) {
    long cPtr = qhullJNI.qh_maxmin(SWIGTYPE_p_pointT.getCPtr(points), numpoints, dimension);
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static double qh_maxouter() {
    return qhullJNI.qh_maxouter();
  }

  public static void qh_maxsimplex(int dim, setT maxpoints, SWIGTYPE_p_pointT points, int numpoints, SWIGTYPE_p_p_setT simplex) {
    qhullJNI.qh_maxsimplex(dim, setT.getCPtr(maxpoints), maxpoints, SWIGTYPE_p_pointT.getCPtr(points), numpoints, SWIGTYPE_p_p_setT.getCPtr(simplex));
  }

  public static double qh_minabsval(SWIGTYPE_p_double normal, int dim) {
    return qhullJNI.qh_minabsval(SWIGTYPE_p_double.getCPtr(normal), dim);
  }

  public static int qh_mindiff(SWIGTYPE_p_double vecA, SWIGTYPE_p_double vecB, int dim) {
    return qhullJNI.qh_mindiff(SWIGTYPE_p_double.getCPtr(vecA), SWIGTYPE_p_double.getCPtr(vecB), dim);
  }

  public static SWIGTYPE_p_boolT qh_orientoutside(SWIGTYPE_p_facetT facet) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_orientoutside(SWIGTYPE_p_facetT.getCPtr(facet)), true);
  }

  public static void qh_outerinner(SWIGTYPE_p_facetT facet, SWIGTYPE_p_double outerplane, SWIGTYPE_p_double innerplane) {
    qhullJNI.qh_outerinner(SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_double.getCPtr(outerplane), SWIGTYPE_p_double.getCPtr(innerplane));
  }

  public static SWIGTYPE_p_coordT qh_pointdist(SWIGTYPE_p_pointT point1, SWIGTYPE_p_pointT point2, int dim) {
    return new SWIGTYPE_p_coordT(qhullJNI.qh_pointdist(SWIGTYPE_p_pointT.getCPtr(point1), SWIGTYPE_p_pointT.getCPtr(point2), dim), true);
  }

  public static void qh_printmatrix(SWIGTYPE_p_FILE fp, String string, SWIGTYPE_p_p_double rows, int numrow, int numcol) {
    qhullJNI.qh_printmatrix(SWIGTYPE_p_FILE.getCPtr(fp), string, SWIGTYPE_p_p_double.getCPtr(rows), numrow, numcol);
  }

  public static void qh_printpoints(SWIGTYPE_p_FILE fp, String string, setT points) {
    qhullJNI.qh_printpoints(SWIGTYPE_p_FILE.getCPtr(fp), string, setT.getCPtr(points), points);
  }

  public static void qh_projectinput() {
    qhullJNI.qh_projectinput();
  }

  public static void qh_projectpoints(SWIGTYPE_p_signed_char project, int n, SWIGTYPE_p_double points, int numpoints, int dim, SWIGTYPE_p_double newpoints, int newdim) {
    qhullJNI.qh_projectpoints(SWIGTYPE_p_signed_char.getCPtr(project), n, SWIGTYPE_p_double.getCPtr(points), numpoints, dim, SWIGTYPE_p_double.getCPtr(newpoints), newdim);
  }

  public static void qh_rotateinput(SWIGTYPE_p_p_double rows) {
    qhullJNI.qh_rotateinput(SWIGTYPE_p_p_double.getCPtr(rows));
  }

  public static void qh_rotatepoints(SWIGTYPE_p_double points, int numpoints, int dim, SWIGTYPE_p_p_double rows) {
    qhullJNI.qh_rotatepoints(SWIGTYPE_p_double.getCPtr(points), numpoints, dim, SWIGTYPE_p_p_double.getCPtr(rows));
  }

  public static void qh_scaleinput() {
    qhullJNI.qh_scaleinput();
  }

  public static void qh_scalelast(SWIGTYPE_p_coordT points, int numpoints, int dim, SWIGTYPE_p_coordT low, SWIGTYPE_p_coordT high, SWIGTYPE_p_coordT newhigh) {
    qhullJNI.qh_scalelast(SWIGTYPE_p_coordT.getCPtr(points), numpoints, dim, SWIGTYPE_p_coordT.getCPtr(low), SWIGTYPE_p_coordT.getCPtr(high), SWIGTYPE_p_coordT.getCPtr(newhigh));
  }

  public static void qh_scalepoints(SWIGTYPE_p_pointT points, int numpoints, int dim, SWIGTYPE_p_double newlows, SWIGTYPE_p_double newhighs) {
    qhullJNI.qh_scalepoints(SWIGTYPE_p_pointT.getCPtr(points), numpoints, dim, SWIGTYPE_p_double.getCPtr(newlows), SWIGTYPE_p_double.getCPtr(newhighs));
  }

  public static SWIGTYPE_p_boolT qh_sethalfspace(int dim, SWIGTYPE_p_coordT coords, SWIGTYPE_p_p_coordT nextp, SWIGTYPE_p_coordT normal, SWIGTYPE_p_coordT offset, SWIGTYPE_p_coordT feasible) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_sethalfspace(dim, SWIGTYPE_p_coordT.getCPtr(coords), SWIGTYPE_p_p_coordT.getCPtr(nextp), SWIGTYPE_p_coordT.getCPtr(normal), SWIGTYPE_p_coordT.getCPtr(offset), SWIGTYPE_p_coordT.getCPtr(feasible)), true);
  }

  public static SWIGTYPE_p_coordT qh_sethalfspace_all(int dim, int count, SWIGTYPE_p_coordT halfspaces, SWIGTYPE_p_pointT feasible) {
    long cPtr = qhullJNI.qh_sethalfspace_all(dim, count, SWIGTYPE_p_coordT.getCPtr(halfspaces), SWIGTYPE_p_pointT.getCPtr(feasible));
    return (cPtr == 0) ? null : new SWIGTYPE_p_coordT(cPtr, false);
  }

  public static SWIGTYPE_p_coordT qh_vertex_bestdist(setT vertices) {
    return new SWIGTYPE_p_coordT(qhullJNI.qh_vertex_bestdist(setT.getCPtr(vertices), vertices), true);
  }

  public static SWIGTYPE_p_coordT qh_vertex_bestdist2(setT vertices, SWIGTYPE_p_p_vertexT vertexp, SWIGTYPE_p_p_vertexT vertexp2) {
    return new SWIGTYPE_p_coordT(qhullJNI.qh_vertex_bestdist2(setT.getCPtr(vertices), vertices, SWIGTYPE_p_p_vertexT.getCPtr(vertexp), SWIGTYPE_p_p_vertexT.getCPtr(vertexp2)), true);
  }

  public static SWIGTYPE_p_pointT qh_voronoi_center(int dim, setT points) {
    long cPtr = qhullJNI.qh_voronoi_center(dim, setT.getCPtr(points), points);
    return (cPtr == 0) ? null : new SWIGTYPE_p_pointT(cPtr, false);
  }

  public static void qh_dfacet(long id) {
    qhullJNI.qh_dfacet(id);
  }

  public static void qh_dvertex(long id) {
    qhullJNI.qh_dvertex(id);
  }

  public static int qh_compare_facetarea(SWIGTYPE_p_void p1, SWIGTYPE_p_void p2) {
    return qhullJNI.qh_compare_facetarea(SWIGTYPE_p_void.getCPtr(p1), SWIGTYPE_p_void.getCPtr(p2));
  }

  public static int qh_compare_facetvisit(SWIGTYPE_p_void p1, SWIGTYPE_p_void p2) {
    return qhullJNI.qh_compare_facetvisit(SWIGTYPE_p_void.getCPtr(p1), SWIGTYPE_p_void.getCPtr(p2));
  }

  public static int qh_compare_nummerge(SWIGTYPE_p_void p1, SWIGTYPE_p_void p2) {
    return qhullJNI.qh_compare_nummerge(SWIGTYPE_p_void.getCPtr(p1), SWIGTYPE_p_void.getCPtr(p2));
  }

  public static void qh_copyfilename(String filename, int size, String source, int length) {
    qhullJNI.qh_copyfilename(filename, size, source, length);
  }

  public static void qh_countfacets(SWIGTYPE_p_facetT facetlist, setT facets, SWIGTYPE_p_boolT printall, SWIGTYPE_p_int numfacetsp, SWIGTYPE_p_int numsimplicialp, SWIGTYPE_p_int totneighborsp, SWIGTYPE_p_int numridgesp, SWIGTYPE_p_int numcoplanarsp, SWIGTYPE_p_int numnumtricoplanarsp) {
    qhullJNI.qh_countfacets(SWIGTYPE_p_facetT.getCPtr(facetlist), setT.getCPtr(facets), facets, SWIGTYPE_p_boolT.getCPtr(printall), SWIGTYPE_p_int.getCPtr(numfacetsp), SWIGTYPE_p_int.getCPtr(numsimplicialp), SWIGTYPE_p_int.getCPtr(totneighborsp), SWIGTYPE_p_int.getCPtr(numridgesp), SWIGTYPE_p_int.getCPtr(numcoplanarsp), SWIGTYPE_p_int.getCPtr(numnumtricoplanarsp));
  }

  public static SWIGTYPE_p_pointT qh_detvnorm(SWIGTYPE_p_vertexT vertex, SWIGTYPE_p_vertexT vertexA, setT centers, SWIGTYPE_p_double offsetp) {
    long cPtr = qhullJNI.qh_detvnorm(SWIGTYPE_p_vertexT.getCPtr(vertex), SWIGTYPE_p_vertexT.getCPtr(vertexA), setT.getCPtr(centers), centers, SWIGTYPE_p_double.getCPtr(offsetp));
    return (cPtr == 0) ? null : new SWIGTYPE_p_pointT(cPtr, false);
  }

  public static setT qh_detvridge(SWIGTYPE_p_vertexT vertex) {
    long cPtr = qhullJNI.qh_detvridge(SWIGTYPE_p_vertexT.getCPtr(vertex));
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static setT qh_detvridge3(SWIGTYPE_p_vertexT atvertex, SWIGTYPE_p_vertexT vertex) {
    long cPtr = qhullJNI.qh_detvridge3(SWIGTYPE_p_vertexT.getCPtr(atvertex), SWIGTYPE_p_vertexT.getCPtr(vertex));
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static int qh_eachvoronoi(SWIGTYPE_p_FILE fp, SWIGTYPE_p_f_p_FILE_p_vertexT_p_vertexT_p_struct_setT_boolT__void printvridge, SWIGTYPE_p_vertexT atvertex, SWIGTYPE_p_boolT visitall, qh_RIDGE innerouter, SWIGTYPE_p_boolT inorder) {
    return qhullJNI.qh_eachvoronoi(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_f_p_FILE_p_vertexT_p_vertexT_p_struct_setT_boolT__void.getCPtr(printvridge), SWIGTYPE_p_vertexT.getCPtr(atvertex), SWIGTYPE_p_boolT.getCPtr(visitall), innerouter.swigValue(), SWIGTYPE_p_boolT.getCPtr(inorder));
  }

  public static int qh_eachvoronoi_all(SWIGTYPE_p_FILE fp, SWIGTYPE_p_f_p_FILE_p_vertexT_p_vertexT_p_struct_setT_boolT__void printvridge, SWIGTYPE_p_boolT isUpper, qh_RIDGE innerouter, SWIGTYPE_p_boolT inorder) {
    return qhullJNI.qh_eachvoronoi_all(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_f_p_FILE_p_vertexT_p_vertexT_p_struct_setT_boolT__void.getCPtr(printvridge), SWIGTYPE_p_boolT.getCPtr(isUpper), innerouter.swigValue(), SWIGTYPE_p_boolT.getCPtr(inorder));
  }

  public static void qh_facet2point(SWIGTYPE_p_facetT facet, SWIGTYPE_p_p_pointT point0, SWIGTYPE_p_p_pointT point1, SWIGTYPE_p_double mindist) {
    qhullJNI.qh_facet2point(SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_p_pointT.getCPtr(point0), SWIGTYPE_p_p_pointT.getCPtr(point1), SWIGTYPE_p_double.getCPtr(mindist));
  }

  public static setT qh_facetvertices(SWIGTYPE_p_facetT facetlist, setT facets, SWIGTYPE_p_boolT allfacets) {
    long cPtr = qhullJNI.qh_facetvertices(SWIGTYPE_p_facetT.getCPtr(facetlist), setT.getCPtr(facets), facets, SWIGTYPE_p_boolT.getCPtr(allfacets));
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static void qh_geomplanes(SWIGTYPE_p_facetT facet, SWIGTYPE_p_double outerplane, SWIGTYPE_p_double innerplane) {
    qhullJNI.qh_geomplanes(SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_double.getCPtr(outerplane), SWIGTYPE_p_double.getCPtr(innerplane));
  }

  public static void qh_markkeep(SWIGTYPE_p_facetT facetlist) {
    qhullJNI.qh_markkeep(SWIGTYPE_p_facetT.getCPtr(facetlist));
  }

  public static setT qh_markvoronoi(SWIGTYPE_p_facetT facetlist, setT facets, SWIGTYPE_p_boolT printall, SWIGTYPE_p_boolT isLowerp, SWIGTYPE_p_int numcentersp) {
    long cPtr = qhullJNI.qh_markvoronoi(SWIGTYPE_p_facetT.getCPtr(facetlist), setT.getCPtr(facets), facets, SWIGTYPE_p_boolT.getCPtr(printall), SWIGTYPE_p_boolT.getCPtr(isLowerp), SWIGTYPE_p_int.getCPtr(numcentersp));
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static void qh_order_vertexneighbors(SWIGTYPE_p_vertexT vertex) {
    qhullJNI.qh_order_vertexneighbors(SWIGTYPE_p_vertexT.getCPtr(vertex));
  }

  public static void qh_prepare_output() {
    qhullJNI.qh_prepare_output();
  }

  public static void qh_printafacet(SWIGTYPE_p_FILE fp, SWIGTYPE_p_qh_PRINT format, SWIGTYPE_p_facetT facet, SWIGTYPE_p_boolT printall) {
    qhullJNI.qh_printafacet(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_qh_PRINT.getCPtr(format), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_boolT.getCPtr(printall));
  }

  public static void qh_printbegin(SWIGTYPE_p_FILE fp, SWIGTYPE_p_qh_PRINT format, SWIGTYPE_p_facetT facetlist, setT facets, SWIGTYPE_p_boolT printall) {
    qhullJNI.qh_printbegin(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_qh_PRINT.getCPtr(format), SWIGTYPE_p_facetT.getCPtr(facetlist), setT.getCPtr(facets), facets, SWIGTYPE_p_boolT.getCPtr(printall));
  }

  public static void qh_printcenter(SWIGTYPE_p_FILE fp, SWIGTYPE_p_qh_PRINT format, String string, SWIGTYPE_p_facetT facet) {
    qhullJNI.qh_printcenter(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_qh_PRINT.getCPtr(format), string, SWIGTYPE_p_facetT.getCPtr(facet));
  }

  public static void qh_printcentrum(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facet, double radius) {
    qhullJNI.qh_printcentrum(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facet), radius);
  }

  public static void qh_printend(SWIGTYPE_p_FILE fp, SWIGTYPE_p_qh_PRINT format, SWIGTYPE_p_facetT facetlist, setT facets, SWIGTYPE_p_boolT printall) {
    qhullJNI.qh_printend(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_qh_PRINT.getCPtr(format), SWIGTYPE_p_facetT.getCPtr(facetlist), setT.getCPtr(facets), facets, SWIGTYPE_p_boolT.getCPtr(printall));
  }

  public static void qh_printend4geom(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facet, SWIGTYPE_p_int num, SWIGTYPE_p_boolT printall) {
    qhullJNI.qh_printend4geom(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_int.getCPtr(num), SWIGTYPE_p_boolT.getCPtr(printall));
  }

  public static void qh_printextremes(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facetlist, setT facets, SWIGTYPE_p_boolT printall) {
    qhullJNI.qh_printextremes(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facetlist), setT.getCPtr(facets), facets, SWIGTYPE_p_boolT.getCPtr(printall));
  }

  public static void qh_printextremes_2d(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facetlist, setT facets, SWIGTYPE_p_boolT printall) {
    qhullJNI.qh_printextremes_2d(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facetlist), setT.getCPtr(facets), facets, SWIGTYPE_p_boolT.getCPtr(printall));
  }

  public static void qh_printextremes_d(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facetlist, setT facets, SWIGTYPE_p_boolT printall) {
    qhullJNI.qh_printextremes_d(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facetlist), setT.getCPtr(facets), facets, SWIGTYPE_p_boolT.getCPtr(printall));
  }

  public static void qh_printfacet(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facet) {
    qhullJNI.qh_printfacet(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facet));
  }

  public static void qh_printfacet2math(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facet, SWIGTYPE_p_qh_PRINT format, int notfirst) {
    qhullJNI.qh_printfacet2math(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_qh_PRINT.getCPtr(format), notfirst);
  }

  public static void qh_printfacet2geom(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facet, SWIGTYPE_p_double color) {
    qhullJNI.qh_printfacet2geom(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_double.getCPtr(color));
  }

  public static void qh_printfacet2geom_points(SWIGTYPE_p_FILE fp, SWIGTYPE_p_pointT point1, SWIGTYPE_p_pointT point2, SWIGTYPE_p_facetT facet, double offset, SWIGTYPE_p_double color) {
    qhullJNI.qh_printfacet2geom_points(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_pointT.getCPtr(point1), SWIGTYPE_p_pointT.getCPtr(point2), SWIGTYPE_p_facetT.getCPtr(facet), offset, SWIGTYPE_p_double.getCPtr(color));
  }

  public static void qh_printfacet3math(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facet, SWIGTYPE_p_qh_PRINT format, int notfirst) {
    qhullJNI.qh_printfacet3math(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_qh_PRINT.getCPtr(format), notfirst);
  }

  public static void qh_printfacet3geom_nonsimplicial(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facet, SWIGTYPE_p_double color) {
    qhullJNI.qh_printfacet3geom_nonsimplicial(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_double.getCPtr(color));
  }

  public static void qh_printfacet3geom_points(SWIGTYPE_p_FILE fp, setT points, SWIGTYPE_p_facetT facet, double offset, SWIGTYPE_p_double color) {
    qhullJNI.qh_printfacet3geom_points(SWIGTYPE_p_FILE.getCPtr(fp), setT.getCPtr(points), points, SWIGTYPE_p_facetT.getCPtr(facet), offset, SWIGTYPE_p_double.getCPtr(color));
  }

  public static void qh_printfacet3geom_simplicial(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facet, SWIGTYPE_p_double color) {
    qhullJNI.qh_printfacet3geom_simplicial(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_double.getCPtr(color));
  }

  public static void qh_printfacet3vertex(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facet, SWIGTYPE_p_qh_PRINT format) {
    qhullJNI.qh_printfacet3vertex(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_qh_PRINT.getCPtr(format));
  }

  public static void qh_printfacet4geom_nonsimplicial(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facet, SWIGTYPE_p_double color) {
    qhullJNI.qh_printfacet4geom_nonsimplicial(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_double.getCPtr(color));
  }

  public static void qh_printfacet4geom_simplicial(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facet, SWIGTYPE_p_double color) {
    qhullJNI.qh_printfacet4geom_simplicial(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_double.getCPtr(color));
  }

  public static void qh_printfacetNvertex_nonsimplicial(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facet, int id, SWIGTYPE_p_qh_PRINT format) {
    qhullJNI.qh_printfacetNvertex_nonsimplicial(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facet), id, SWIGTYPE_p_qh_PRINT.getCPtr(format));
  }

  public static void qh_printfacetNvertex_simplicial(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facet, SWIGTYPE_p_qh_PRINT format) {
    qhullJNI.qh_printfacetNvertex_simplicial(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_qh_PRINT.getCPtr(format));
  }

  public static void qh_printfacetheader(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facet) {
    qhullJNI.qh_printfacetheader(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facet));
  }

  public static void qh_printfacetridges(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facet) {
    qhullJNI.qh_printfacetridges(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facet));
  }

  public static void qh_printfacets(SWIGTYPE_p_FILE fp, SWIGTYPE_p_qh_PRINT format, SWIGTYPE_p_facetT facetlist, setT facets, SWIGTYPE_p_boolT printall) {
    qhullJNI.qh_printfacets(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_qh_PRINT.getCPtr(format), SWIGTYPE_p_facetT.getCPtr(facetlist), setT.getCPtr(facets), facets, SWIGTYPE_p_boolT.getCPtr(printall));
  }

  public static void qh_printhyperplaneintersection(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facet1, SWIGTYPE_p_facetT facet2, setT vertices, SWIGTYPE_p_double color) {
    qhullJNI.qh_printhyperplaneintersection(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facet1), SWIGTYPE_p_facetT.getCPtr(facet2), setT.getCPtr(vertices), vertices, SWIGTYPE_p_double.getCPtr(color));
  }

  public static void qh_printline3geom(SWIGTYPE_p_FILE fp, SWIGTYPE_p_pointT pointA, SWIGTYPE_p_pointT pointB, SWIGTYPE_p_double color) {
    qhullJNI.qh_printline3geom(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_pointT.getCPtr(pointA), SWIGTYPE_p_pointT.getCPtr(pointB), SWIGTYPE_p_double.getCPtr(color));
  }

  public static void qh_printneighborhood(SWIGTYPE_p_FILE fp, SWIGTYPE_p_qh_PRINT format, SWIGTYPE_p_facetT facetA, SWIGTYPE_p_facetT facetB, SWIGTYPE_p_boolT printall) {
    qhullJNI.qh_printneighborhood(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_qh_PRINT.getCPtr(format), SWIGTYPE_p_facetT.getCPtr(facetA), SWIGTYPE_p_facetT.getCPtr(facetB), SWIGTYPE_p_boolT.getCPtr(printall));
  }

  public static void qh_printpoint(SWIGTYPE_p_FILE fp, String string, SWIGTYPE_p_pointT point) {
    qhullJNI.qh_printpoint(SWIGTYPE_p_FILE.getCPtr(fp), string, SWIGTYPE_p_pointT.getCPtr(point));
  }

  public static void qh_printpointid(SWIGTYPE_p_FILE fp, String string, int dim, SWIGTYPE_p_pointT point, int id) {
    qhullJNI.qh_printpointid(SWIGTYPE_p_FILE.getCPtr(fp), string, dim, SWIGTYPE_p_pointT.getCPtr(point), id);
  }

  public static void qh_printpoint3(SWIGTYPE_p_FILE fp, SWIGTYPE_p_pointT point) {
    qhullJNI.qh_printpoint3(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_pointT.getCPtr(point));
  }

  public static void qh_printpoints_out(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facetlist, setT facets, SWIGTYPE_p_boolT printall) {
    qhullJNI.qh_printpoints_out(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facetlist), setT.getCPtr(facets), facets, SWIGTYPE_p_boolT.getCPtr(printall));
  }

  public static void qh_printpointvect(SWIGTYPE_p_FILE fp, SWIGTYPE_p_pointT point, SWIGTYPE_p_coordT normal, SWIGTYPE_p_pointT center, double radius, SWIGTYPE_p_double color) {
    qhullJNI.qh_printpointvect(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_pointT.getCPtr(point), SWIGTYPE_p_coordT.getCPtr(normal), SWIGTYPE_p_pointT.getCPtr(center), radius, SWIGTYPE_p_double.getCPtr(color));
  }

  public static void qh_printpointvect2(SWIGTYPE_p_FILE fp, SWIGTYPE_p_pointT point, SWIGTYPE_p_coordT normal, SWIGTYPE_p_pointT center, double radius) {
    qhullJNI.qh_printpointvect2(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_pointT.getCPtr(point), SWIGTYPE_p_coordT.getCPtr(normal), SWIGTYPE_p_pointT.getCPtr(center), radius);
  }

  public static void qh_printridge(SWIGTYPE_p_FILE fp, SWIGTYPE_p_ridgeT ridge) {
    qhullJNI.qh_printridge(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_ridgeT.getCPtr(ridge));
  }

  public static void qh_printspheres(SWIGTYPE_p_FILE fp, setT vertices, double radius) {
    qhullJNI.qh_printspheres(SWIGTYPE_p_FILE.getCPtr(fp), setT.getCPtr(vertices), vertices, radius);
  }

  public static void qh_printvdiagram(SWIGTYPE_p_FILE fp, SWIGTYPE_p_qh_PRINT format, SWIGTYPE_p_facetT facetlist, setT facets, SWIGTYPE_p_boolT printall) {
    qhullJNI.qh_printvdiagram(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_qh_PRINT.getCPtr(format), SWIGTYPE_p_facetT.getCPtr(facetlist), setT.getCPtr(facets), facets, SWIGTYPE_p_boolT.getCPtr(printall));
  }

  public static int qh_printvdiagram2(SWIGTYPE_p_FILE fp, SWIGTYPE_p_f_p_FILE_p_vertexT_p_vertexT_p_struct_setT_boolT__void printvridge, setT vertices, qh_RIDGE innerouter, SWIGTYPE_p_boolT inorder) {
    return qhullJNI.qh_printvdiagram2(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_f_p_FILE_p_vertexT_p_vertexT_p_struct_setT_boolT__void.getCPtr(printvridge), setT.getCPtr(vertices), vertices, innerouter.swigValue(), SWIGTYPE_p_boolT.getCPtr(inorder));
  }

  public static void qh_printvertex(SWIGTYPE_p_FILE fp, SWIGTYPE_p_vertexT vertex) {
    qhullJNI.qh_printvertex(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_vertexT.getCPtr(vertex));
  }

  public static void qh_printvertexlist(SWIGTYPE_p_FILE fp, String string, SWIGTYPE_p_facetT facetlist, setT facets, SWIGTYPE_p_boolT printall) {
    qhullJNI.qh_printvertexlist(SWIGTYPE_p_FILE.getCPtr(fp), string, SWIGTYPE_p_facetT.getCPtr(facetlist), setT.getCPtr(facets), facets, SWIGTYPE_p_boolT.getCPtr(printall));
  }

  public static void qh_printvertices(SWIGTYPE_p_FILE fp, String string, setT vertices) {
    qhullJNI.qh_printvertices(SWIGTYPE_p_FILE.getCPtr(fp), string, setT.getCPtr(vertices), vertices);
  }

  public static void qh_printvneighbors(SWIGTYPE_p_FILE fp, SWIGTYPE_p_facetT facetlist, setT facets, SWIGTYPE_p_boolT printall) {
    qhullJNI.qh_printvneighbors(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_facetT.getCPtr(facetlist), setT.getCPtr(facets), facets, SWIGTYPE_p_boolT.getCPtr(printall));
  }

  public static void qh_printvoronoi(SWIGTYPE_p_FILE fp, SWIGTYPE_p_qh_PRINT format, SWIGTYPE_p_facetT facetlist, setT facets, SWIGTYPE_p_boolT printall) {
    qhullJNI.qh_printvoronoi(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_qh_PRINT.getCPtr(format), SWIGTYPE_p_facetT.getCPtr(facetlist), setT.getCPtr(facets), facets, SWIGTYPE_p_boolT.getCPtr(printall));
  }

  public static void qh_printvnorm(SWIGTYPE_p_FILE fp, SWIGTYPE_p_vertexT vertex, SWIGTYPE_p_vertexT vertexA, setT centers, SWIGTYPE_p_boolT unbounded) {
    qhullJNI.qh_printvnorm(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_vertexT.getCPtr(vertex), SWIGTYPE_p_vertexT.getCPtr(vertexA), setT.getCPtr(centers), centers, SWIGTYPE_p_boolT.getCPtr(unbounded));
  }

  public static void qh_printvridge(SWIGTYPE_p_FILE fp, SWIGTYPE_p_vertexT vertex, SWIGTYPE_p_vertexT vertexA, setT centers, SWIGTYPE_p_boolT unbounded) {
    qhullJNI.qh_printvridge(SWIGTYPE_p_FILE.getCPtr(fp), SWIGTYPE_p_vertexT.getCPtr(vertex), SWIGTYPE_p_vertexT.getCPtr(vertexA), setT.getCPtr(centers), centers, SWIGTYPE_p_boolT.getCPtr(unbounded));
  }

  public static void qh_produce_output() {
    qhullJNI.qh_produce_output();
  }

  public static void qh_produce_output2() {
    qhullJNI.qh_produce_output2();
  }

  public static void qh_projectdim3(SWIGTYPE_p_pointT source, SWIGTYPE_p_pointT destination) {
    qhullJNI.qh_projectdim3(SWIGTYPE_p_pointT.getCPtr(source), SWIGTYPE_p_pointT.getCPtr(destination));
  }

  public static int qh_readfeasible(int dim, String curline) {
    return qhullJNI.qh_readfeasible(dim, curline);
  }

  public static SWIGTYPE_p_coordT qh_readpoints(SWIGTYPE_p_int numpoints, SWIGTYPE_p_int dimension, SWIGTYPE_p_boolT ismalloc) {
    long cPtr = qhullJNI.qh_readpoints(SWIGTYPE_p_int.getCPtr(numpoints), SWIGTYPE_p_int.getCPtr(dimension), SWIGTYPE_p_boolT.getCPtr(ismalloc));
    return (cPtr == 0) ? null : new SWIGTYPE_p_coordT(cPtr, false);
  }

  public static void qh_setfeasible(int dim) {
    qhullJNI.qh_setfeasible(dim);
  }

  public static SWIGTYPE_p_boolT qh_skipfacet(SWIGTYPE_p_facetT facet) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_skipfacet(SWIGTYPE_p_facetT.getCPtr(facet)), true);
  }

  public static String qh_skipfilename(String filename) {
    return qhullJNI.qh_skipfilename(filename);
  }

  public static void setQhmem(qhmemT value) {
    qhullJNI.qhmem_set(qhmemT.getCPtr(value), value);
  }

  public static qhmemT getQhmem() {
    long cPtr = qhullJNI.qhmem_get();
    return (cPtr == 0) ? null : new qhmemT(cPtr, false);
  }

  public static SWIGTYPE_p_void qh_memalloc(int insize) {
    long cPtr = qhullJNI.qh_memalloc(insize);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static void qh_memcheck() {
    qhullJNI.qh_memcheck();
  }

  public static void qh_memfree(SWIGTYPE_p_void object, int insize) {
    qhullJNI.qh_memfree(SWIGTYPE_p_void.getCPtr(object), insize);
  }

  public static void qh_memfreeshort(SWIGTYPE_p_int curlong, SWIGTYPE_p_int totlong) {
    qhullJNI.qh_memfreeshort(SWIGTYPE_p_int.getCPtr(curlong), SWIGTYPE_p_int.getCPtr(totlong));
  }

  public static void qh_meminit(SWIGTYPE_p_FILE ferr) {
    qhullJNI.qh_meminit(SWIGTYPE_p_FILE.getCPtr(ferr));
  }

  public static void qh_meminitbuffers(int tracelevel, int alignment, int numsizes, int bufsize, int bufinit) {
    qhullJNI.qh_meminitbuffers(tracelevel, alignment, numsizes, bufsize, bufinit);
  }

  public static void qh_memsetup() {
    qhullJNI.qh_memsetup();
  }

  public static void qh_memsize(int size) {
    qhullJNI.qh_memsize(size);
  }

  public static void qh_memstatistics(SWIGTYPE_p_FILE fp) {
    qhullJNI.qh_memstatistics(SWIGTYPE_p_FILE.getCPtr(fp));
  }

  public static void qh_memtotal(SWIGTYPE_p_int totlong, SWIGTYPE_p_int curlong, SWIGTYPE_p_int totshort, SWIGTYPE_p_int curshort, SWIGTYPE_p_int maxlong, SWIGTYPE_p_int totbuffer) {
    qhullJNI.qh_memtotal(SWIGTYPE_p_int.getCPtr(totlong), SWIGTYPE_p_int.getCPtr(curlong), SWIGTYPE_p_int.getCPtr(totshort), SWIGTYPE_p_int.getCPtr(curshort), SWIGTYPE_p_int.getCPtr(maxlong), SWIGTYPE_p_int.getCPtr(totbuffer));
  }

  public static void qh_premerge(int apexpointid, double maxcentrum, double maxangle) {
    qhullJNI.qh_premerge(apexpointid, maxcentrum, maxangle);
  }

  public static void qh_postmerge(String reason, double maxcentrum, double maxangle, SWIGTYPE_p_boolT vneighbors) {
    qhullJNI.qh_postmerge(reason, maxcentrum, maxangle, SWIGTYPE_p_boolT.getCPtr(vneighbors));
  }

  public static void qh_all_merges(SWIGTYPE_p_boolT othermerge, SWIGTYPE_p_boolT vneighbors) {
    qhullJNI.qh_all_merges(SWIGTYPE_p_boolT.getCPtr(othermerge), SWIGTYPE_p_boolT.getCPtr(vneighbors));
  }

  public static void qh_all_vertexmerges(int apexpointid, SWIGTYPE_p_facetT facet, SWIGTYPE_p_p_facetT retryfacet) {
    qhullJNI.qh_all_vertexmerges(apexpointid, SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_p_facetT.getCPtr(retryfacet));
  }

  public static void qh_appendmergeset(SWIGTYPE_p_facetT facet, SWIGTYPE_p_facetT neighbor, mergeType mergetype, SWIGTYPE_p_coordT dist, double angle) {
    qhullJNI.qh_appendmergeset(SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_facetT.getCPtr(neighbor), mergetype.swigValue(), SWIGTYPE_p_coordT.getCPtr(dist), angle);
  }

  public static void qh_appendvertexmerge(SWIGTYPE_p_vertexT vertex, SWIGTYPE_p_vertexT destination, mergeType mergetype, double distance, SWIGTYPE_p_ridgeT ridge1, SWIGTYPE_p_ridgeT ridge2) {
    qhullJNI.qh_appendvertexmerge(SWIGTYPE_p_vertexT.getCPtr(vertex), SWIGTYPE_p_vertexT.getCPtr(destination), mergetype.swigValue(), distance, SWIGTYPE_p_ridgeT.getCPtr(ridge1), SWIGTYPE_p_ridgeT.getCPtr(ridge2));
  }

  public static setT qh_basevertices(SWIGTYPE_p_facetT samecycle) {
    long cPtr = qhullJNI.qh_basevertices(SWIGTYPE_p_facetT.getCPtr(samecycle));
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static void qh_check_dupridge(SWIGTYPE_p_facetT facet1, double dist1, SWIGTYPE_p_facetT facet2, double dist2) {
    qhullJNI.qh_check_dupridge(SWIGTYPE_p_facetT.getCPtr(facet1), dist1, SWIGTYPE_p_facetT.getCPtr(facet2), dist2);
  }

  public static void qh_checkconnect() {
    qhullJNI.qh_checkconnect();
  }

  public static void qh_checkdelfacet(SWIGTYPE_p_facetT facet, setT mergeset) {
    qhullJNI.qh_checkdelfacet(SWIGTYPE_p_facetT.getCPtr(facet), setT.getCPtr(mergeset), mergeset);
  }

  public static void qh_checkdelridge() {
    qhullJNI.qh_checkdelridge();
  }

  public static SWIGTYPE_p_boolT qh_checkzero(SWIGTYPE_p_boolT testall) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_checkzero(SWIGTYPE_p_boolT.getCPtr(testall)), true);
  }

  public static int qh_compare_anglemerge(SWIGTYPE_p_void p1, SWIGTYPE_p_void p2) {
    return qhullJNI.qh_compare_anglemerge(SWIGTYPE_p_void.getCPtr(p1), SWIGTYPE_p_void.getCPtr(p2));
  }

  public static int qh_compare_facetmerge(SWIGTYPE_p_void p1, SWIGTYPE_p_void p2) {
    return qhullJNI.qh_compare_facetmerge(SWIGTYPE_p_void.getCPtr(p1), SWIGTYPE_p_void.getCPtr(p2));
  }

  public static int qh_comparevisit(SWIGTYPE_p_void p1, SWIGTYPE_p_void p2) {
    return qhullJNI.qh_comparevisit(SWIGTYPE_p_void.getCPtr(p1), SWIGTYPE_p_void.getCPtr(p2));
  }

  public static void qh_copynonconvex(SWIGTYPE_p_ridgeT atridge) {
    qhullJNI.qh_copynonconvex(SWIGTYPE_p_ridgeT.getCPtr(atridge));
  }

  public static void qh_degen_redundant_facet(SWIGTYPE_p_facetT facet) {
    qhullJNI.qh_degen_redundant_facet(SWIGTYPE_p_facetT.getCPtr(facet));
  }

  public static void qh_drop_mergevertex(mergeT merge) {
    qhullJNI.qh_drop_mergevertex(mergeT.getCPtr(merge), merge);
  }

  public static void qh_delridge_merge(SWIGTYPE_p_ridgeT ridge) {
    qhullJNI.qh_delridge_merge(SWIGTYPE_p_ridgeT.getCPtr(ridge));
  }

  public static SWIGTYPE_p_vertexT qh_find_newvertex(SWIGTYPE_p_vertexT oldvertex, setT vertices, setT ridges) {
    long cPtr = qhullJNI.qh_find_newvertex(SWIGTYPE_p_vertexT.getCPtr(oldvertex), setT.getCPtr(vertices), vertices, setT.getCPtr(ridges), ridges);
    return (cPtr == 0) ? null : new SWIGTYPE_p_vertexT(cPtr, false);
  }

  public static SWIGTYPE_p_vertexT qh_findbest_pinchedvertex(mergeT merge, SWIGTYPE_p_vertexT apex, SWIGTYPE_p_p_vertexT pinchedp, SWIGTYPE_p_double distp) {
    long cPtr = qhullJNI.qh_findbest_pinchedvertex(mergeT.getCPtr(merge), merge, SWIGTYPE_p_vertexT.getCPtr(apex), SWIGTYPE_p_p_vertexT.getCPtr(pinchedp), SWIGTYPE_p_double.getCPtr(distp));
    return (cPtr == 0) ? null : new SWIGTYPE_p_vertexT(cPtr, false);
  }

  public static SWIGTYPE_p_vertexT qh_findbest_ridgevertex(SWIGTYPE_p_ridgeT ridge, SWIGTYPE_p_p_vertexT pinchedp, SWIGTYPE_p_coordT distp) {
    long cPtr = qhullJNI.qh_findbest_ridgevertex(SWIGTYPE_p_ridgeT.getCPtr(ridge), SWIGTYPE_p_p_vertexT.getCPtr(pinchedp), SWIGTYPE_p_coordT.getCPtr(distp));
    return (cPtr == 0) ? null : new SWIGTYPE_p_vertexT(cPtr, false);
  }

  public static void qh_findbest_test(SWIGTYPE_p_boolT testcentrum, SWIGTYPE_p_facetT facet, SWIGTYPE_p_facetT neighbor, SWIGTYPE_p_p_facetT bestfacet, SWIGTYPE_p_double distp, SWIGTYPE_p_double mindistp, SWIGTYPE_p_double maxdistp) {
    qhullJNI.qh_findbest_test(SWIGTYPE_p_boolT.getCPtr(testcentrum), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_facetT.getCPtr(neighbor), SWIGTYPE_p_p_facetT.getCPtr(bestfacet), SWIGTYPE_p_double.getCPtr(distp), SWIGTYPE_p_double.getCPtr(mindistp), SWIGTYPE_p_double.getCPtr(maxdistp));
  }

  public static SWIGTYPE_p_facetT qh_findbestneighbor(SWIGTYPE_p_facetT facet, SWIGTYPE_p_double distp, SWIGTYPE_p_double mindistp, SWIGTYPE_p_double maxdistp) {
    long cPtr = qhullJNI.qh_findbestneighbor(SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_double.getCPtr(distp), SWIGTYPE_p_double.getCPtr(mindistp), SWIGTYPE_p_double.getCPtr(maxdistp));
    return (cPtr == 0) ? null : new SWIGTYPE_p_facetT(cPtr, false);
  }

  public static void qh_flippedmerges(SWIGTYPE_p_facetT facetlist, SWIGTYPE_p_boolT wasmerge) {
    qhullJNI.qh_flippedmerges(SWIGTYPE_p_facetT.getCPtr(facetlist), SWIGTYPE_p_boolT.getCPtr(wasmerge));
  }

  public static void qh_forcedmerges(SWIGTYPE_p_boolT wasmerge) {
    qhullJNI.qh_forcedmerges(SWIGTYPE_p_boolT.getCPtr(wasmerge));
  }

  public static void qh_freemergesets() {
    qhullJNI.qh_freemergesets();
  }

  public static void qh_getmergeset(SWIGTYPE_p_facetT facetlist) {
    qhullJNI.qh_getmergeset(SWIGTYPE_p_facetT.getCPtr(facetlist));
  }

  public static void qh_getmergeset_initial(SWIGTYPE_p_facetT facetlist) {
    qhullJNI.qh_getmergeset_initial(SWIGTYPE_p_facetT.getCPtr(facetlist));
  }

  public static SWIGTYPE_p_boolT qh_getpinchedmerges(SWIGTYPE_p_vertexT apex, SWIGTYPE_p_coordT maxdupdist, SWIGTYPE_p_boolT iscoplanar) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_getpinchedmerges(SWIGTYPE_p_vertexT.getCPtr(apex), SWIGTYPE_p_coordT.getCPtr(maxdupdist), SWIGTYPE_p_boolT.getCPtr(iscoplanar)), true);
  }

  public static SWIGTYPE_p_boolT qh_hasmerge(setT mergeset, mergeType type, SWIGTYPE_p_facetT facetA, SWIGTYPE_p_facetT facetB) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_hasmerge(setT.getCPtr(mergeset), mergeset, type.swigValue(), SWIGTYPE_p_facetT.getCPtr(facetA), SWIGTYPE_p_facetT.getCPtr(facetB)), true);
  }

  public static void qh_hashridge(setT hashtable, int hashsize, SWIGTYPE_p_ridgeT ridge, SWIGTYPE_p_vertexT oldvertex) {
    qhullJNI.qh_hashridge(setT.getCPtr(hashtable), hashtable, hashsize, SWIGTYPE_p_ridgeT.getCPtr(ridge), SWIGTYPE_p_vertexT.getCPtr(oldvertex));
  }

  public static SWIGTYPE_p_ridgeT qh_hashridge_find(setT hashtable, int hashsize, SWIGTYPE_p_ridgeT ridge, SWIGTYPE_p_vertexT vertex, SWIGTYPE_p_vertexT oldvertex, SWIGTYPE_p_int hashslot) {
    long cPtr = qhullJNI.qh_hashridge_find(setT.getCPtr(hashtable), hashtable, hashsize, SWIGTYPE_p_ridgeT.getCPtr(ridge), SWIGTYPE_p_vertexT.getCPtr(vertex), SWIGTYPE_p_vertexT.getCPtr(oldvertex), SWIGTYPE_p_int.getCPtr(hashslot));
    return (cPtr == 0) ? null : new SWIGTYPE_p_ridgeT(cPtr, false);
  }

  public static void qh_initmergesets() {
    qhullJNI.qh_initmergesets();
  }

  public static void qh_makeridges(SWIGTYPE_p_facetT facet) {
    qhullJNI.qh_makeridges(SWIGTYPE_p_facetT.getCPtr(facet));
  }

  public static void qh_mark_dupridges(SWIGTYPE_p_facetT facetlist, SWIGTYPE_p_boolT allmerges) {
    qhullJNI.qh_mark_dupridges(SWIGTYPE_p_facetT.getCPtr(facetlist), SWIGTYPE_p_boolT.getCPtr(allmerges));
  }

  public static void qh_maybe_duplicateridge(SWIGTYPE_p_ridgeT ridge) {
    qhullJNI.qh_maybe_duplicateridge(SWIGTYPE_p_ridgeT.getCPtr(ridge));
  }

  public static void qh_maybe_duplicateridges(SWIGTYPE_p_facetT facet) {
    qhullJNI.qh_maybe_duplicateridges(SWIGTYPE_p_facetT.getCPtr(facet));
  }

  public static void qh_maydropneighbor(SWIGTYPE_p_facetT facet) {
    qhullJNI.qh_maydropneighbor(SWIGTYPE_p_facetT.getCPtr(facet));
  }

  public static int qh_merge_degenredundant() {
    return qhullJNI.qh_merge_degenredundant();
  }

  public static void qh_merge_nonconvex(SWIGTYPE_p_facetT facet1, SWIGTYPE_p_facetT facet2, mergeType mergetype) {
    qhullJNI.qh_merge_nonconvex(SWIGTYPE_p_facetT.getCPtr(facet1), SWIGTYPE_p_facetT.getCPtr(facet2), mergetype.swigValue());
  }

  public static void qh_merge_pinchedvertices(int apexpointid) {
    qhullJNI.qh_merge_pinchedvertices(apexpointid);
  }

  public static void qh_merge_twisted(SWIGTYPE_p_facetT facet1, SWIGTYPE_p_facetT facet2) {
    qhullJNI.qh_merge_twisted(SWIGTYPE_p_facetT.getCPtr(facet1), SWIGTYPE_p_facetT.getCPtr(facet2));
  }

  public static void qh_mergecycle(SWIGTYPE_p_facetT samecycle, SWIGTYPE_p_facetT newfacet) {
    qhullJNI.qh_mergecycle(SWIGTYPE_p_facetT.getCPtr(samecycle), SWIGTYPE_p_facetT.getCPtr(newfacet));
  }

  public static void qh_mergecycle_all(SWIGTYPE_p_facetT facetlist, SWIGTYPE_p_boolT wasmerge) {
    qhullJNI.qh_mergecycle_all(SWIGTYPE_p_facetT.getCPtr(facetlist), SWIGTYPE_p_boolT.getCPtr(wasmerge));
  }

  public static void qh_mergecycle_facets(SWIGTYPE_p_facetT samecycle, SWIGTYPE_p_facetT newfacet) {
    qhullJNI.qh_mergecycle_facets(SWIGTYPE_p_facetT.getCPtr(samecycle), SWIGTYPE_p_facetT.getCPtr(newfacet));
  }

  public static void qh_mergecycle_neighbors(SWIGTYPE_p_facetT samecycle, SWIGTYPE_p_facetT newfacet) {
    qhullJNI.qh_mergecycle_neighbors(SWIGTYPE_p_facetT.getCPtr(samecycle), SWIGTYPE_p_facetT.getCPtr(newfacet));
  }

  public static void qh_mergecycle_ridges(SWIGTYPE_p_facetT samecycle, SWIGTYPE_p_facetT newfacet) {
    qhullJNI.qh_mergecycle_ridges(SWIGTYPE_p_facetT.getCPtr(samecycle), SWIGTYPE_p_facetT.getCPtr(newfacet));
  }

  public static void qh_mergecycle_vneighbors(SWIGTYPE_p_facetT samecycle, SWIGTYPE_p_facetT newfacet) {
    qhullJNI.qh_mergecycle_vneighbors(SWIGTYPE_p_facetT.getCPtr(samecycle), SWIGTYPE_p_facetT.getCPtr(newfacet));
  }

  public static void qh_mergefacet(SWIGTYPE_p_facetT facet1, SWIGTYPE_p_facetT facet2, mergeType mergetype, SWIGTYPE_p_double mindist, SWIGTYPE_p_double maxdist, SWIGTYPE_p_boolT mergeapex) {
    qhullJNI.qh_mergefacet(SWIGTYPE_p_facetT.getCPtr(facet1), SWIGTYPE_p_facetT.getCPtr(facet2), mergetype.swigValue(), SWIGTYPE_p_double.getCPtr(mindist), SWIGTYPE_p_double.getCPtr(maxdist), SWIGTYPE_p_boolT.getCPtr(mergeapex));
  }

  public static void qh_mergefacet2d(SWIGTYPE_p_facetT facet1, SWIGTYPE_p_facetT facet2) {
    qhullJNI.qh_mergefacet2d(SWIGTYPE_p_facetT.getCPtr(facet1), SWIGTYPE_p_facetT.getCPtr(facet2));
  }

  public static void qh_mergeneighbors(SWIGTYPE_p_facetT facet1, SWIGTYPE_p_facetT facet2) {
    qhullJNI.qh_mergeneighbors(SWIGTYPE_p_facetT.getCPtr(facet1), SWIGTYPE_p_facetT.getCPtr(facet2));
  }

  public static void qh_mergeridges(SWIGTYPE_p_facetT facet1, SWIGTYPE_p_facetT facet2) {
    qhullJNI.qh_mergeridges(SWIGTYPE_p_facetT.getCPtr(facet1), SWIGTYPE_p_facetT.getCPtr(facet2));
  }

  public static void qh_mergesimplex(SWIGTYPE_p_facetT facet1, SWIGTYPE_p_facetT facet2, SWIGTYPE_p_boolT mergeapex) {
    qhullJNI.qh_mergesimplex(SWIGTYPE_p_facetT.getCPtr(facet1), SWIGTYPE_p_facetT.getCPtr(facet2), SWIGTYPE_p_boolT.getCPtr(mergeapex));
  }

  public static void qh_mergevertex_del(SWIGTYPE_p_vertexT vertex, SWIGTYPE_p_facetT facet1, SWIGTYPE_p_facetT facet2) {
    qhullJNI.qh_mergevertex_del(SWIGTYPE_p_vertexT.getCPtr(vertex), SWIGTYPE_p_facetT.getCPtr(facet1), SWIGTYPE_p_facetT.getCPtr(facet2));
  }

  public static void qh_mergevertex_neighbors(SWIGTYPE_p_facetT facet1, SWIGTYPE_p_facetT facet2) {
    qhullJNI.qh_mergevertex_neighbors(SWIGTYPE_p_facetT.getCPtr(facet1), SWIGTYPE_p_facetT.getCPtr(facet2));
  }

  public static void qh_mergevertices(setT vertices1, SWIGTYPE_p_p_setT vertices) {
    qhullJNI.qh_mergevertices(setT.getCPtr(vertices1), vertices1, SWIGTYPE_p_p_setT.getCPtr(vertices));
  }

  public static setT qh_neighbor_intersections(SWIGTYPE_p_vertexT vertex) {
    long cPtr = qhullJNI.qh_neighbor_intersections(SWIGTYPE_p_vertexT.getCPtr(vertex));
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static setT qh_neighbor_vertices(SWIGTYPE_p_vertexT vertex, setT subridge) {
    long cPtr = qhullJNI.qh_neighbor_vertices(SWIGTYPE_p_vertexT.getCPtr(vertex), setT.getCPtr(subridge), subridge);
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static void qh_neighbor_vertices_facet(SWIGTYPE_p_vertexT vertexA, SWIGTYPE_p_facetT facet, SWIGTYPE_p_p_setT vertices) {
    qhullJNI.qh_neighbor_vertices_facet(SWIGTYPE_p_vertexT.getCPtr(vertexA), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_p_setT.getCPtr(vertices));
  }

  public static void qh_newvertices(setT vertices) {
    qhullJNI.qh_newvertices(setT.getCPtr(vertices), vertices);
  }

  public static mergeT qh_next_vertexmerge() {
    long cPtr = qhullJNI.qh_next_vertexmerge();
    return (cPtr == 0) ? null : new mergeT(cPtr, false);
  }

  public static SWIGTYPE_p_facetT qh_opposite_horizonfacet(mergeT merge, SWIGTYPE_p_p_vertexT vertex) {
    long cPtr = qhullJNI.qh_opposite_horizonfacet(mergeT.getCPtr(merge), merge, SWIGTYPE_p_p_vertexT.getCPtr(vertex));
    return (cPtr == 0) ? null : new SWIGTYPE_p_facetT(cPtr, false);
  }

  public static SWIGTYPE_p_boolT qh_reducevertices() {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_reducevertices(), true);
  }

  public static SWIGTYPE_p_vertexT qh_redundant_vertex(SWIGTYPE_p_vertexT vertex) {
    long cPtr = qhullJNI.qh_redundant_vertex(SWIGTYPE_p_vertexT.getCPtr(vertex));
    return (cPtr == 0) ? null : new SWIGTYPE_p_vertexT(cPtr, false);
  }

  public static SWIGTYPE_p_boolT qh_remove_extravertices(SWIGTYPE_p_facetT facet) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_remove_extravertices(SWIGTYPE_p_facetT.getCPtr(facet)), true);
  }

  public static void qh_remove_mergetype(setT mergeset, mergeType type) {
    qhullJNI.qh_remove_mergetype(setT.getCPtr(mergeset), mergeset, type.swigValue());
  }

  public static void qh_rename_adjacentvertex(SWIGTYPE_p_vertexT oldvertex, SWIGTYPE_p_vertexT newvertex, double dist) {
    qhullJNI.qh_rename_adjacentvertex(SWIGTYPE_p_vertexT.getCPtr(oldvertex), SWIGTYPE_p_vertexT.getCPtr(newvertex), dist);
  }

  public static SWIGTYPE_p_vertexT qh_rename_sharedvertex(SWIGTYPE_p_vertexT vertex, SWIGTYPE_p_facetT facet) {
    long cPtr = qhullJNI.qh_rename_sharedvertex(SWIGTYPE_p_vertexT.getCPtr(vertex), SWIGTYPE_p_facetT.getCPtr(facet));
    return (cPtr == 0) ? null : new SWIGTYPE_p_vertexT(cPtr, false);
  }

  public static SWIGTYPE_p_boolT qh_renameridgevertex(SWIGTYPE_p_ridgeT ridge, SWIGTYPE_p_vertexT oldvertex, SWIGTYPE_p_vertexT newvertex) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_renameridgevertex(SWIGTYPE_p_ridgeT.getCPtr(ridge), SWIGTYPE_p_vertexT.getCPtr(oldvertex), SWIGTYPE_p_vertexT.getCPtr(newvertex)), true);
  }

  public static void qh_renamevertex(SWIGTYPE_p_vertexT oldvertex, SWIGTYPE_p_vertexT newvertex, setT ridges, SWIGTYPE_p_facetT oldfacet, SWIGTYPE_p_facetT neighborA) {
    qhullJNI.qh_renamevertex(SWIGTYPE_p_vertexT.getCPtr(oldvertex), SWIGTYPE_p_vertexT.getCPtr(newvertex), setT.getCPtr(ridges), ridges, SWIGTYPE_p_facetT.getCPtr(oldfacet), SWIGTYPE_p_facetT.getCPtr(neighborA));
  }

  public static SWIGTYPE_p_boolT qh_test_appendmerge(SWIGTYPE_p_facetT facet, SWIGTYPE_p_facetT neighbor, SWIGTYPE_p_boolT simplicial) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_test_appendmerge(SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_facetT.getCPtr(neighbor), SWIGTYPE_p_boolT.getCPtr(simplicial)), true);
  }

  public static void qh_test_degen_neighbors(SWIGTYPE_p_facetT facet) {
    qhullJNI.qh_test_degen_neighbors(SWIGTYPE_p_facetT.getCPtr(facet));
  }

  public static SWIGTYPE_p_boolT qh_test_centrum_merge(SWIGTYPE_p_facetT facet, SWIGTYPE_p_facetT neighbor, double angle, SWIGTYPE_p_boolT okangle) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_test_centrum_merge(SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_facetT.getCPtr(neighbor), angle, SWIGTYPE_p_boolT.getCPtr(okangle)), true);
  }

  public static SWIGTYPE_p_boolT qh_test_nonsimplicial_merge(SWIGTYPE_p_facetT facet, SWIGTYPE_p_facetT neighbor, double angle, SWIGTYPE_p_boolT okangle) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_test_nonsimplicial_merge(SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_facetT.getCPtr(neighbor), angle, SWIGTYPE_p_boolT.getCPtr(okangle)), true);
  }

  public static void qh_test_redundant_neighbors(SWIGTYPE_p_facetT facet) {
    qhullJNI.qh_test_redundant_neighbors(SWIGTYPE_p_facetT.getCPtr(facet));
  }

  public static SWIGTYPE_p_boolT qh_test_vneighbors() {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_test_vneighbors(), true);
  }

  public static void qh_tracemerge(SWIGTYPE_p_facetT facet1, SWIGTYPE_p_facetT facet2, mergeType mergetype) {
    qhullJNI.qh_tracemerge(SWIGTYPE_p_facetT.getCPtr(facet1), SWIGTYPE_p_facetT.getCPtr(facet2), mergetype.swigValue());
  }

  public static void qh_tracemerging() {
    qhullJNI.qh_tracemerging();
  }

  public static void qh_updatetested(SWIGTYPE_p_facetT facet1, SWIGTYPE_p_facetT facet2) {
    qhullJNI.qh_updatetested(SWIGTYPE_p_facetT.getCPtr(facet1), SWIGTYPE_p_facetT.getCPtr(facet2));
  }

  public static setT qh_vertexridges(SWIGTYPE_p_vertexT vertex, SWIGTYPE_p_boolT allneighbors) {
    long cPtr = qhullJNI.qh_vertexridges(SWIGTYPE_p_vertexT.getCPtr(vertex), SWIGTYPE_p_boolT.getCPtr(allneighbors));
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static void qh_vertexridges_facet(SWIGTYPE_p_vertexT vertex, SWIGTYPE_p_facetT facet, SWIGTYPE_p_p_setT ridges) {
    qhullJNI.qh_vertexridges_facet(SWIGTYPE_p_vertexT.getCPtr(vertex), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_p_setT.getCPtr(ridges));
  }

  public static void qh_willdelete(SWIGTYPE_p_facetT facet, SWIGTYPE_p_facetT replace) {
    qhullJNI.qh_willdelete(SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_facetT.getCPtr(replace));
  }

  public static void qh_appendfacet(SWIGTYPE_p_facetT facet) {
    qhullJNI.qh_appendfacet(SWIGTYPE_p_facetT.getCPtr(facet));
  }

  public static void qh_appendvertex(SWIGTYPE_p_vertexT vertex) {
    qhullJNI.qh_appendvertex(SWIGTYPE_p_vertexT.getCPtr(vertex));
  }

  public static void qh_attachnewfacets() {
    qhullJNI.qh_attachnewfacets();
  }

  public static SWIGTYPE_p_boolT qh_checkflipped(SWIGTYPE_p_facetT facet, SWIGTYPE_p_double dist, SWIGTYPE_p_boolT allerror) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_checkflipped(SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_double.getCPtr(dist), SWIGTYPE_p_boolT.getCPtr(allerror)), true);
  }

  public static void qh_delfacet(SWIGTYPE_p_facetT facet) {
    qhullJNI.qh_delfacet(SWIGTYPE_p_facetT.getCPtr(facet));
  }

  public static void qh_deletevisible() {
    qhullJNI.qh_deletevisible();
  }

  public static setT qh_facetintersect(SWIGTYPE_p_facetT facetA, SWIGTYPE_p_facetT facetB, SWIGTYPE_p_int skipAp, SWIGTYPE_p_int skipBp, int extra) {
    long cPtr = qhullJNI.qh_facetintersect(SWIGTYPE_p_facetT.getCPtr(facetA), SWIGTYPE_p_facetT.getCPtr(facetB), SWIGTYPE_p_int.getCPtr(skipAp), SWIGTYPE_p_int.getCPtr(skipBp), extra);
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static int qh_gethash(int hashsize, setT set, int size, int firstindex, SWIGTYPE_p_void skipelem) {
    return qhullJNI.qh_gethash(hashsize, setT.getCPtr(set), set, size, firstindex, SWIGTYPE_p_void.getCPtr(skipelem));
  }

  public static SWIGTYPE_p_facetT qh_getreplacement(SWIGTYPE_p_facetT visible) {
    long cPtr = qhullJNI.qh_getreplacement(SWIGTYPE_p_facetT.getCPtr(visible));
    return (cPtr == 0) ? null : new SWIGTYPE_p_facetT(cPtr, false);
  }

  public static SWIGTYPE_p_facetT qh_makenewfacet(setT vertices, SWIGTYPE_p_boolT toporient, SWIGTYPE_p_facetT facet) {
    long cPtr = qhullJNI.qh_makenewfacet(setT.getCPtr(vertices), vertices, SWIGTYPE_p_boolT.getCPtr(toporient), SWIGTYPE_p_facetT.getCPtr(facet));
    return (cPtr == 0) ? null : new SWIGTYPE_p_facetT(cPtr, false);
  }

  public static void qh_makenewplanes() {
    qhullJNI.qh_makenewplanes();
  }

  public static SWIGTYPE_p_facetT qh_makenew_nonsimplicial(SWIGTYPE_p_facetT visible, SWIGTYPE_p_vertexT apex, SWIGTYPE_p_int numnew) {
    long cPtr = qhullJNI.qh_makenew_nonsimplicial(SWIGTYPE_p_facetT.getCPtr(visible), SWIGTYPE_p_vertexT.getCPtr(apex), SWIGTYPE_p_int.getCPtr(numnew));
    return (cPtr == 0) ? null : new SWIGTYPE_p_facetT(cPtr, false);
  }

  public static SWIGTYPE_p_facetT qh_makenew_simplicial(SWIGTYPE_p_facetT visible, SWIGTYPE_p_vertexT apex, SWIGTYPE_p_int numnew) {
    long cPtr = qhullJNI.qh_makenew_simplicial(SWIGTYPE_p_facetT.getCPtr(visible), SWIGTYPE_p_vertexT.getCPtr(apex), SWIGTYPE_p_int.getCPtr(numnew));
    return (cPtr == 0) ? null : new SWIGTYPE_p_facetT(cPtr, false);
  }

  public static void qh_matchneighbor(SWIGTYPE_p_facetT newfacet, int newskip, int hashsize, SWIGTYPE_p_int hashcount) {
    qhullJNI.qh_matchneighbor(SWIGTYPE_p_facetT.getCPtr(newfacet), newskip, hashsize, SWIGTYPE_p_int.getCPtr(hashcount));
  }

  public static SWIGTYPE_p_coordT qh_matchnewfacets() {
    return new SWIGTYPE_p_coordT(qhullJNI.qh_matchnewfacets(), true);
  }

  public static SWIGTYPE_p_boolT qh_matchvertices(int firstindex, setT verticesA, int skipA, setT verticesB, SWIGTYPE_p_int skipB, SWIGTYPE_p_boolT same) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_matchvertices(firstindex, setT.getCPtr(verticesA), verticesA, skipA, setT.getCPtr(verticesB), verticesB, SWIGTYPE_p_int.getCPtr(skipB), SWIGTYPE_p_boolT.getCPtr(same)), true);
  }

  public static SWIGTYPE_p_facetT qh_newfacet() {
    long cPtr = qhullJNI.qh_newfacet();
    return (cPtr == 0) ? null : new SWIGTYPE_p_facetT(cPtr, false);
  }

  public static SWIGTYPE_p_ridgeT qh_newridge() {
    long cPtr = qhullJNI.qh_newridge();
    return (cPtr == 0) ? null : new SWIGTYPE_p_ridgeT(cPtr, false);
  }

  public static int qh_pointid(SWIGTYPE_p_pointT point) {
    return qhullJNI.qh_pointid(SWIGTYPE_p_pointT.getCPtr(point));
  }

  public static void qh_removefacet(SWIGTYPE_p_facetT facet) {
    qhullJNI.qh_removefacet(SWIGTYPE_p_facetT.getCPtr(facet));
  }

  public static void qh_removevertex(SWIGTYPE_p_vertexT vertex) {
    qhullJNI.qh_removevertex(SWIGTYPE_p_vertexT.getCPtr(vertex));
  }

  public static void qh_update_vertexneighbors() {
    qhullJNI.qh_update_vertexneighbors();
  }

  public static void qh_update_vertexneighbors_cone() {
    qhullJNI.qh_update_vertexneighbors_cone();
  }

  public static SWIGTYPE_p_boolT qh_addfacetvertex(SWIGTYPE_p_facetT facet, SWIGTYPE_p_vertexT newvertex) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_addfacetvertex(SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_vertexT.getCPtr(newvertex)), true);
  }

  public static void qh_addhash(SWIGTYPE_p_void newelem, setT hashtable, int hashsize, int hash) {
    qhullJNI.qh_addhash(SWIGTYPE_p_void.getCPtr(newelem), setT.getCPtr(hashtable), hashtable, hashsize, hash);
  }

  public static void qh_check_bestdist() {
    qhullJNI.qh_check_bestdist();
  }

  public static void qh_check_maxout() {
    qhullJNI.qh_check_maxout();
  }

  public static void qh_check_output() {
    qhullJNI.qh_check_output();
  }

  public static void qh_check_point(SWIGTYPE_p_pointT point, SWIGTYPE_p_facetT facet, SWIGTYPE_p_double maxoutside, SWIGTYPE_p_double maxdist, SWIGTYPE_p_p_facetT errfacet1, SWIGTYPE_p_p_facetT errfacet2, SWIGTYPE_p_int errcount) {
    qhullJNI.qh_check_point(SWIGTYPE_p_pointT.getCPtr(point), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_double.getCPtr(maxoutside), SWIGTYPE_p_double.getCPtr(maxdist), SWIGTYPE_p_p_facetT.getCPtr(errfacet1), SWIGTYPE_p_p_facetT.getCPtr(errfacet2), SWIGTYPE_p_int.getCPtr(errcount));
  }

  public static void qh_check_points() {
    qhullJNI.qh_check_points();
  }

  public static void qh_checkconvex(SWIGTYPE_p_facetT facetlist, int fault) {
    qhullJNI.qh_checkconvex(SWIGTYPE_p_facetT.getCPtr(facetlist), fault);
  }

  public static void qh_checkfacet(SWIGTYPE_p_facetT facet, SWIGTYPE_p_boolT newmerge, SWIGTYPE_p_boolT waserrorp) {
    qhullJNI.qh_checkfacet(SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_boolT.getCPtr(newmerge), SWIGTYPE_p_boolT.getCPtr(waserrorp));
  }

  public static void qh_checkflipped_all(SWIGTYPE_p_facetT facetlist) {
    qhullJNI.qh_checkflipped_all(SWIGTYPE_p_facetT.getCPtr(facetlist));
  }

  public static SWIGTYPE_p_boolT qh_checklists(SWIGTYPE_p_facetT facetlist) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_checklists(SWIGTYPE_p_facetT.getCPtr(facetlist)), true);
  }

  public static void qh_checkpolygon(SWIGTYPE_p_facetT facetlist) {
    qhullJNI.qh_checkpolygon(SWIGTYPE_p_facetT.getCPtr(facetlist));
  }

  public static void qh_checkvertex(SWIGTYPE_p_vertexT vertex, SWIGTYPE_p_boolT allchecks, SWIGTYPE_p_boolT waserrorp) {
    qhullJNI.qh_checkvertex(SWIGTYPE_p_vertexT.getCPtr(vertex), SWIGTYPE_p_boolT.getCPtr(allchecks), SWIGTYPE_p_boolT.getCPtr(waserrorp));
  }

  public static void qh_clearcenters(SWIGTYPE_p_qh_CENTER type) {
    qhullJNI.qh_clearcenters(SWIGTYPE_p_qh_CENTER.getCPtr(type));
  }

  public static void qh_createsimplex(setT vertices) {
    qhullJNI.qh_createsimplex(setT.getCPtr(vertices), vertices);
  }

  public static void qh_delridge(SWIGTYPE_p_ridgeT ridge) {
    qhullJNI.qh_delridge(SWIGTYPE_p_ridgeT.getCPtr(ridge));
  }

  public static void qh_delvertex(SWIGTYPE_p_vertexT vertex) {
    qhullJNI.qh_delvertex(SWIGTYPE_p_vertexT.getCPtr(vertex));
  }

  public static setT qh_facet3vertex(SWIGTYPE_p_facetT facet) {
    long cPtr = qhullJNI.qh_facet3vertex(SWIGTYPE_p_facetT.getCPtr(facet));
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static SWIGTYPE_p_facetT qh_findbestfacet(SWIGTYPE_p_pointT point, SWIGTYPE_p_boolT bestoutside, SWIGTYPE_p_double bestdist, SWIGTYPE_p_boolT isoutside) {
    long cPtr = qhullJNI.qh_findbestfacet(SWIGTYPE_p_pointT.getCPtr(point), SWIGTYPE_p_boolT.getCPtr(bestoutside), SWIGTYPE_p_double.getCPtr(bestdist), SWIGTYPE_p_boolT.getCPtr(isoutside));
    return (cPtr == 0) ? null : new SWIGTYPE_p_facetT(cPtr, false);
  }

  public static SWIGTYPE_p_facetT qh_findbestlower(SWIGTYPE_p_facetT upperfacet, SWIGTYPE_p_pointT point, SWIGTYPE_p_double bestdistp, SWIGTYPE_p_int numpart) {
    long cPtr = qhullJNI.qh_findbestlower(SWIGTYPE_p_facetT.getCPtr(upperfacet), SWIGTYPE_p_pointT.getCPtr(point), SWIGTYPE_p_double.getCPtr(bestdistp), SWIGTYPE_p_int.getCPtr(numpart));
    return (cPtr == 0) ? null : new SWIGTYPE_p_facetT(cPtr, false);
  }

  public static SWIGTYPE_p_facetT qh_findfacet_all(SWIGTYPE_p_pointT point, SWIGTYPE_p_boolT noupper, SWIGTYPE_p_double bestdist, SWIGTYPE_p_boolT isoutside, SWIGTYPE_p_int numpart) {
    long cPtr = qhullJNI.qh_findfacet_all(SWIGTYPE_p_pointT.getCPtr(point), SWIGTYPE_p_boolT.getCPtr(noupper), SWIGTYPE_p_double.getCPtr(bestdist), SWIGTYPE_p_boolT.getCPtr(isoutside), SWIGTYPE_p_int.getCPtr(numpart));
    return (cPtr == 0) ? null : new SWIGTYPE_p_facetT(cPtr, false);
  }

  public static int qh_findgood(SWIGTYPE_p_facetT facetlist, int goodhorizon) {
    return qhullJNI.qh_findgood(SWIGTYPE_p_facetT.getCPtr(facetlist), goodhorizon);
  }

  public static void qh_findgood_all(SWIGTYPE_p_facetT facetlist) {
    qhullJNI.qh_findgood_all(SWIGTYPE_p_facetT.getCPtr(facetlist));
  }

  public static void qh_furthestnext() {
    qhullJNI.qh_furthestnext();
  }

  public static void qh_furthestout(SWIGTYPE_p_facetT facet) {
    qhullJNI.qh_furthestout(SWIGTYPE_p_facetT.getCPtr(facet));
  }

  public static void qh_infiniteloop(SWIGTYPE_p_facetT facet) {
    qhullJNI.qh_infiniteloop(SWIGTYPE_p_facetT.getCPtr(facet));
  }

  public static void qh_initbuild() {
    qhullJNI.qh_initbuild();
  }

  public static void qh_initialhull(setT vertices) {
    qhullJNI.qh_initialhull(setT.getCPtr(vertices), vertices);
  }

  public static setT qh_initialvertices(int dim, setT maxpoints, SWIGTYPE_p_pointT points, int numpoints) {
    long cPtr = qhullJNI.qh_initialvertices(dim, setT.getCPtr(maxpoints), maxpoints, SWIGTYPE_p_pointT.getCPtr(points), numpoints);
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static SWIGTYPE_p_vertexT qh_isvertex(SWIGTYPE_p_pointT point, setT vertices) {
    long cPtr = qhullJNI.qh_isvertex(SWIGTYPE_p_pointT.getCPtr(point), setT.getCPtr(vertices), vertices);
    return (cPtr == 0) ? null : new SWIGTYPE_p_vertexT(cPtr, false);
  }

  public static SWIGTYPE_p_vertexT qh_makenewfacets(SWIGTYPE_p_pointT point) {
    long cPtr = qhullJNI.qh_makenewfacets(SWIGTYPE_p_pointT.getCPtr(point));
    return (cPtr == 0) ? null : new SWIGTYPE_p_vertexT(cPtr, false);
  }

  public static SWIGTYPE_p_coordT qh_matchdupridge(SWIGTYPE_p_facetT atfacet, int atskip, int hashsize, SWIGTYPE_p_int hashcount) {
    return new SWIGTYPE_p_coordT(qhullJNI.qh_matchdupridge(SWIGTYPE_p_facetT.getCPtr(atfacet), atskip, hashsize, SWIGTYPE_p_int.getCPtr(hashcount)), true);
  }

  public static void qh_nearcoplanar() {
    qhullJNI.qh_nearcoplanar();
  }

  public static SWIGTYPE_p_vertexT qh_nearvertex(SWIGTYPE_p_facetT facet, SWIGTYPE_p_pointT point, SWIGTYPE_p_double bestdistp) {
    long cPtr = qhullJNI.qh_nearvertex(SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_pointT.getCPtr(point), SWIGTYPE_p_double.getCPtr(bestdistp));
    return (cPtr == 0) ? null : new SWIGTYPE_p_vertexT(cPtr, false);
  }

  public static int qh_newhashtable(int newsize) {
    return qhullJNI.qh_newhashtable(newsize);
  }

  public static SWIGTYPE_p_vertexT qh_newvertex(SWIGTYPE_p_pointT point) {
    long cPtr = qhullJNI.qh_newvertex(SWIGTYPE_p_pointT.getCPtr(point));
    return (cPtr == 0) ? null : new SWIGTYPE_p_vertexT(cPtr, false);
  }

  public static SWIGTYPE_p_facetT qh_nextfacet2d(SWIGTYPE_p_facetT facet, SWIGTYPE_p_p_vertexT nextvertexp) {
    long cPtr = qhullJNI.qh_nextfacet2d(SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_p_vertexT.getCPtr(nextvertexp));
    return (cPtr == 0) ? null : new SWIGTYPE_p_facetT(cPtr, false);
  }

  public static SWIGTYPE_p_ridgeT qh_nextridge3d(SWIGTYPE_p_ridgeT atridge, SWIGTYPE_p_facetT facet, SWIGTYPE_p_p_vertexT vertexp) {
    long cPtr = qhullJNI.qh_nextridge3d(SWIGTYPE_p_ridgeT.getCPtr(atridge), SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_p_vertexT.getCPtr(vertexp));
    return (cPtr == 0) ? null : new SWIGTYPE_p_ridgeT(cPtr, false);
  }

  public static SWIGTYPE_p_vertexT qh_opposite_vertex(SWIGTYPE_p_facetT facetA, SWIGTYPE_p_facetT neighbor) {
    long cPtr = qhullJNI.qh_opposite_vertex(SWIGTYPE_p_facetT.getCPtr(facetA), SWIGTYPE_p_facetT.getCPtr(neighbor));
    return (cPtr == 0) ? null : new SWIGTYPE_p_vertexT(cPtr, false);
  }

  public static void qh_outcoplanar() {
    qhullJNI.qh_outcoplanar();
  }

  public static SWIGTYPE_p_pointT qh_point(int id) {
    long cPtr = qhullJNI.qh_point(id);
    return (cPtr == 0) ? null : new SWIGTYPE_p_pointT(cPtr, false);
  }

  public static void qh_point_add(setT set, SWIGTYPE_p_pointT point, SWIGTYPE_p_void elem) {
    qhullJNI.qh_point_add(setT.getCPtr(set), set, SWIGTYPE_p_pointT.getCPtr(point), SWIGTYPE_p_void.getCPtr(elem));
  }

  public static setT qh_pointfacet() {
    long cPtr = qhullJNI.qh_pointfacet();
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static setT qh_pointvertex() {
    long cPtr = qhullJNI.qh_pointvertex();
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static void qh_prependfacet(SWIGTYPE_p_facetT facet, SWIGTYPE_p_p_facetT facetlist) {
    qhullJNI.qh_prependfacet(SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_p_facetT.getCPtr(facetlist));
  }

  public static void qh_printhashtable(SWIGTYPE_p_FILE fp) {
    qhullJNI.qh_printhashtable(SWIGTYPE_p_FILE.getCPtr(fp));
  }

  public static void qh_printlists() {
    qhullJNI.qh_printlists();
  }

  public static void qh_replacefacetvertex(SWIGTYPE_p_facetT facet, SWIGTYPE_p_vertexT oldvertex, SWIGTYPE_p_vertexT newvertex) {
    qhullJNI.qh_replacefacetvertex(SWIGTYPE_p_facetT.getCPtr(facet), SWIGTYPE_p_vertexT.getCPtr(oldvertex), SWIGTYPE_p_vertexT.getCPtr(newvertex));
  }

  public static void qh_resetlists(SWIGTYPE_p_boolT stats, SWIGTYPE_p_boolT resetVisible) {
    qhullJNI.qh_resetlists(SWIGTYPE_p_boolT.getCPtr(stats), SWIGTYPE_p_boolT.getCPtr(resetVisible));
  }

  public static void qh_setvoronoi_all() {
    qhullJNI.qh_setvoronoi_all();
  }

  public static void qh_triangulate() {
    qhullJNI.qh_triangulate();
  }

  public static void qh_triangulate_facet(SWIGTYPE_p_facetT facetA, SWIGTYPE_p_p_vertexT first_vertex) {
    qhullJNI.qh_triangulate_facet(SWIGTYPE_p_facetT.getCPtr(facetA), SWIGTYPE_p_p_vertexT.getCPtr(first_vertex));
  }

  public static void qh_triangulate_link(SWIGTYPE_p_facetT oldfacetA, SWIGTYPE_p_facetT facetA, SWIGTYPE_p_facetT oldfacetB, SWIGTYPE_p_facetT facetB) {
    qhullJNI.qh_triangulate_link(SWIGTYPE_p_facetT.getCPtr(oldfacetA), SWIGTYPE_p_facetT.getCPtr(facetA), SWIGTYPE_p_facetT.getCPtr(oldfacetB), SWIGTYPE_p_facetT.getCPtr(facetB));
  }

  public static void qh_triangulate_mirror(SWIGTYPE_p_facetT facetA, SWIGTYPE_p_facetT facetB) {
    qhullJNI.qh_triangulate_mirror(SWIGTYPE_p_facetT.getCPtr(facetA), SWIGTYPE_p_facetT.getCPtr(facetB));
  }

  public static void qh_triangulate_null(SWIGTYPE_p_facetT facetA) {
    qhullJNI.qh_triangulate_null(SWIGTYPE_p_facetT.getCPtr(facetA));
  }

  public static void qh_vertexintersect(SWIGTYPE_p_p_setT vertexsetA, setT vertexsetB) {
    qhullJNI.qh_vertexintersect(SWIGTYPE_p_p_setT.getCPtr(vertexsetA), setT.getCPtr(vertexsetB), vertexsetB);
  }

  public static setT qh_vertexintersect_new(setT vertexsetA, setT vertexsetB) {
    long cPtr = qhullJNI.qh_vertexintersect_new(setT.getCPtr(vertexsetA), vertexsetA, setT.getCPtr(vertexsetB), vertexsetB);
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static void qh_vertexneighbors() {
    qhullJNI.qh_vertexneighbors();
  }

  public static SWIGTYPE_p_boolT qh_vertexsubset(setT vertexsetA, setT vertexsetB) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_vertexsubset(setT.getCPtr(vertexsetA), vertexsetA, setT.getCPtr(vertexsetB), vertexsetB), true);
  }

  public static int qh_argv_to_command(int argc, SWIGTYPE_p_p_char argv, String command, int max_size) {
    return qhullJNI.qh_argv_to_command(argc, SWIGTYPE_p_p_char.getCPtr(argv), command, max_size);
  }

  public static int qh_argv_to_command_size(int argc, SWIGTYPE_p_p_char argv) {
    return qhullJNI.qh_argv_to_command_size(argc, SWIGTYPE_p_p_char.getCPtr(argv));
  }

  public static int qh_rand() {
    return qhullJNI.qh_rand();
  }

  public static void qh_srand(int seed) {
    qhullJNI.qh_srand(seed);
  }

  public static double qh_randomfactor(double scale, double offset) {
    return qhullJNI.qh_randomfactor(scale, offset);
  }

  public static void qh_randommatrix(SWIGTYPE_p_double buffer, int dim, SWIGTYPE_p_p_double row) {
    qhullJNI.qh_randommatrix(SWIGTYPE_p_double.getCPtr(buffer), dim, SWIGTYPE_p_p_double.getCPtr(row));
  }

  public static int qh_strtol(String s, SWIGTYPE_p_p_char endp) {
    return qhullJNI.qh_strtol(s, SWIGTYPE_p_p_char.getCPtr(endp));
  }

  public static double qh_strtod(String s, SWIGTYPE_p_p_char endp) {
    return qhullJNI.qh_strtod(s, SWIGTYPE_p_p_char.getCPtr(endp));
  }

  public static void qh_setaddsorted(SWIGTYPE_p_p_setT setp, SWIGTYPE_p_void elem) {
    qhullJNI.qh_setaddsorted(SWIGTYPE_p_p_setT.getCPtr(setp), SWIGTYPE_p_void.getCPtr(elem));
  }

  public static void qh_setaddnth(SWIGTYPE_p_p_setT setp, int nth, SWIGTYPE_p_void newelem) {
    qhullJNI.qh_setaddnth(SWIGTYPE_p_p_setT.getCPtr(setp), nth, SWIGTYPE_p_void.getCPtr(newelem));
  }

  public static void qh_setappend(SWIGTYPE_p_p_setT setp, SWIGTYPE_p_void elem) {
    qhullJNI.qh_setappend(SWIGTYPE_p_p_setT.getCPtr(setp), SWIGTYPE_p_void.getCPtr(elem));
  }

  public static void qh_setappend_set(SWIGTYPE_p_p_setT setp, setT setA) {
    qhullJNI.qh_setappend_set(SWIGTYPE_p_p_setT.getCPtr(setp), setT.getCPtr(setA), setA);
  }

  public static void qh_setappend2ndlast(SWIGTYPE_p_p_setT setp, SWIGTYPE_p_void elem) {
    qhullJNI.qh_setappend2ndlast(SWIGTYPE_p_p_setT.getCPtr(setp), SWIGTYPE_p_void.getCPtr(elem));
  }

  public static void qh_setcheck(setT set, String tname, long id) {
    qhullJNI.qh_setcheck(setT.getCPtr(set), set, tname, id);
  }

  public static void qh_setcompact(setT set) {
    qhullJNI.qh_setcompact(setT.getCPtr(set), set);
  }

  public static setT qh_setcopy(setT set, int extra) {
    long cPtr = qhullJNI.qh_setcopy(setT.getCPtr(set), set, extra);
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static SWIGTYPE_p_void qh_setdel(setT set, SWIGTYPE_p_void elem) {
    long cPtr = qhullJNI.qh_setdel(setT.getCPtr(set), set, SWIGTYPE_p_void.getCPtr(elem));
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void qh_setdellast(setT set) {
    long cPtr = qhullJNI.qh_setdellast(setT.getCPtr(set), set);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void qh_setdelnth(setT set, int nth) {
    long cPtr = qhullJNI.qh_setdelnth(setT.getCPtr(set), set, nth);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void qh_setdelnthsorted(setT set, int nth) {
    long cPtr = qhullJNI.qh_setdelnthsorted(setT.getCPtr(set), set, nth);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void qh_setdelsorted(setT set, SWIGTYPE_p_void newelem) {
    long cPtr = qhullJNI.qh_setdelsorted(setT.getCPtr(set), set, SWIGTYPE_p_void.getCPtr(newelem));
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static setT qh_setduplicate(setT set, int elemsize) {
    long cPtr = qhullJNI.qh_setduplicate(setT.getCPtr(set), set, elemsize);
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static SWIGTYPE_p_p_void qh_setendpointer(setT set) {
    long cPtr = qhullJNI.qh_setendpointer(setT.getCPtr(set), set);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_void(cPtr, false);
  }

  public static int qh_setequal(setT setA, setT setB) {
    return qhullJNI.qh_setequal(setT.getCPtr(setA), setA, setT.getCPtr(setB), setB);
  }

  public static int qh_setequal_except(setT setA, SWIGTYPE_p_void skipelemA, setT setB, SWIGTYPE_p_void skipelemB) {
    return qhullJNI.qh_setequal_except(setT.getCPtr(setA), setA, SWIGTYPE_p_void.getCPtr(skipelemA), setT.getCPtr(setB), setB, SWIGTYPE_p_void.getCPtr(skipelemB));
  }

  public static int qh_setequal_skip(setT setA, int skipA, setT setB, int skipB) {
    return qhullJNI.qh_setequal_skip(setT.getCPtr(setA), setA, skipA, setT.getCPtr(setB), setB, skipB);
  }

  public static void qh_setfree(SWIGTYPE_p_p_setT set) {
    qhullJNI.qh_setfree(SWIGTYPE_p_p_setT.getCPtr(set));
  }

  public static void qh_setfree2(SWIGTYPE_p_p_setT setp, int elemsize) {
    qhullJNI.qh_setfree2(SWIGTYPE_p_p_setT.getCPtr(setp), elemsize);
  }

  public static void qh_setfreelong(SWIGTYPE_p_p_setT set) {
    qhullJNI.qh_setfreelong(SWIGTYPE_p_p_setT.getCPtr(set));
  }

  public static int qh_setin(setT set, SWIGTYPE_p_void setelem) {
    return qhullJNI.qh_setin(setT.getCPtr(set), set, SWIGTYPE_p_void.getCPtr(setelem));
  }

  public static int qh_setindex(setT set, SWIGTYPE_p_void setelem) {
    return qhullJNI.qh_setindex(setT.getCPtr(set), set, SWIGTYPE_p_void.getCPtr(setelem));
  }

  public static void qh_setlarger(SWIGTYPE_p_p_setT setp) {
    qhullJNI.qh_setlarger(SWIGTYPE_p_p_setT.getCPtr(setp));
  }

  public static int qh_setlarger_quick(int setsize, SWIGTYPE_p_int newsize) {
    return qhullJNI.qh_setlarger_quick(setsize, SWIGTYPE_p_int.getCPtr(newsize));
  }

  public static SWIGTYPE_p_void qh_setlast(setT set) {
    long cPtr = qhullJNI.qh_setlast(setT.getCPtr(set), set);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static setT qh_setnew(int size) {
    long cPtr = qhullJNI.qh_setnew(size);
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static setT qh_setnew_delnthsorted(setT set, int size, int nth, int prepend) {
    long cPtr = qhullJNI.qh_setnew_delnthsorted(setT.getCPtr(set), set, size, nth, prepend);
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static void qh_setprint(SWIGTYPE_p_FILE fp, String string, setT set) {
    qhullJNI.qh_setprint(SWIGTYPE_p_FILE.getCPtr(fp), string, setT.getCPtr(set), set);
  }

  public static void qh_setreplace(setT set, SWIGTYPE_p_void oldelem, SWIGTYPE_p_void newelem) {
    qhullJNI.qh_setreplace(setT.getCPtr(set), set, SWIGTYPE_p_void.getCPtr(oldelem), SWIGTYPE_p_void.getCPtr(newelem));
  }

  public static int qh_setsize(setT set) {
    return qhullJNI.qh_setsize(setT.getCPtr(set), set);
  }

  public static setT qh_settemp(int setsize) {
    long cPtr = qhullJNI.qh_settemp(setsize);
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static void qh_settempfree(SWIGTYPE_p_p_setT set) {
    qhullJNI.qh_settempfree(SWIGTYPE_p_p_setT.getCPtr(set));
  }

  public static void qh_settempfree_all() {
    qhullJNI.qh_settempfree_all();
  }

  public static setT qh_settemppop() {
    long cPtr = qhullJNI.qh_settemppop();
    return (cPtr == 0) ? null : new setT(cPtr, false);
  }

  public static void qh_settemppush(setT set) {
    qhullJNI.qh_settemppush(setT.getCPtr(set), set);
  }

  public static void qh_settruncate(setT set, int size) {
    qhullJNI.qh_settruncate(setT.getCPtr(set), set, size);
  }

  public static int qh_setunique(SWIGTYPE_p_p_setT set, SWIGTYPE_p_void elem) {
    return qhullJNI.qh_setunique(SWIGTYPE_p_p_setT.getCPtr(set), SWIGTYPE_p_void.getCPtr(elem));
  }

  public static void qh_setzero(setT set, int idx, int size) {
    qhullJNI.qh_setzero(setT.getCPtr(set), set, idx, size);
  }

  public static void setQh_qhstat(qhstatT value) {
    qhullJNI.qh_qhstat_set(qhstatT.getCPtr(value), value);
  }

  public static qhstatT getQh_qhstat() {
    long cPtr = qhullJNI.qh_qhstat_get();
    return (cPtr == 0) ? null : new qhstatT(cPtr, false);
  }

  public static void qh_allstatI() {
    qhullJNI.qh_allstatI();
  }

  public static void qh_allstatistics() {
    qhullJNI.qh_allstatistics();
  }

  public static void qh_collectstatistics() {
    qhullJNI.qh_collectstatistics();
  }

  public static void qh_freestatistics() {
    qhullJNI.qh_freestatistics();
  }

  public static void qh_initstatistics() {
    qhullJNI.qh_initstatistics();
  }

  public static SWIGTYPE_p_boolT qh_newstats(int idx, SWIGTYPE_p_int nextindex) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_newstats(idx, SWIGTYPE_p_int.getCPtr(nextindex)), true);
  }

  public static SWIGTYPE_p_boolT qh_nostatistic(int i) {
    return new SWIGTYPE_p_boolT(qhullJNI.qh_nostatistic(i), true);
  }

  public static void qh_printallstatistics(SWIGTYPE_p_FILE fp, String string) {
    qhullJNI.qh_printallstatistics(SWIGTYPE_p_FILE.getCPtr(fp), string);
  }

  public static void qh_printstatistics(SWIGTYPE_p_FILE fp, String string) {
    qhullJNI.qh_printstatistics(SWIGTYPE_p_FILE.getCPtr(fp), string);
  }

  public static void qh_printstatlevel(SWIGTYPE_p_FILE fp, int id) {
    qhullJNI.qh_printstatlevel(SWIGTYPE_p_FILE.getCPtr(fp), id);
  }

  public static void qh_printstats(SWIGTYPE_p_FILE fp, int idx, SWIGTYPE_p_int nextindex) {
    qhullJNI.qh_printstats(SWIGTYPE_p_FILE.getCPtr(fp), idx, SWIGTYPE_p_int.getCPtr(nextindex));
  }

  public static double qh_stddev(int num, double tot, double tot2, SWIGTYPE_p_double ave) {
    return qhullJNI.qh_stddev(num, tot, tot2, SWIGTYPE_p_double.getCPtr(ave));
  }

}
