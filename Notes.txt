NOTES:
 
  ==============================================
  Scheduling:
  ==============================================
 
  Andrew: working on the weekends and sometimes at night after work
 
  Ares: pretty much the same
 
  meetup every saturday
 
  ==============================================
  Ownership rules:
  ==============================================
 
  super shares?
 
  ownershares are worth zero dollars and constitute one vote
 
  one entity can have one vote
 
  can destroy ownershare at anytime for no financial compensation
 
  to create and ownershare everyone must agree
 
  public shares are normal but don't constitute board membership
 
  everyones shares get split during splitting ( no one man gets fucked policy)
 
  trade secrets including algorithms must be kept secret until death and beyond
 
 
 
  ================================================
  Paper Credits
  ================================================
 
  how do recognize Clayton and how much does he deserve:
  definitely on the paper but is he a special thanks or last author?
 
  Andrew Wollack and Ares Shackleford are first co-authors
 
  Special thanks to: Clayton Chu, Edward Wollack, idk who else yet
 
  ================================================
  Monetization Plan:
  ================================================
  Should we even tell people about this
 
  Ryan and Alec to look at this? how are we willing to offer, how do we establish trust,
 
 
  given the current recession and virus situation is it prudent to  release our findings to the public or pursue
  business ventures given the lack of capital available?
 
  will we go to jail for releasing this?
 
  do we know the full implications of P=NP?
 
  should we release the code or just the general algorithm? is it any different?
 
 
  Sectors:
    security: steal things?
    networking: verizon
    stock market:  how to stop, trade secret?
    delivery routing amazon?
    neural network architecture replacement:
 
   https://cacm.acm.org/magazines/2009/9/38904-the-status-of-the-p-versus-np-problem/fulltext
 
    Finding a DNA sequence that best fits a collection of fragments of the sequence (see Gusfield20).
 	 Finding a ground state in the Ising model of phase transitions (see Cipra8).
 	 Finding Nash Equilbriums with specific properties in a number of environments (see Conitzer9).
 	 Finding optimal protein threading procedures.26
 	 Determining if a mathematical statement has a short proof (follows from Cook10).
 
   example:
   Google pagerank is not that complicated the business moat is number of people using hte platform.
 
   Patent: could we patent and would it be worth it? would we have to make a product that relies on
   the algorithm to patent
 
   how to prove:?
   Two cases:
   A shell is a SHell of S then A is a TSP Path of A
 
   Does a shell collapse onto a Tsp path result in another tsp path if the tsp path was enclosing the shell
 
   How to generalize in higher dimensions? is this natural from the algorithm we have currently?
 
  =========================================
  Definitions:
  =========================================
  Collapse function - takes all of A and inserts each point into the closest neighboring segment of B
  where the number of segments in B grows with each insert (Clayton)
 
  Reduce function - takes a Shell and makes single replacements until the shell is in a minimal state
 
  X> = collapse function i.e. AX>B =collapse of A onto B and A <X B = collapse of B onto A
  NOTE: the path on the left always encloses the path on the right
 
  Solve Set - the collection of points to solve TSP on. Abbreviated as S
 
  Shell - the minimal closed polygon with vertices that are in the Solve Set  that encloses the Solve Set.
 
  Shell Function - F(S) = Shell of S
 
  Related Shells - R=
  A = F(S)
  S2 = S - A
  B = F(S2)
  A and B are Related Shells and this relationship is associative so if (A R= B) and (B R= C) then (A R= C)
 
  Shell Order -how many internal Related Shells a Shell has  in the previous example A has 2 internal shells,
  B has 1, and C has 0, so A has Order 2, B has Order 1 etc.
 
  TSP Path - A closed polygon with every point in S in TSP Path such that the distance is minimized
 
  =======================================
  Equations:
  =======================================
 
  1111111111111111111111111111111111111111111
  A is a Shell of S then A is a TSP Path of A
 
  let A and B be Related Shells where the order of A is larger than the order of B
 
  C = A <X B
 
  C is a TSP Path and not a Shell
 
  2222222222222222222222222222222222222222222
  let D and E be TSP Paths
 
  G = D X> E
 
  H = E X> D
 
  G dosen't necissarily equal H
 
  3333333333333333333333333333333333333333333
 
  Least comfortable with this one
 
  If you have a path J constructed by ((A1 <X A2) <X ...) <X AN where AN is the order 0 Shell of S and A1 is
  the maximal shell, Then J is a TSP path so long as the shell order from one vertex to the next never changes by more
  than 1.
 
  NOT TURE
 
  4444444444444444444444444444444444444444444
 
  We can make 3 related shells B,C and Enclosing TSP Path A into a TSP Path via the following consensus algorithm
 
  Unsure if A can be a TSP Path or if only works for three related shells, if not i dont know what to do.
 
  let D be A <X B with shell order (A + B )/2
 
  let E be B X> C  with shell order (B + C)/2
 
 
  let TSPSol  = D & E
  for example A = [ 1 , 2, 3 ]
  			   B = [ 4 , 5, 6 ]
  			   C = [ 7 , 8, 9 ]
 
  say that    D = [1, 2, 4, 5, 3, 6]
  and that    E = [4, 7, 8, 9, 5, 6]
 
  then        TSPSOL = [1, 2, 4, 7, 8, 9, 5, 3, 6]
 
  this is an example with no conflicts
 
  still need to figure out how to resolve conflicts
 
  Conflict example:
 
  say that D = [1, 4, 2, 5, 3, 6]
  and that E = [4, 7, 8, 9, 5, 6]
 
  how would we sort 2, 7, 8, and 9
 
  by their distance to 4 and 5?
 
  or
 
  collapse of 2,7,8,9 onto the line segment formed by 4,5
 
  or
 
  idfk
 
  it is unclear if this works for more than three shells( i think it does)
 
 
  555555555555555555555555555555555555555555555555555
 
 
  let A be a TSPPath such that A encloses minimal  Shell B
 
  then A <X B is TSPPath
 
  this is probably false unless???
 
  666666666666666666666666666666666666666666666666666
 
  It is  interesting to note that while the property that the order from one vertex to the next never changes by more
  than 1 does not hold for all TSP Paths, each shell can be thought of as dividing the TSP Path into  into sections where
  each vertex of the shell owns a  part of the TSP PAth that leads to the next vertex of the shell in the clockwise or
   counter clockwise direction however you can not say this about any ordered group of points on the path.
 
  ^ this is common but false in general
  I am pretty sure that the points will not always be in a clockwise or counter clockwise order with respect to each
  other, but they will always be in the same order when merged with the shells around them can this even possibly be true?
 
  WRONG WALL
 
  =======================================================================================
  OPEN QUESTIONS:
  =======================================================================================
  Q:	Are there any collapse and reduce functions that could possibly be used to  maintain tsppath without doing the ]
  		consensus algorithm on the induction step?
 
  A:	So far no, any collapse/reduce function that I have come up with cannot be used to do simple induction without
  		a consensus function.
 
  =======================================================================================
  Q: 	Is the consensus function the same as collapsing every shell onto its neighbors and doing consensus on those
  		collapsed shells?
 
  A:	I think that this is the case and is the reason why you can't just collapse and reduce the parent shell onto its
  		children recursively.
 
  ======================================================================================
  Q: 	Is the algorithm a good optimizer or does it actually solve TSP?
 
  A:	There is no way to know this without a proof that the algorithm optimally solves TSP, but my intuition is that
  		it does solve TSP.
 
 
  Notes:
 
  need to make it one at a time instead of 2 at a time but use the 2 to figure it out
 
  use the
  
Step 1: do everything like normal
Step 2: when we start to do the consensus algorithm with the subsets in between the barrier points we need to change our algo
Step 3: retrofit existing architecture to use ND points instead of 2D points (this will complicate visualization a lot
     			probably best to only visualize a point if it only has two coords.
Step 4: new algorithm is:
  			1. Let Points S and E from the barrier shell be the start and end points that we want to optimize around
  			2. Create a new PointSet P_SE and let it be all of the points in between S and E including S and E
  			3. From the P_SE create a distance matrix DM out of the points
  			4. Add a new dummy point D that will act as a wormhole between S and E to DM
  			4a. D will have distance 0 to S and E in DM
  			4b. Let M be the maximum distance in DM
  			4c. D will have distance M to all other points besides S and E
  			5. Triangle time baby
  			5a. Add M to all points in DM so that it is TSPMetric form
 				5b. use the triangle inequality to triangulate the points in DM and add them to P_SE'
  			5c. while adding the points make sure to label them with their original coords in P_SE
  			6. run TSP solver on P_SE'
  			7. add the points back to the original Point Set removing D and add the min order from S to E.
 
 
